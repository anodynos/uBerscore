// Generated by uRequire v0.3.0alpha21
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/Blender', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../Logger', '../type', '../isPlain', '../certain', '../mutate', './bindAndCertain', '../go', '../YouAreDaChef'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, YADC, bindAndCertain, certain, debugLevel, go, isPlain, l, mutate, simpleMutateCertain, type, _, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

debugLevel = 0;

l = new (require("../Logger"))("Blender", debugLevel != null ? debugLevel : 0);

type = require("../type");

isPlain = require("../isPlain");

certain = require("../certain");

simpleMutateCertain = function(o) {
    return certain(o);
};

mutate = require("../mutate");

bindAndCertain = require("./bindAndCertain");

go = require("../go");

Blender = function() {
    var defaultBBOrder;
    defaultBBOrder = [ "src", "dst" ];
    function Blender() {
        this._blend = __bind(this._blend, this);
        this.blend = __bind(this.blend, this);
        this._constructor = __bind(this._constructor, this);
        this._constructor.apply(this, arguments);
    }
    Blender.prototype._constructor = function(blenderBehaviors, actions) {
        var bb, dbb, k, lastDBB, _i, _j, _len, _len1, _ref, _ref1;
        this.blenderBehaviors = blenderBehaviors;
        this.actions = actions;
        if (!_.isEmpty(arguments)) {
            if (!_.isArray(this.blenderBehaviors)) {
                this.actions = void 0;
                this.blenderBehaviors = [].slice.call(arguments, 0);
            }
        }
        this.blenderBehaviors || (this.blenderBehaviors = []);
        if (_.isObject(this.actions)) {
            _.extend(this, this.actions);
            _.bindAll(this);
        }
        this.defaultBlenderBehaviors || (this.defaultBlenderBehaviors = []);
        this.defaultBlenderBehaviors.push({
            order: [ "src", "dst" ],
            Array: {
                A: "deepOverwrite",
                "{}": "deepOverwrite"
            },
            Object: {
                O: "deepOverwrite",
                "[]": "deepOverwrite"
            },
            "*": {
                "*": "overwrite"
            }
        });
        lastDBB = _.last(this.defaultBlenderBehaviors);
        for (k in lastDBB) {
            dbb = lastDBB[k];
            if (!_.isArray(dbb) && _.isUndefined(dbb["*"])) {
                dbb["*"] = lastDBB["*"]["*"];
            }
        }
        _ref = this.defaultBlenderBehaviors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bb = _ref[_i];
            this.blenderBehaviors.push(bb);
        }
        this.certainBlenderBehaviors = [];
        _ref1 = this.blenderBehaviors;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            bb = _ref1[_j];
            bb = _.clone(bb, true);
            this.certainBlenderBehaviors.push(bindAndCertain(bb, this));
        }
        return this.currentPath = [];
    };
    Blender.prototype.blend = function() {
        var dst, dstObject, sources, src, _i, _len;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (_.isEmpty(this.currentPath)) {
            dstObject = {
                $: dst
            };
            for (_i = 0, _len = sources.length; _i < _len; _i++) {
                src = sources[_i];
                this._blend(dstObject, {
                    $: src
                });
            }
            return dstObject.$;
        } else {
            return this._blend.apply(this, arguments);
        }
    };
    Blender.prototype._blend = function() {
        var action, bbOrder, bbi, cbb, dst, prop, result, sources, src, types, visitNextBB, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            src = sources[_i];
            for (prop in src) {
                if (!__hasProp.call(src, prop)) continue;
                this.currentPath.push(prop);
                types = {
                    dst: type(dst[prop], true),
                    src: type(src[prop], true)
                };
                visitNextBB = true;
                _ref = this.certainBlenderBehaviors;
                for (bbi = _j = 0, _len1 = _ref.length; _j < _len1; bbi = ++_j) {
                    cbb = _ref[bbi];
                    if (!visitNextBB) {
                        continue;
                    }
                    _ref1 = this.blenderBehaviors[bbi].order || defaultBBOrder;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        bbOrder = _ref1[_k];
                        if (_.isUndefined(types[bbOrder])) {
                            throw l.err("_.Blender.blend: Error: Invalid BlenderBehaviour `order` '" + bbOrder + "',\nwhile reading BlenderBehaviour #" + bbi + " :\n", this.blenderBehaviors[bbi], "\n\nDefault BlenderBehaviour order is ", defaultBBOrder);
                        } else {
                            if (!(cbb === void 0 || cbb.isAction === this)) {
                                cbb = cbb(types[bbOrder]);
                            } else {
                                break;
                            }
                        }
                    }
                    if (cbb === void 0) {
                        continue;
                    } else {
                        action = cbb;
                    }
                    result = action(prop, src, dst);
                    visitNextBB = false;
                    if (!(result === this.SKIP || result === this.NEXT || result === this.DELETE || result === this.DELETE_NEXT)) {
                        if (_.isArray(result) && result[0] === this.NEXT) {
                            result = result[1];
                            visitNextBB = true;
                        }
                        dst[prop] = result;
                    } else {
                        if (result === this.DELETE || result === this.DELETE_NEXT) {
                            delete dst[prop];
                        }
                        if (result === this.NEXT || result === this.DELETE_NEXT) {
                            visitNextBB = true;
                        }
                    }
                }
                this.currentPath.pop();
            }
        }
        return dst;
    };
    Blender.prototype.SKIP = {
        ActionResult: "SKIP"
    };
    Blender.prototype.NEXT = {
        ActionResult: "NEXT"
    };
    Blender.prototype.DELETE = {
        ActionResult: "DELETE"
    };
    Blender.prototype.DELETE_NEXT = {
        ActionResult: "DELETE_NEXT"
    };
    Blender.prototype.overwrite = function(prop, src, dst) {
        return src[prop];
    };
    Blender.prototype.deepOverwrite = function(prop, src, dst) {
        return this.blend(dst[prop], src[prop]);
    };
    Blender.prototype.arrayAppend = function(prop, src, dst) {
        var s, _i, _len, _ref;
        _ref = src[prop];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            dst[prop].push(s);
        }
        return dst[prop];
    };
    return Blender;
}();

module.exports = Blender;

YADC = require("../YouAreDaChef").YouAreDaChef;

YADC(Blender).before(/overwriteOrReplace|deepOverwrite|overwrite|print/, function(match, prop, src, dst) {
    return l.debug("YADC:" + match + "\n'" + type(dst[prop]) + "'    <--  '" + type(src[prop]) + "'   /" + this.currentPath.join("/"), dst[prop], "    <--  ", src[prop]);
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();