// Generated by uRequire v0.3.0alpha22
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/Blender', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../Logger', '../type', '../YouAreDaChef'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, YADC, debugLevel, l, type, _, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

debugLevel = 0;

l = new (require("../Logger"))("Blender", debugLevel != null ? debugLevel : 0);

type = require("../type");

Blender = function() {
    var defaultBBOrder;
    Blender.defaultOptions = {
        inherited: false,
        copyProto: false
    };
    defaultBBOrder = [ "src", "dst" ];
    function Blender() {
        var bb, bbi, blenderBehaviors, dbb, lastDBB, options, typeName, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        blenderBehaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.blenderBehaviors = blenderBehaviors;
        this._blend = __bind(this._blend, this);
        this.blend = __bind(this.blend, this);
        this.getAction = __bind(this.getAction, this);
        (this._optionsList || (this._optionsList = [])).unshift(Blender.defaultOptions);
        if (_.isArray(this.blenderBehaviors[0])) {
            if (l.debugLevel >= 20) {
                l.debug("We might have options:", this.blenderBehaviors[1], "@_optionsList (defaults):", this._optionsList);
            }
            this._optionsList.push(this.blenderBehaviors[1]);
            this.blenderBehaviors = this.blenderBehaviors[0];
        }
        this._optionsList.unshift(options = {});
        _.extend.apply(void 0, this._optionsList);
        if (l.debugLevel >= 10) {
            l.debug("Final blender options:", options);
        }
        _.extend(this, options);
        delete this._optionsList;
        (this.defaultBlenderBehaviors || (this.defaultBlenderBehaviors = [])).push(Blender.behavior);
        lastDBB = _.last(this.defaultBlenderBehaviors);
        _ref = lastDBB["|"];
        for (typeName in _ref) {
            dbb = _ref[typeName];
            if (_.isUndefined(dbb["*"])) {
                dbb["*"] || (dbb["*"] = lastDBB["|"]["*"]["*"]);
            }
        }
        _ref1 = this.defaultBlenderBehaviors;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            bb = _ref1[_i];
            this.blenderBehaviors.push(bb);
        }
        _ref2 = this.blenderBehaviors;
        for (bbi = _j = 0, _len1 = _ref2.length; _j < _len1; bbi = ++_j) {
            bb = _ref2[bbi];
            this.blenderBehaviors[bbi]["|"] = Blender.shortifyTypeNames(bb["|"]);
        }
        this.path = [];
    }
    Blender.shortifyTypeNames = function(bbSrcDstSpec) {
        var key, short, val;
        if (bbSrcDstSpec == null) {
            bbSrcDstSpec = {};
        }
        for (key in bbSrcDstSpec) {
            val = bbSrcDstSpec[key];
            if (type.isType(key)) {
                short = type.toShort(key);
                if (short && key !== short) {
                    bbSrcDstSpec[short] = bbSrcDstSpec[key];
                    delete bbSrcDstSpec[key];
                }
            }
            if (_.isPlainObject(val)) {
                Blender.shortifyTypeNames(val);
            }
        }
        return bbSrcDstSpec;
    };
    Blender.prototype.getAction = function(actionName, belowBlenderBehaviorIndex) {
        var bb, bbi, _i, _len, _ref;
        if (belowBlenderBehaviorIndex == null) {
            belowBlenderBehaviorIndex = this.currentBlenderBehaviorIndex;
        }
        _ref = this.blenderBehaviors;
        for (bbi = _i = 0, _len = _ref.length; _i < _len; bbi = ++_i) {
            bb = _ref[bbi];
            if (bbi >= belowBlenderBehaviorIndex) {
                if (_.isFunction(bb[actionName])) {
                    return bb[actionName];
                }
            }
        }
        if (_.isFunction(this[actionName])) {
            return this[actionName];
        } else {
            throw l.err("_B.Blender.blend: Error: Invalid BlenderBehaviour `actionName` = ", actionName, " - no Function by that name is found in a preceding BlenderBehaviour or Blender it self.", " belowBlenderBehaviorIndex=" + belowBlenderBehaviorIndex, " @currentBlenderBehaviorIndex=" + this.currentBlenderBehaviorIndex, " @blenderBehaviors=", this.blenderBehaviors);
        }
    };
    Blender.prototype.blend = function() {
        var dst, dstObject, sources, src, _i, _len;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (_.isEmpty(this.path)) {
            dstObject = {
                $: dst
            };
            this.dstRoot = dst;
            for (_i = 0, _len = sources.length; _i < _len; _i++) {
                src = sources[_i];
                this.srcRoot = src;
                this._blend(dstObject, {
                    $: src
                });
            }
            return dstObject.$;
        } else {
            return this._blend.apply(this, arguments);
        }
    };
    Blender.prototype._blend = function() {
        var action, bb, bbOrder, bbi, currentBBSrcDstSpec, dst, nextBBSrcDstSpec, p, prop, props, result, sources, src, types, v, visitNextBB, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            src = sources[_i];
            props = _.isArray(src) ? function() {
                var _j, _len1, _results;
                _results = [];
                for (p = _j = 0, _len1 = src.length; _j < _len1; p = ++_j) {
                    v = src[p];
                    _results.push(p);
                }
                return _results;
            }() : this.inherited ? function() {
                var _results;
                _results = [];
                for (p in src) {
                    _results.push(p);
                }
                return _results;
            }() : function() {
                var _results;
                _results = [];
                for (p in src) {
                    if (!__hasProp.call(src, p)) continue;
                    _results.push(p);
                }
                return _results;
            }();
            for (_j = 0, _len1 = props.length; _j < _len1; _j++) {
                prop = props[_j];
                this.path.push(prop);
                types = {
                    dst: type(dst[prop], true),
                    src: type(src[prop], true)
                };
                if (l.debugLevel >= 50) {
                    l.debug(50, "@path = /" + this.path.join("/") + "\n'" + type(dst[prop]) + "'    <--  '" + type(src[prop]) + "'\n", dst[prop], "    <--  ", src[prop]);
                }
                visitNextBB = true;
                _ref = this.blenderBehaviors;
                for (bbi = _k = 0, _len2 = _ref.length; _k < _len2; bbi = ++_k) {
                    bb = _ref[bbi];
                    if (!visitNextBB) {
                        continue;
                    }
                    l.debug(60, "Looking @ bbi=" + bbi + ", blenderBehaviors =\n", bb);
                    nextBBSrcDstSpec = bb["|"];
                    _ref1 = bb.order || defaultBBOrder;
                    for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
                        bbOrder = _ref1[_l];
                        if (l.debugLevel >= 80) {
                            l.debug(80, "At bbOrder='" + bbOrder + "'", " types[bbOrder]='" + types[bbOrder] + "'", " nextBBSrcDstSpec=\n", nextBBSrcDstSpec);
                        }
                        if (_.isUndefined(types[bbOrder])) {
                            throw l.err("_.Blender.blend: Error: Invalid BlenderBehaviour `order` '" + bbOrder + "',\nwhile reading BlenderBehaviour #" + bbi + " :\n", this.blenderBehaviors[bbi], "\n\nDefault BlenderBehaviour order is ", defaultBBOrder);
                        } else {
                            currentBBSrcDstSpec = nextBBSrcDstSpec;
                            nextBBSrcDstSpec = nextBBSrcDstSpec[types[bbOrder]] || nextBBSrcDstSpec["*"];
                            if (l.debugLevel >= 70) {
                                l.debug(70, function() {
                                    if (nextBBSrcDstSpec === void 0) {
                                        return "Found NO nextBBSrcDstSpec at all - go to NEXT BlenderBehaviour";
                                    } else {
                                        if (nextBBSrcDstSpec === currentBBSrcDstSpec[types[bbOrder]]) {
                                            return "Found ";
                                        } else {
                                            if (nextBBSrcDstSpec === currentBBSrcDstSpec["*"]) {
                                                return "Found NOT exact nextBBSrcDstSpec, but a '*'";
                                            } else {
                                                if (_.isString(nextBBSrcDstSpec)) {
                                                    return "Found a String ";
                                                } else {
                                                    if (_.isFunction(nextBBSrcDstSpec)) {
                                                        return "Found a Function ";
                                                    } else {
                                                        throw "Unknown nextBBSrcDstSpec = " + l.prettify(nextBBSrcDstSpec);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }(), " bbOrder='" + bbOrder + "'", " types[bbOrder]='" + types[bbOrder] + "'", " nextBBSrcDstSpec=\n", nextBBSrcDstSpec);
                            }
                            if (nextBBSrcDstSpec === void 0 || _.isString(nextBBSrcDstSpec) || _.isFunction(nextBBSrcDstSpec)) {
                                break;
                            }
                        }
                    }
                    if (nextBBSrcDstSpec === void 0) {
                        continue;
                    } else {
                        action = nextBBSrcDstSpec;
                        if (!_.isFunction(action)) {
                            if (!_.isString(action)) {
                                throw l.err("_B.Blender.blend: Error: Invalid BlenderBehaviour `action` (neither 'Function' nor 'String') : ", action);
                            } else {
                                action = this.getAction(action, bbi);
                            }
                        }
                    }
                    this.currentBlenderBehaviorIndex = bbi;
                    result = action(prop, src, dst, this);
                    visitNextBB = false;
                    if (!(result === Blender.SKIP || result === Blender.NEXT || result === Blender.DELETE || result === Blender.DELETE_NEXT)) {
                        if (_.isArray(result) && result[0] === Blender.NEXT) {
                            result = result[1];
                            visitNextBB = true;
                        }
                        l.debug(20, "Action Called - Value assigning:  @path =", this.path.join("/"), "\n  value =", l.prettify(result));
                        dst[prop] = result;
                    } else {
                        l.debug(30, "Action Called - ActionResult = ", result);
                        if (result === Blender.DELETE || result === Blender.DELETE_NEXT) {
                            delete dst[prop];
                        }
                        if (result === Blender.NEXT || result === Blender.DELETE_NEXT) {
                            visitNextBB = true;
                        }
                    }
                }
                this.path.pop();
            }
        }
        return dst;
    };
    Blender.SKIP = {
        ActionResult: "SKIP"
    };
    Blender.NEXT = {
        ActionResult: "NEXT"
    };
    Blender.DELETE = {
        ActionResult: "DELETE"
    };
    Blender.DELETE_NEXT = {
        ActionResult: "DELETE_NEXT"
    };
    Blender.prototype.overwrite = function(prop, src, dst, blender) {
        return src[prop];
    };
    Blender.prototype.deepOverwrite = function(prop, src, dst, blender) {
        if (blender.copyProto) {
            dst[prop].__proto__ = src[prop].__proto__;
        }
        return blender.blend(dst[prop], src[prop]);
    };
    Blender.prototype.arrayAppend = function(prop, src, dst, blender) {
        var s, _i, _len, _ref;
        _ref = src[prop];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            dst[prop].push(s);
        }
        return dst[prop];
    };
    Blender.behavior = {
        order: [ "dst", "src" ],
        "|": {
            "*": {
                "*": "overwrite"
            },
            Array: {
                Array: "deepOverwrite",
                Object: "deepOverwrite",
                Function: "deepOverwrite"
            },
            Object: {
                Object: "deepOverwrite",
                Array: "deepOverwrite",
                Function: "deepOverwrite"
            }
        }
    };
    return Blender;
}();

module.exports = Blender;

if (l.debugLevel > 40) {
    YADC = require("../YouAreDaChef").YouAreDaChef;
    YADC(Blender).before(/overwriteOrReplace|deepOverwrite|overwrite|print/, function(match, prop, src, dst, blender) {
        return l.debug(40, "YADC:" + match + " @path = /" + blender.path.join("/") + "\n'" + type(dst[prop]) + "'    <--  '" + type(src[prop]) + "'\n", dst[prop], "    <--  ", src[prop]);
    }).before(/getAction/, function(match, actionName) {
        return l.debug(50, "getAction(actionName = " + actionName + ")");
    });
}
// uRequire: end body of original nodejs module


return module.exports;
})
})();