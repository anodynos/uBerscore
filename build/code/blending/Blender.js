// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/Blender', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../type', '../objects/getp', '../Logger'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, getp, type, _, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

type = require("../type");

getp = require("../objects/getp");

Blender = function() {
    Blender.defaultOptions = {
        inherited: false,
        copyProto: false,
        pathTerminator: "|",
        isExactPath: true,
        pathSeparator: ":",
        debugLevel: 0
    };
    Blender.prototype.defaultBBOrder = [ "src", "dst" ];
    function Blender() {
        var bb, bbi, blenderBehaviors, dbb, lastDBB, options, typeName, _i, _j, _len, _len1, _ref, _ref1;
        blenderBehaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.blenderBehaviors = blenderBehaviors;
        this._blend = __bind(this._blend, this);
        this.blend = __bind(this.blend, this);
        this.getNextAction = __bind(this.getNextAction, this);
        this.getAction = __bind(this.getAction, this);
        (this._optionsList || (this._optionsList = [])).unshift(Blender.defaultOptions);
        this.l = new (require("../Logger"))("uberscore/Blender");
        if (_.isArray(this.blenderBehaviors[0])) {
            if (this.l.deb(20)) {
                this.l.debug("We might have options:", this.blenderBehaviors[1], "@_optionsList (defaults):", this._optionsList);
            }
            this._optionsList.push(this.blenderBehaviors[1]);
            this.blenderBehaviors = this.blenderBehaviors[0];
        }
        this._optionsList.unshift(options = {});
        _.extend.apply(void 0, this._optionsList);
        this.l.debugLevel = options.debugLevel;
        if (this.l.deb(10)) {
            this.l.debug("Final blender options:", options);
        }
        _.extend(this, options);
        delete this._optionsList;
        (this.defaultBlenderBehaviors || (this.defaultBlenderBehaviors = [])).push(Blender.behavior);
        lastDBB = _.last(this.defaultBlenderBehaviors);
        for (typeName in lastDBB) {
            dbb = lastDBB[typeName];
            if (_.isUndefined(dbb["*"])) {
                dbb["*"] || (dbb["*"] = lastDBB["*"]["*"]);
            }
        }
        _ref = this.defaultBlenderBehaviors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bb = _ref[_i];
            this.blenderBehaviors.push(bb);
        }
        _ref1 = this.blenderBehaviors;
        for (bbi = _j = 0, _len1 = _ref1.length; _j < _len1; bbi = ++_j) {
            bb = _ref1[bbi];
            this.blenderBehaviors[bbi] = this.adjustBlenderBehavior(bb);
        }
        this.path = [];
    }
    Blender.prototype.adjustBlenderBehavior = function(blenderBehavior) {
        blenderBehavior.order || (blenderBehavior.order = this.defaultBBOrder);
        return this._adjustBbSrcDstPathSpec(blenderBehavior, blenderBehavior.order);
    };
    Blender.prototype._adjustBbSrcDstPathSpec = function(bbSrcDstPathSpec, orderRemaining) {
        var bbOrder, i, key, newV, p, path, pathItems, short, val, _i, _len;
        if (orderRemaining.length > 0) {
            bbOrder = orderRemaining[0];
            if (bbOrder === "path") {
                for (key in bbSrcDstPathSpec) {
                    val = bbSrcDstPathSpec[key];
                    if (key === this.pathTerminator) {
                        if (_.isPlainObject(val)) {
                            this._adjustBbSrcDstPathSpec(val, orderRemaining.slice(1));
                        }
                    } else {
                        pathItems = this.pathSeparator ? function() {
                            var _i, _len, _ref, _results;
                            _ref = key.split(this.pathSeparator);
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                path = _ref[_i];
                                if (path) {
                                    _results.push(path.trim());
                                }
                            }
                            return _results;
                        }.call(this) : [];
                        if (pathItems.length > 1) {
                            newV = bbSrcDstPathSpec;
                            for (i = _i = 0, _len = pathItems.length; _i < _len; i = ++_i) {
                                p = pathItems[i];
                                newV[p] || (newV[p] = {});
                                if (i < pathItems.length - 1) {
                                    newV = newV[p];
                                } else {
                                    newV[p] = val;
                                }
                            }
                            delete bbSrcDstPathSpec[key];
                        } else {
                            if (pathItems[0] && key !== pathItems[0]) {
                                bbSrcDstPathSpec[pathItems[0]] = val;
                                delete bbSrcDstPathSpec[key];
                            }
                        }
                        if (_.isPlainObject(val)) {
                            this._adjustBbSrcDstPathSpec(val, orderRemaining);
                        }
                    }
                }
            } else {
                for (key in bbSrcDstPathSpec) {
                    val = bbSrcDstPathSpec[key];
                    if (type.isType(key)) {
                        short = type.toShort(key);
                        if (short && key !== short) {
                            bbSrcDstPathSpec[short] = bbSrcDstPathSpec[key];
                            delete bbSrcDstPathSpec[key];
                        }
                    }
                    if (_.isPlainObject(val)) {
                        this._adjustBbSrcDstPathSpec(val, orderRemaining.slice(1));
                    }
                }
            }
        }
        return bbSrcDstPathSpec;
    };
    Blender.prototype.getAction = function(actionName, belowBlenderBehaviorIndex) {
        var bb, bbi, _i, _len, _ref;
        if (belowBlenderBehaviorIndex == null) {
            belowBlenderBehaviorIndex = this.currentBlenderBehaviorIndex;
        }
        _ref = this.blenderBehaviors;
        for (bbi = _i = 0, _len = _ref.length; _i < _len; bbi = ++_i) {
            bb = _ref[bbi];
            if (bbi >= belowBlenderBehaviorIndex) {
                if (_.isFunction(bb[actionName])) {
                    return bb[actionName];
                }
            }
        }
        if (_.isFunction(this[actionName])) {
            return this[actionName];
        } else {
            throw this.l.err("_B.Blender.blend: Error: Invalid BlenderBehavior `actionName` = ", actionName, " - no Function by that name is found in a preceding BlenderBehavior or Blender it self.", " belowBlenderBehaviorIndex=" + belowBlenderBehaviorIndex, " @currentBlenderBehaviorIndex=" + this.currentBlenderBehaviorIndex, " @blenderBehaviors=", this.blenderBehaviors);
        }
    };
    Blender.prototype.getNextAction = function(blenderBehavior, bbi, bbOrderValues) {
        var bbOrder, currentBBSrcDstSpec, nextBBSrcDstSpec, _i, _len, _ref;
        currentBBSrcDstSpec = blenderBehavior;
        _ref = blenderBehavior.order;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bbOrder = _ref[_i];
            if (currentBBSrcDstSpec === void 0 || _.isString(currentBBSrcDstSpec) || _.isFunction(currentBBSrcDstSpec)) {
                break;
            }
            if (this.l.deb(80)) {
                this.l.debug("At bbOrder='" + bbOrder + "'", bbOrder === "path" ? " @path=" + this.l.prettify(this.path) : " bbOrderValues[bbOrder]='" + bbOrderValues[bbOrder] + "'", " currentBBSrcDstSpec =\n", currentBBSrcDstSpec);
            }
            if (_.isUndefined(bbOrderValues[bbOrder])) {
                throw this.l.err("_.Blender.blend: Error: Invalid BlenderBehavior `order` '" + bbOrder + "',\nwhile reading BlenderBehavior #" + bbi + " :\n", this.blenderBehaviors[bbi], "\n\nDefault BlenderBehavior order is ", this.defaultBBOrder);
            } else {
                if (bbOrder === "path") {
                    nextBBSrcDstSpec = getp(currentBBSrcDstSpec, this.path.slice(1), {
                        terminateKey: this.isExactPath ? void 0 : this.pathTerminator
                    });
                    if (_.isObject(nextBBSrcDstSpec)) {
                        nextBBSrcDstSpec = nextBBSrcDstSpec["|"];
                    }
                } else {
                    nextBBSrcDstSpec = currentBBSrcDstSpec[bbOrderValues[bbOrder]] || currentBBSrcDstSpec["*"];
                }
                if (this.l.deb(70)) {
                    this.l.debug(70, function() {
                        if (nextBBSrcDstSpec === void 0) {
                            return "Found NO nextBBSrcDstSpec at all - go to NEXT BlenderBehavior";
                        } else {
                            if (bbOrder === "path") {
                                return "Got out of the path, having something!";
                            } else {
                                if (nextBBSrcDstSpec === currentBBSrcDstSpec[bbOrderValues[bbOrder]]) {
                                    return "Found ";
                                } else {
                                    if (nextBBSrcDstSpec === currentBBSrcDstSpec["*"]) {
                                        return "Found NOT exact nextBBSrcDstSpec, but a '*'";
                                    } else {
                                        if (_.isString(nextBBSrcDstSpec)) {
                                            return "Found a String ";
                                        } else {
                                            if (_.isFunction(nextBBSrcDstSpec)) {
                                                return "Found a Function ";
                                            } else {
                                                throw "Unknown nextBBSrcDstSpec = " + this.l.prettify(nextBBSrcDstSpec);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }.call(this), " \nbbOrder='" + bbOrder + "'", " \nbbOrderValues[bbOrder]='" + bbOrderValues[bbOrder] + "'", " \nnextBBSrcDstSpec=\n", nextBBSrcDstSpec);
                }
                currentBBSrcDstSpec = nextBBSrcDstSpec;
            }
        }
        return currentBBSrcDstSpec;
    };
    Blender.prototype.blend = function() {
        var dst, dstObject, sources, src, _i, _len;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (_.isEmpty(this.path)) {
            if (_.isUndefined(sources) || _.isEmpty(sources)) {
                sources = [ dst ];
                dst = _.isArray(dst) ? [] : {};
            }
            dstObject = {
                $: dst
            };
            this.dstRoot = dst;
            for (_i = 0, _len = sources.length; _i < _len; _i++) {
                src = sources[_i];
                this.srcRoot = src;
                this._blend(dstObject, {
                    $: src
                });
            }
            return dstObject.$;
        } else {
            return this._blend.apply(this, arguments);
        }
    };
    Blender.prototype._blend = function() {
        var action, bb, bbi, dst, nextBBSrcDstSpec, p, prop, props, result, sources, src, v, visitNextBB, _i, _j, _k, _len, _len1, _len2, _ref;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (_.isUndefined(sources) || _.isEmpty(sources)) {
            sources = [ dst ];
            dst = _.isArray(dst) ? [] : {};
        }
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            src = sources[_i];
            props = _.isArray(src) ? function() {
                var _j, _len1, _results;
                _results = [];
                for (p = _j = 0, _len1 = src.length; _j < _len1; p = ++_j) {
                    v = src[p];
                    _results.push(p);
                }
                return _results;
            }() : this.inherited ? function() {
                var _results;
                _results = [];
                for (p in src) {
                    _results.push(p);
                }
                return _results;
            }() : function() {
                var _results;
                _results = [];
                for (p in src) {
                    if (!__hasProp.call(src, p)) continue;
                    _results.push(p);
                }
                return _results;
            }();
            for (_j = 0, _len1 = props.length; _j < _len1; _j++) {
                prop = props[_j];
                this.path.push(prop);
                if (this.l.deb(50)) {
                    this.l.debug("@path = /" + this.path.join("/") + "\n'" + type(dst[prop]) + "'    <--  '" + type(src[prop]) + "'\n", dst[prop], "    <--  ", src[prop]);
                }
                visitNextBB = true;
                _ref = this.blenderBehaviors;
                for (bbi = _k = 0, _len2 = _ref.length; _k < _len2; bbi = ++_k) {
                    bb = _ref[bbi];
                    if (!visitNextBB) {
                        continue;
                    }
                    if (this.l.deb(60)) {
                        this.l.debug("Currently at @blenderBehaviors[" + bbi + "] =\n", bb);
                    }
                    nextBBSrcDstSpec = this.getNextAction(bb, bbi, {
                        dst: type(dst[prop], true),
                        src: type(src[prop], true),
                        path: this.path
                    });
                    if (nextBBSrcDstSpec === void 0) {
                        continue;
                    } else {
                        action = nextBBSrcDstSpec;
                        if (!_.isFunction(action)) {
                            if (!_.isString(action)) {
                                throw this.l.err("_B.Blender.blend: Error: Invalid BlenderBehavior `action` (neither 'Function' nor 'String') : ", action);
                            } else {
                                action = this.getAction(action, bbi);
                            }
                        }
                    }
                    this.currentBlenderBehaviorIndex = bbi;
                    this.currentBlenderBehavior = this.blenderBehaviors[bbi];
                    result = action(prop, src, dst, this);
                    visitNextBB = false;
                    if (!(result === Blender.SKIP || result === Blender.NEXT || result === Blender.DELETE || result === Blender.DELETE_NEXT)) {
                        if (_.isArray(result) && result[0] === Blender.NEXT) {
                            result = result[1];
                            visitNextBB = true;
                        }
                        if (this.l.deb(20)) {
                            this.l.debug("Action Called - Value assigning:  @path =", this.path.join("/"), "\n  value =", this.l.prettify(result));
                        }
                        dst[prop] = result;
                    } else {
                        if (this.l.deb(30)) {
                            this.l.debug("Action Called - ActionResult = ", result);
                        }
                        if (result === Blender.DELETE || result === Blender.DELETE_NEXT) {
                            delete dst[prop];
                        }
                        if (result === Blender.NEXT || result === Blender.DELETE_NEXT) {
                            visitNextBB = true;
                        }
                    }
                }
                this.path.pop();
            }
        }
        return dst;
    };
    Blender.SKIP = {
        ActionResult: "SKIP"
    };
    Blender.NEXT = {
        ActionResult: "NEXT"
    };
    Blender.DELETE = {
        ActionResult: "DELETE"
    };
    Blender.DELETE_NEXT = {
        ActionResult: "DELETE_NEXT"
    };
    Blender.prototype.overwrite = function(prop, src, dst, blender) {
        return src[prop];
    };
    Blender.prototype.deepOverwrite = function(prop, src, dst, blender) {
        if (blender.copyProto) {
            dst[prop].__proto__ = src[prop].__proto__;
        }
        return blender.blend(dst[prop], src[prop]);
    };
    Blender.prototype.arrayAppend = function(prop, src, dst, blender) {
        var s, _i, _len, _ref;
        _ref = src[prop];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            dst[prop].push(s);
        }
        return dst[prop];
    };
    Blender.behavior = {
        order: [ "dst", "src" ],
        "*": {
            "*": "overwrite"
        },
        Array: {
            "[]": "deepOverwrite",
            "{}": "deepOverwrite",
            "->": "deepOverwrite"
        },
        "{}": {
            O: "deepOverwrite",
            Array: "deepOverwrite",
            Function: "deepOverwrite"
        },
        "->": {
            "{}": "deepOverwrite",
            "[]": "deepOverwrite",
            "->": "deepOverwrite"
        }
    };
    return Blender;
}();

module.exports = Blender;
// uRequire: end body of original nodejs module


return module.exports;
})
})();