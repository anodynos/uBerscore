// Generated by uRequire v0.3.0alpha21
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/bindAndCertain', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../certain', '../Logger', '../type', '../mutate'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Logger, bindAndCertain, certain, l, mutate, toShortTypeFormat, type, _;

_ = require("lodash");

certain = require("../certain");

Logger = require("../Logger");

l = new Logger("Blending/bindAndCertain", 0);

type = require("../type");

mutate = require("../mutate");

bindAndCertain = function(o, bindTo, path, root) {
    var action, key, val;
    if (path == null) {
        path = [ "$" ];
    }
    if (_.isUndefined(root)) {
        root = o;
    }
    o = toShortTypeFormat(o);
    for (key in o) {
        val = o[key];
        if (!(key !== "order")) {
            continue;
        }
        path.push(key);
        if (_.isPlainObject(val)) {
            bindAndCertain(val, bindTo, path, root);
            o[key] = certain(val);
            o[key].isCertain = bindTo;
        } else {
            if (_.isFunction(val) || _.isString(val)) {
                if (_.isString(val)) {
                    if (_.isFunction(bindTo[val])) {
                        action = bindTo[val];
                    } else {
                        throw l.err("Error initializing blendBehaviour:\n", root, "at '" + path.join("/") + "'.\n\nNo action '" + l.prettify(val) + "' was found either on blender or your passed actions.");
                    }
                } else {
                    action = val;
                }
                o[key] = _.bind(action, bindTo);
                o[key].isAction = bindTo;
            } else {
                throw l.err("Error initializing blendBehaviour:\n", root, "at '" + path.join("/") + "'.\n\nFinal action '" + l.prettify(val) + "' is neither a Function, nor a String as functionName.");
            }
        }
        path.pop();
    }
    return certain(o);
};

toShortTypeFormat = function(o) {
    var key, short;
    for (key in o) {
        short = type.toShort(key);
        if (short && key !== short) {
            o[short] = o[key];
            delete o[key];
        }
    }
    return o;
};

module.exports = bindAndCertain;
// uRequire: end body of original nodejs module


return module.exports;
})
})();