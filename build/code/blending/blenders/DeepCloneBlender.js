// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/blenders/DeepCloneBlender', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../../agreement/isAgree', '../Blender', '../../type'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, DeepCloneBlender, type, _, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
        if (__hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
        this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
}, __slice = [].slice, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

_ = require("lodash");

Blender = require("../Blender");

type = require("../../type");

DeepCloneBlender = function(_super) {
    __extends(DeepCloneBlender, _super);
    function DeepCloneBlender() {
        var blenderBehaviors;
        blenderBehaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.blenderBehaviors = blenderBehaviors;
        (this.defaultBlenderBehaviors || (this.defaultBlenderBehaviors = [])).push(DeepCloneBlender.behavior);
        (this._optionsList || (this._optionsList = [])).unshift({});
        DeepCloneBlender.__super__.constructor.apply(this, arguments);
    }
    DeepCloneBlender.behavior = {
        order: [ "dst", "src" ],
        "*": {
            "[]": "deepCloneOverwrite",
            "{}": "deepCloneOverwrite",
            "->": function(prop, src) {
                return src[prop];
            },
            Undefined: function() {
                return Blender.SKIP;
            }
        },
        deepCloneOverwrite: function(prop, src, dst, blender) {
            var dstType, similarTypes, srcType;
            srcType = type(src[prop]);
            dstType = type(dst[prop]);
            if (dstType !== srcType) {
                similarTypes = [ "Function", "Object" ];
                if (!(__indexOf.call(similarTypes, dstType) >= 0 && __indexOf.call(similarTypes, srcType) >= 0)) {
                    dst[prop] = srcType === "Array" ? [] : {};
                }
            }
            return blender.deepOverwrite(prop, src, dst, blender);
        }
    };
    return DeepCloneBlender;
}(Blender);

module.exports = DeepCloneBlender;
// uRequire: end body of original nodejs module


return module.exports;
})
})();