// Generated by uRequire v0.3.0alpha18
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('Blender', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('./agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', './agreement/isAgree', 'util', './type', './certain', './mutate', './go', './deepExtend'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, blender, certain, deepExtend, go, knownTypes, l, lp, mutate, p, parentRE, prettify, type, _, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

l = console.log;

prettify = function(o) {
    return JSON.stringify(o, null, "");
};

prettify = function(util) {
    return function(o) {
        return util.inspect(o, false, null, true);
    };
}(require("util"));

p = prettify;

lp = _.compose(l, p);

type = require("./type");

certain = require("./certain");

mutate = require("./mutate");

go = require("./go");

deepExtend = require("./deepExtend");

knownTypes = [ "Array", "Arguments", "Function", "String", "Number", "Date", "RegExp", "Boolean", "Null", "Undefined", "Object" ];

parentRE = /\${\s*?_\s*?}/;

Blender = function() {
    var defaultBlend;
    function Blender() {
        this.deepOverwrite = __bind(this.deepOverwrite, this);
        this._constructor = __bind(this._constructor, this);
        this._constructor.apply(this, arguments);
    }
    defaultBlend = [ "dst", "src" ];
    Blender.prototype._constructor = function() {
        var bb, blenderBehaviors, i, _i, _len, _results, _this = this;
        blenderBehaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.defaultBlenderBehavior = {
            blend: defaultBlend,
            String: {
                String: this.overwriteOrReplace,
                Array: function(src, dst, prop) {
                    var i;
                    return "'" + dst[prop] + "' - the following Array landed on preceding String!\n" + function() {
                        var _i, _len, _ref, _results;
                        _ref = src[prop];
                        _results = [];
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            i = _ref[_i];
                            _results.push(i);
                        }
                        return _results;
                    }().join("|");
                }
            },
            Array: {
                Array: function() {
                    var array;
                    console.log(this);
                    array = this.deepOverwrite.apply(null, arguments);
                    return _.reject(array, function(v) {
                        return _.isNull(v);
                    });
                },
                Undefined: "-> []"
            },
            Object: {
                Object: this.deepOverwrite
            },
            "*": {
                "*": this.overwrite
            }
        };
        mutate(this.defaultBlenderBehavior, function(v, k, oa) {
            if (_.isUndefined(v["*"] && k !== "blend")) {
                v["*"] = _this.defaultBlenderBehavior["*"]["*"];
            }
            return v;
        });
        l("\n@defaultBlenderBehavior=\n", p(this.defaultBlenderBehavior));
        this.certainBlenderBehaviors = [];
        _results = [];
        for (i = _i = 0, _len = blenderBehaviors.length; _i < _len; i = ++_i) {
            bb = blenderBehaviors[i];
            this.certainBlenderBehaviors.push(certain(mutate(bb, certain)));
            if (_.isUndefined(bb.blend)) {
                bb.blend = this.defaultBlenderBehavior.blend;
            }
            _results.push(l("bb " + i + "=\n", p(bb)));
        }
        return _results;
    };
    Blender.prototype.blend = function() {
        var action, dst, dstType, prop, sources, src, srcType, val, _i, _len;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            src = sources[_i];
            for (prop in src) {
                if (!__hasProp.call(src, prop)) continue;
                srcType = type(src[prop]);
                dstType = type(dst[prop]);
                action = this.certainBlenderBehavior(dstType)(srcType);
                l.log("##########", dstType, "<--", srcType);
                val = action(src, dst, prop);
                if (val === null && _.isPlainObject(dst)) {
                    delete dst[prop];
                } else {
                    dst[prop] = val;
                }
            }
        }
        return dst;
    };
    Blender.prototype.overwrite = function(src, dst, prop) {
        return src[prop];
    };
    Blender.prototype.overwriteOrReplace = function(src, dst, prop) {
        if (parentRE.test(src[prop])) {
            if (_.isString(dst[prop])) {
                return src[prop].replace(parentRE, dst[prop]);
            } else {
                return dst[prop];
            }
        } else {
            return src[prop];
        }
    };
    Blender.prototype.deepOverwrite = function(src, dst, prop) {
        return this.blend(dst[prop], src[prop]);
    };
    Blender.prototype.arrayToArrayPush = function(src, dst, prop) {
        var s, _i, _len, _ref;
        _ref = src[prop];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            dst[prop].push(s);
        }
        return dst[prop];
    };
    return Blender;
}();

module.exports = Blender;

blender = new Blender({
    Number: {
        String: function() {
            return console.log({
                Number: {
                    String: 555
                }
            });
        }
    },
    "*": {
        "*": "Paparies"
    }
}, {
    Array: {
        "*": "ArrayAsSource"
    }
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();