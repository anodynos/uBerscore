// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('objects/getp', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('../agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', '../agreement/isAgree'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var defaultOptions, getp, _;

_ = require("lodash");

defaultOptions = {
    separator: "/",
    stopKey: "#",
    terminateKey: void 0,
    defaultKey: "*",
    isReturnLast: false
};

getp = function(o, path, options) {
    var lastO, p, returnWithTerminator, _i, _len;
    if (options == null) {
        options = defaultOptions;
    }
    if (options !== defaultOptions) {
        _.defaults(options, defaultOptions);
    }
    if (!_.isArray(path)) {
        if (_.isString(path)) {
            path = path.split(options.separator);
        } else {
            if (_.isNumber(path)) {
                path = [ path + "" ];
            } else {
                if (path === void 0) {
                    return o;
                } else {
                    throw "_B.getp Error: invalid path: " + path;
                }
            }
        }
    }
    for (_i = 0, _len = path.length; _i < _len; _i++) {
        p = path[_i];
        if (!(p + "")) {
            continue;
        }
        if (o !== void 0) {
            lastO = o;
        }
        if (!_.isObject(o)) {
            o = void 0;
            break;
        }
        if (options.terminateKey) {
            if (o[options.terminateKey]) {
                returnWithTerminator = {};
                returnWithTerminator[options.terminateKey] = o[options.terminateKey];
                o = returnWithTerminator;
                break;
            }
        }
        if (o[p] !== void 0) {
            o = o[p];
        } else {
            if (options.stopKey && o[options.stopKey] !== void 0) {
                o = o[options.stopKey];
                break;
            } else {
                o = options.defaultKey && o[options.defaultKey] ? o[options.defaultKey] : void 0;
            }
        }
    }
    if (o === void 0) {
        if (options.isReturnLast) {
            return lastO;
        } else {
            return o;
        }
    } else {
        return o;
    }
};

module.exports = getp;
// uRequire: end body of original nodejs module


return module.exports;
})
})();