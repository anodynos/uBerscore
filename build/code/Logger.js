// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('Logger', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('./agreement/isAgree'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', './agreement/isAgree', './agreement/inAgreements', './objects/setp', './objects/getp'], factory);
 }
})(this,function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Logger, getp, inAgreements, setp, _, __slice = [].slice;

_ = require("lodash");

inAgreements = require("./agreement/inAgreements");

setp = require("./objects/setp");

getp = require("./objects/getp");

Logger = function() {
    var key, val, _ref;
    function Logger(levelPath, debugLevel, newLine) {
        var path;
        this.levelPath = levelPath != null ? levelPath : "";
        this.debugLevel = debugLevel != null ? debugLevel : 0;
        this.newLine = newLine != null ? newLine : false;
        this.levelPaths = function() {
            var _i, _len, _ref, _results;
            _ref = this.levelPath.split("/");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                path = _ref[_i];
                if (path) {
                    _results.push(path);
                }
            }
            return _results;
        }.call(this);
        Logger.loggerCount = (Logger.loggerCount || 0) + 1;
    }
    Logger.prototype.prettify = typeof __isNode !== "undefined" && __isNode !== null && __isNode || typeof __isNode === "undefined" || __isNode === null ? function(inspect) {
        var nodeVerLE_092;
        nodeVerLE_092 = function() {
            var i, v, x, _i, _len, _ref;
            v = [];
            _ref = process.version.slice(1).split(".");
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                x = _ref[i];
                v[i] = x * 1;
            }
            if (v[0] > 0 || v[1] > 9) {
                return false;
            } else {
                if (v[1] === 9) {
                    if (v[2] <= 2) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }
        }();
        return function(o) {
            var pretty;
            pretty = nodeVerLE_092 ? "[0m" + inspect(o, false, null, true) : "[0m" + inspect(o, {
                showHidden: false,
                depth: null,
                colors: true
            });
            if (_.isArray(o)) {
                pretty.replace(/\n/g, "");
            }
            if (inAgreements(o, [ _.isObject, _.isRegExp ])) {
                return pretty;
            } else {
                return o;
            }
        };
    }(require("util").inspect) : function(o) {
        return o;
    };
    Logger.getALog = function(baseMsg, color, cons) {
        return function() {
            var arg, args, err, retString, title, _i, _len;
            args = function() {
                var _i, _len, _ref, _results;
                _ref = Array.prototype.slice.call(arguments);
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    arg = _ref[_i];
                    _results.push(this.prettify(arg));
                }
                return _results;
            }.apply(this, arguments);
            title = "" + (!this.levelPath ? "Logger" + Logger.loggerCount + " " : "[" + this.levelPath + "] ") + baseMsg;
            if (title) {
                title = title + ":";
            }
            args.unshift(title);
            if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
                args.unshift("" + color);
            }
            if (this.newLine) {
                args.unshift("\n");
            }
            if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
                args.push("[0m");
            }
            cons.apply(console, args);
            try {
                return args.join("");
            } catch (_error) {
                err = _error;
                retString = "";
                for (_i = 0, _len = args.length; _i < _len; _i++) {
                    arg = args[_i];
                    retString += Object.prototype.toString(arg);
                }
                return retString;
            }
        };
    };
    Logger.prototype.err = Logger.getALog("ERROR", "[31m", console.error);
    Logger.prototype.log = Logger.getALog("", "[0m", console.log);
    Logger.prototype.verbose = Logger.getALog("", "[35m", console.log);
    Logger.prototype.ok = Logger.getALog("", "[32m", console.log);
    Logger.prototype.warn = Logger.getALog("WARNING", "[33m", console.log);
    Logger.prototype.debug = function() {
        var log;
        log = Logger.getALog("DEBUG", "[36m", console.log);
        return function() {
            var level, msgs;
            level = arguments[0], msgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            if (!_.isNumber(level)) {
                msgs.unshift(level);
                level = this.lastDebugLevelCheck || 1;
                msgs.unshift(this.lastDebugLevelCheck ? "(?" + this.lastDebugLevelCheck + ")" : "(!1)");
            } else {
                msgs.unshift("(" + level + ")");
            }
            if (level <= this.getEffectiveDebugLevel()) {
                log.apply(this, msgs);
            }
            return this.lastDebugLevelCheck = void 0;
        };
    }();
    Logger.prototype.getEffectiveDebugLevel = function() {
        var fedDebLevel;
        fedDebLevel = this.getFederatedDebugLevel();
        if (!_.isUndefined(fedDebLevel)) {
            if (fedDebLevel <= 0) {
                return -Infinity;
            } else {
                return _.max([ fedDebLevel, this.debugLevel, 0 ]);
            }
        } else {
            return this.debugLevel || 0;
        }
    };
    Logger.prototype.getFederatedDebugLevel = function() {
        return Logger.getStaticDebugLevel(this.levelPaths);
    };
    Logger.getStaticDebugLevel = function(levelPaths) {
        var lastPath, levPaths, val;
        if (levelPaths == null) {
            levelPaths = [];
        }
        levPaths = _.clone(levelPaths);
        levPaths.unshift("debugLevels");
        val = getp(Logger, levPaths);
        lastPath = levPaths.pop();
        while (_.isUndefined(val != null ? val._value : void 0) && lastPath) {
            val = getp(Logger, levPaths);
            lastPath = levPaths.pop();
        }
        return val != null ? val._value : void 0;
    };
    Logger.setDebugLevel = function(level, levelPath) {
        return setp(Logger, "debugLevels/" + levelPath + "/_value", level, {
            create: true
        });
    };
    Logger.prototype.deb = function(debugLevel) {
        if (debugLevel <= this.getEffectiveDebugLevel()) {
            this.lastDebugLevelCheck = debugLevel;
            return true;
        } else {
            this.lastDebugLevelCheck = void 0;
            return false;
        }
    };
    Logger.logger = new Logger("DefaultLogger");
    _ref = Logger.prototype;
    for (key in _ref) {
        val = _ref[key];
        if (_.isFunction(val)) {
            Logger[key] = _.bind(val, Logger.logger);
        } else {
            Logger[key] = val;
        }
    }
    return Logger;
}();

module.exports = Logger;
// uRequire: end body of original nodejs module


return module.exports;
})
})();