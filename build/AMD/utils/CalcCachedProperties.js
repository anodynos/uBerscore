// Generated by uRequire v0.7.0-beta.25 target: 'AMD' template: 'AMD'
(function () {
  
var extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty, slice = [].slice;
define(['require', 'exports', 'module', './CoffeeUtils', 'lodash', '../Logger'], function (require, exports, module, CoffeeUtils, _) {
  

var CalcCachedProperties, l;
  l = new (require("../Logger"))("uberscore/utils/CalcCachedProperties");
  return CalcCachedProperties = function (superClass) {
    var cUndefined, cacheKey, prefix;
    extend(CalcCachedProperties, superClass);
    prefix = function (prop) {
      return "__$$" + prop + "__$$";
    };
    cacheKey = prefix("cache");
    cUndefined = { "cUndefined": true };
    CalcCachedProperties.prototype.getAllCalcProperties = function (instOrClass) {
      var aClass, cFunct, cProp, calcProps, i, len, ref, ref1;
      if (instOrClass == null) {
        instOrClass = this;
      }
      calcProps = {};
      ref = this.getClasses(instOrClass);
      for (i = 0, len = ref.length; i < len; i++) {
        aClass = ref[i];
        ref1 = aClass.calcProperties;
        for (cProp in ref1) {
          cFunct = ref1[cProp];
          calcProps[cProp] = cFunct;
        }
      }
      return calcProps;
    };
    CalcCachedProperties.getAllCalcProperties = CalcCachedProperties.prototype.getAllCalcProperties;
    Object.defineProperties(CalcCachedProperties.prototype, {
      allCalcProperties: {
        get: function () {
          if (!this.constructor.prototype.hasOwnProperty("_allCalcProperties")) {
            Object.defineProperty(this.constructor.prototype, "_allCalcProperties", {
              value: this.getAllCalcProperties(),
              enumerable: false
            });
          }
          return this.constructor.prototype._allCalcProperties;
        }
      },
      classes: {
        get: function () {
          if (!this.constructor.prototype.hasOwnProperty("_classes")) {
            Object.defineProperty(this.constructor.prototype, "_classes", {
              value: this.getClasses(),
              enumerable: false
            });
          }
          return this.constructor.prototype._classes;
        }
      }
    });
    function CalcCachedProperties() {
      this.defineCalcProperties();
    }
    CalcCachedProperties.prototype.defineCalcProperties = function (isOverwrite) {
      var cPropFn, cPropName, ref;
      Object.defineProperty(this, cacheKey, {
        value: {},
        enumerable: false,
        configurable: false,
        writeable: false
      });
      ref = this.allCalcProperties;
      for (cPropName in ref) {
        cPropFn = ref[cPropName];
        this[cacheKey][cPropName] = cUndefined;
        if (!this.constructor.prototype.hasOwnProperty(cPropName) || isOverwrite) {
          (function (_this) {
            return function (cPropName, cPropFn) {
              if (l.deb(99)) {
                l.deb("...defining calculated property " + _this.constructor.name + "." + cPropName);
              }
              return Object.defineProperty(_this.constructor.prototype, cPropName, {
                enumerable: true,
                configurable: true,
                get: function () {
                  if (l.deb(99)) {
                    l.deb("...requesting calculated property " + this.constructor.name + "." + cPropName);
                  }
                  if (this[cacheKey][cPropName] === cUndefined) {
                    if (l.deb(95)) {
                      l.deb("...refreshing calculated property " + this.constructor.name + "." + cPropName);
                    }
                    this[cacheKey][cPropName] = cPropFn.call(this);
                  }
                  return this[cacheKey][cPropName];
                },
                set: function (v) {
                  return this[cacheKey][cPropName] = v;
                }
              });
            };
          }(this)(cPropName, cPropFn));
        }
      }
      return null;
    };
    CalcCachedProperties.prototype.cleanProps = function () {
      var ca, cleanArgs, cleaned, i, j, len, len1, p, propKeys;
      cleanArgs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (_.isEmpty(cleanArgs)) {
        cleanArgs = _.keys(this.allCalcProperties);
      }
      cleaned = [];
      for (i = 0, len = cleanArgs.length; i < len; i++) {
        ca = cleanArgs[i];
        if (ca) {
          if (_.isFunction(ca)) {
            if (!propKeys) {
              propKeys = _.keys(this.allCalcProperties);
            }
            for (j = 0, len1 = propKeys.length; j < len1; j++) {
              p = propKeys[j];
              if (ca(p)) {
                if (this[cacheKey][p] !== cUndefined) {
                  if (l.deb(100)) {
                    l.deb("...delete (via fn) value of property " + this.constructor.name + "." + p);
                  }
                  this[cacheKey][p] = cUndefined;
                  cleaned.push(p);
                }
              }
            }
          } else {
            if (this[cacheKey][ca] !== cUndefined) {
              if (l.deb(100)) {
                l.deb("...delete value of property " + this.constructor.name + "." + ca);
              }
              this[cacheKey][ca] = cUndefined;
              cleaned.push(ca);
            }
          }
        }
      }
      return cleaned;
    };
    return CalcCachedProperties;
  }(CoffeeUtils);


})
}).call(this);