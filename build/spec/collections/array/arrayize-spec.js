// Generated by uRequire v0.7.0-beta.28 target: 'spec' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../../spec-data'), require('../../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../../spec-data', '../../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('collections/array/arrayize-spec.js');

var arrInt, arrInt2, arrStr, bundle, global, obj, project, ref;
ref = _.clone(data, true), project = ref.project, global = ref.global, bundle = ref.bundle, obj = ref.obj, arrInt = ref.arrInt, arrInt2 = ref.arrInt2, arrStr = ref.arrStr;
describe("arrayize :", function () {
  it("arrayize a String", function () {
    return expect(_B.arrayize("agelos")).to.deep.equal(["agelos"]);
  });
  it("arrayize a Number", function () {
    return expect(_B.arrayize(19)).to.deep.equal([19]);
  });
  it("arrayize an Object", function () {
    return expect(_B.arrayize({
      a: 1,
      b: 2
    })).to.deep.equal([{
        a: 1,
        b: 2
      }]);
  });
  it("arrayize an existing array", function () {
    var arr;
    arr = [
      1,
      "john"
    ];
    return expect(_B.arrayize(arr)).to.equal(arr);
  });
  return it("arrayize nothingness", function () {
    return expect(_B.arrayize(void 0)).to.deep.equal([]);
  });
});

return module.exports;

});
}).call(this);