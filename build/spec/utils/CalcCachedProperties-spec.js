// Generated by uRequire v0.7.0-beta4 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('utils/CalcCachedProperties-spec', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../specHelpers'), nr.require('../spec-data'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../specHelpers', '../spec-data'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, chai, _, _B, specHelpers, data) {
  

var equal = specHelpers["equal"],notEqual = specHelpers["notEqual"],ok = specHelpers["ok"],notOk = specHelpers["notOk"],tru = specHelpers["tru"],fals = specHelpers["fals"],deepEqual = specHelpers["deepEqual"],notDeepEqual = specHelpers["notDeepEqual"],exact = specHelpers["exact"],notExact = specHelpers["notExact"],iqual = specHelpers["iqual"],notIqual = specHelpers["notIqual"],ixact = specHelpers["ixact"],notIxact = specHelpers["notIxact"],like = specHelpers["like"],notLike = specHelpers["notLike"],likeBA = specHelpers["likeBA"],notLikeBA = specHelpers["notLikeBA"],equalSet = specHelpers["equalSet"],notEqualSet = specHelpers["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('utils/CalcCachedProperties-spec.js');

var __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };
describe("_B.CalcCachedProperties:", function () {
  var CalcCachedProperties2, DirtyNumbers, SelfishNumber;
  CalcCachedProperties2 = function (_super) {
    __extends(CalcCachedProperties2, _super);
    function CalcCachedProperties2() {
      return CalcCachedProperties2.__super__.constructor.apply(this, arguments);
    }
    return CalcCachedProperties2;
  }(_B.CalcCachedProperties);
  SelfishNumber = function (_super) {
    __extends(SelfishNumber, _super);
    function SelfishNumber() {
      SelfishNumber.__super__.constructor.apply(this, arguments);
      this.setNums.apply(this, arguments);
    }
    SelfishNumber.prototype.setNums = function (x, y) {
      this.x = x;
      this.y = y;
      return this.calcHits = {};
    };
    SelfishNumber.calcProperties = {
      doubled: function () {
        this.calcHits.doubled = (this.calcHits.doubled || 0) + 1;
        if (this.x < 1000) {
          return this.x + this.x;
        } else {
          return void 0;
        }
      },
      added: function () {
        this.calcHits.added = (this.calcHits.added || 0) + 1;
        return this.x + 1;
      }
    };
    return SelfishNumber;
  }(CalcCachedProperties2);
  DirtyNumbers = function (_super) {
    __extends(DirtyNumbers, _super);
    function DirtyNumbers() {
      return DirtyNumbers.__super__.constructor.apply(this, arguments);
    }
    DirtyNumbers.calcProperties = {
      added: function () {
        this.calcHits.added = (this.calcHits.added || 0) + 1;
        return this.x + this.y;
      },
      multiplied: function () {
        this.calcHits.multiplied = (this.calcHits.multiplied || 0) + 1;
        return this.x * this.y;
      }
    };
    return DirtyNumbers;
  }(SelfishNumber);
  describe("Get classes & calcProperties of inherited classes", function () {
    var dn, sn;
    dn = new DirtyNumbers();
    sn = new SelfishNumber();
    describe("called on target instance:", function () {
      it("#1", function () {
        return expect(dn.classes).to.deep.equal([
          _B.CoffeeUtils,
          _B.CalcCachedProperties,
          CalcCachedProperties2,
          SelfishNumber,
          DirtyNumbers
        ]);
      });
      return it("#2", function () {
        return expect(sn.classes).to.deep.equal([
          _B.CoffeeUtils,
          _B.CalcCachedProperties,
          CalcCachedProperties2,
          SelfishNumber
        ]);
      });
    });
    return describe("Get all calculated properties, overriding properties in parent classes:", function () {
      var allDnProperties, allSnProperties;
      allDnProperties = {
        doubled: SelfishNumber.calcProperties.doubled,
        added: DirtyNumbers.calcProperties.added,
        multiplied: DirtyNumbers.calcProperties.multiplied
      };
      allSnProperties = {
        doubled: SelfishNumber.calcProperties.doubled,
        added: SelfishNumber.calcProperties.added
      };
      describe("without params:", function () {
        describe("called on instance:", function () {
          it("#1", function () {
            expect(dn.getAllCalcProperties()).to.deep.equal(allDnProperties);
            return expect(dn.allCalcProperties).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            expect(sn.getAllCalcProperties()).to.deep.equal(allSnProperties);
            return expect(sn.allCalcProperties).to.deep.equal(allSnProperties);
          });
        });
        return describe("called statically:", function () {
          it("#1", function () {
            return expect(DirtyNumbers.getAllCalcProperties()).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            return expect(SelfishNumber.getAllCalcProperties()).to.deep.equal(allSnProperties);
          });
        });
      });
      describe("with instance as param:", function () {
        describe("called on (any) instance:", function () {
          it("#1", function () {
            return expect(sn.getAllCalcProperties(dn)).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            return expect(dn.getAllCalcProperties(sn)).to.deep.equal(allSnProperties);
          });
        });
        return describe("called statically (on any class):", function () {
          it("#1", function () {
            expect(DirtyNumbers.getAllCalcProperties(dn)).to.deep.equal(allDnProperties);
            expect(SelfishNumber.getAllCalcProperties(dn)).to.deep.equal(allDnProperties);
            return expect(_B.CalcCachedProperties.getAllCalcProperties(dn)).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            expect(DirtyNumbers.getAllCalcProperties(sn)).to.deep.equal(allSnProperties);
            expect(SelfishNumber.getAllCalcProperties(sn)).to.deep.equal(allSnProperties);
            return expect(_B.CalcCachedProperties.getAllCalcProperties(sn)).to.deep.equal(allSnProperties);
          });
        });
      });
      return describe("with class as param:", function () {
        describe("called on (any) instance:", function () {
          it("#1", function () {
            return expect(sn.getAllCalcProperties(DirtyNumbers)).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            return expect(dn.getAllCalcProperties(SelfishNumber)).to.deep.equal(allSnProperties);
          });
        });
        return describe("called statically (on any class):", function () {
          it("#1", function () {
            expect(_B.CalcCachedProperties.getAllCalcProperties(DirtyNumbers)).to.deep.equal(allDnProperties);
            return expect(SelfishNumber.getAllCalcProperties(DirtyNumbers)).to.deep.equal(allDnProperties);
          });
          return it("#2", function () {
            expect(_B.CalcCachedProperties.getAllCalcProperties(SelfishNumber)).to.deep.equal(allSnProperties);
            return expect(DirtyNumbers.getAllCalcProperties(SelfishNumber)).to.deep.equal(allSnProperties);
          });
        });
      });
    });
  });
  describe("calculating & caching properties:", function () {
    var dn, dn2;
    dn = new DirtyNumbers(3, 4);
    dn2 = new DirtyNumbers(5, 6);
    describe("calculates calcProperties once:", function () {
      it("#1", function () {
        expect(dn.doubled).to.equal(6);
        expect(dn.doubled).to.equal(6);
        expect(dn.calcHits.doubled).to.equal(1);
        expect(dn.added).to.equal(7);
        expect(dn.added).to.equal(7);
        expect(dn.calcHits.added).to.equal(1);
        expect(dn.multiplied).to.equal(12);
        expect(dn.multiplied).to.equal(12);
        return expect(dn.calcHits.multiplied).to.equal(1);
      });
      return it("#2", function () {
        expect(dn2.doubled).to.equal(10);
        expect(dn2.doubled).to.equal(10);
        expect(dn2.calcHits.doubled).to.equal(1);
        expect(dn2.added).to.equal(11);
        expect(dn2.added).to.equal(11);
        expect(dn2.calcHits.added).to.equal(1);
        expect(dn2.multiplied).to.equal(30);
        expect(dn2.multiplied).to.equal(30);
        return expect(dn2.calcHits.multiplied).to.equal(1);
      });
    });
    describe("remembers cached result, without calculating", function () {
      it("#1", function () {
        dn.x = 5;
        dn.y = 4;
        expect(dn.added).to.equal(7);
        expect(dn.added).to.equal(7);
        expect(dn.calcHits.added).to.equal(1);
        expect(dn.multiplied).to.equal(12);
        expect(dn.multiplied).to.equal(12);
        return expect(dn.calcHits.multiplied).to.equal(1);
      });
      return it("#2", function () {
        dn2.x = 2;
        dn2.y = 3;
        expect(dn2.added).to.equal(11);
        expect(dn2.added).to.equal(11);
        expect(dn2.calcHits.added).to.equal(1);
        expect(dn2.multiplied).to.equal(30);
        expect(dn2.multiplied).to.equal(30);
        return expect(dn2.calcHits.multiplied).to.equal(1);
      });
    });
    return describe("clearing cached property value & recalculate 'em:", function () {
      it("clears cached properties by name & recalculates them on demand", function () {
        expect(dn.cleanProps("added")).to.deep.equal(["added"]);
        dn.x = 6;
        dn.y = 3;
        expect(dn.calcHits.added).to.equal(1);
        expect(dn.added).to.equal(9);
        expect(dn.calcHits.added).to.equal(2);
        expect(dn.added).to.equal(9);
        expect(dn.added).to.equal(9);
        expect(dn.calcHits.added).to.equal(2);
        expect(dn.calcHits.multiplied).to.equal(1);
        expect(dn.multiplied).to.equal(12);
        expect(dn.multiplied).to.equal(12);
        return expect(dn.calcHits.multiplied).to.equal(1);
      });
      it("clears cached property values by name or function, ignoring undefined", function () {
        dn.x = 6;
        dn.y = 4;
        expect(dn.cleanProps(void 0, "doubled", void 0, function (nme) {
          return nme === "multiplied";
        }, void 0)).to.deep.equal([
          "doubled",
          "multiplied"
        ]);
        expect(dn.calcHits.doubled).to.equal(1);
        expect(dn.doubled).to.equal(12);
        expect(dn.doubled).to.equal(12);
        expect(dn.calcHits.doubled).to.equal(2);
        expect(dn.calcHits.added).to.equal(2);
        expect(dn.added).to.equal(9);
        expect(dn.added).to.equal(9);
        expect(dn.calcHits.added).to.equal(2);
        expect(dn.calcHits.multiplied).to.equal(1);
        expect(dn.multiplied).to.equal(24);
        expect(dn.multiplied).to.equal(24);
        return expect(dn.calcHits.multiplied).to.equal(2);
      });
      return describe("clears all cached property values, recalculates them all on demand", function () {
        it("clears all cached property values", function () {
          return expect(dn.cleanProps()).to.deep.equal([
            "doubled",
            "added",
            "multiplied"
          ]);
        });
        it("clearing forces recaclulation of inherited property value", function () {
          dn.setNums(4, 7);
          expect(dn.calcHits.doubled).to.equal(void 0);
          expect(dn.doubled).to.equal(8);
          expect(dn.doubled).to.equal(8);
          return expect(dn.calcHits.doubled).to.equal(1);
        });
        return it("clearing forces recaclulation of property value", function () {
          dn.setNums(4, 7);
          expect(dn.calcHits.added).to.equal(void 0);
          expect(dn.added).to.equal(11);
          expect(dn.added).to.equal(11);
          expect(dn.calcHits.added).to.equal(1);
          expect(dn.calcHits.multiplied).to.equal(void 0);
          expect(dn.multiplied).to.equal(28);
          expect(dn.multiplied).to.equal(28);
          return expect(dn.calcHits.multiplied).to.equal(1);
        });
      });
    });
  });
  return describe("undefined is a valid cached result", function () {
    var dn;
    dn = new DirtyNumbers(1001);
    return it("undefined is a valid cached result", function () {
      expect(dn.calcHits.doubled).to.equal(void 0);
      expect(dn.doubled).to.equal(void 0);
      expect(dn.calcHits.doubled).to.equal(1);
      expect(dn.doubled).to.equal(void 0);
      expect(dn.doubled).to.equal(void 0);
      expect(dn.calcHits.doubled).to.equal(1);
      expect(dn.cleanProps("doubled")).to.deep.equal(["doubled"]);
      dn.setNums(5);
      expect(dn.calcHits.doubled).to.equal(void 0);
      expect(dn.doubled).to.equal(10);
      expect(dn.calcHits.doubled).to.equal(1);
      expect(dn.doubled).to.equal(10);
      expect(dn.doubled).to.equal(10);
      return expect(dn.calcHits.doubled).to.equal(1);
    });
  });
});

return module.exports;

})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))