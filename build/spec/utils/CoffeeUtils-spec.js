// Generated by uRequire v0.6.20 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('utils/CoffeeUtils-spec', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../specHelpers'), nr.require('../spec-data'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../specHelpers', '../spec-data'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, chai, _, _B, specHelpers, data) {
  

var expect = chai.expect; // injected @ `spec: bundle: commonCode`.

var deepEqual, equal, equalSet, exact, fals, iqual, ixact, like, likeBA, notDeepEqual, notEqual, notEqualSet, notExact, notIqual, notIxact, notLike, notLikeBA, notOk, ok, tru;
equal = specHelpers.equal, notEqual = specHelpers.notEqual, ok = specHelpers.ok, notOk = specHelpers.notOk, tru = specHelpers.tru, fals = specHelpers.fals, deepEqual = specHelpers.deepEqual, notDeepEqual = specHelpers.notDeepEqual, exact = specHelpers.exact, notExact = specHelpers.notExact, iqual = specHelpers.iqual, notIqual = specHelpers.notIqual, ixact = specHelpers.ixact, notIxact = specHelpers.notIxact, like = specHelpers.like, notLike = specHelpers.notLike, likeBA = specHelpers.likeBA, notLikeBA = specHelpers.notLikeBA, equalSet = specHelpers.equalSet, notEqualSet = specHelpers.notEqualSet;

var l = new _B.Logger('utils/CoffeeUtils-spec.js');

var __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };
describe("Get classes of inherited classes", function () {
  var OtherClass, SubClass, SubSubClass, sc, ssc;
  OtherClass = function (_super) {
    __extends(OtherClass, _super);
    function OtherClass() {
      return OtherClass.__super__.constructor.apply(this, arguments);
    }
    return OtherClass;
  }(_B.CoffeeUtils);
  SubClass = function (_super) {
    __extends(SubClass, _super);
    function SubClass() {
      return SubClass.__super__.constructor.apply(this, arguments);
    }
    return SubClass;
  }(OtherClass);
  SubSubClass = function (_super) {
    __extends(SubSubClass, _super);
    function SubSubClass() {
      return SubSubClass.__super__.constructor.apply(this, arguments);
    }
    return SubSubClass;
  }(SubClass);
  sc = new SubClass();
  ssc = new SubSubClass();
  return describe("Get extending classes in descenting order, including the own as last:", function () {
    var scClasses, sscClasses;
    scClasses = [
      _B.CoffeeUtils,
      OtherClass,
      SubClass
    ];
    sscClasses = [
      _B.CoffeeUtils,
      OtherClass,
      SubClass,
      SubSubClass
    ];
    describe("without params:", function () {
      describe("called on target instance:", function () {
        it("#1", function () {
          return expect(ssc.getClasses()).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          return expect(sc.getClasses()).to.deep.equal(scClasses);
        });
      });
      return describe("called staticically (on target class):", function () {
        it("#1", function () {
          return expect(SubSubClass.getClasses()).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          return expect(SubClass.getClasses()).to.deep.equal(scClasses);
        });
      });
    });
    describe("with instance as param:", function () {
      describe("called on (any) instance:", function () {
        it("#1", function () {
          return expect(sc.getClasses(ssc)).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          return expect(ssc.getClasses(sc)).to.deep.equal(scClasses);
        });
      });
      return describe("called statically (on any class):", function () {
        it("#1", function () {
          expect(_B.CoffeeUtils.getClasses(ssc)).to.deep.equal(sscClasses);
          expect(SubClass.getClasses(ssc)).to.deep.equal(sscClasses);
          return expect(SubSubClass.getClasses(ssc)).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          expect(_B.CoffeeUtils.getClasses(sc)).to.deep.equal(scClasses);
          expect(SubClass.getClasses(sc)).to.deep.equal(scClasses);
          return expect(SubSubClass.getClasses(sc)).to.deep.equal(scClasses);
        });
      });
    });
    return describe("with class as param:", function () {
      describe("called on (any) instance:", function () {
        it("#1", function () {
          return expect(sc.getClasses(SubSubClass)).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          return expect(ssc.getClasses(SubClass)).to.deep.equal(scClasses);
        });
      });
      return describe("called staticically (on any class):", function () {
        it("#1", function () {
          return expect(SubClass.getClasses(SubSubClass)).to.deep.equal(sscClasses);
        });
        return it("#2", function () {
          return expect(SubSubClass.getClasses(SubClass)).to.deep.equal(scClasses);
        });
      });
    });
  });
});

return module.exports;

})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))