// Generated by uRequire v0.7.0-beta.25 target: 'specWatch' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

var extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  }, hasProp = {}.hasOwnProperty;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('blending/Blender-spec.js');

return describe("Blender & DeepCloneBlender:", function () {
    describe("Internals: blender.adjustBlenderBehavior:", function () {
      return describe("corectly transforms nested types of srcDstSpecs to short format", function () {
        it("works with simple 'src' and 'dst'", function () {
          var blender, expectedAdjustedBb, longTypeNamesBb;
          longTypeNamesBb = {
            order: [
              "src",
              "dst"
            ],
            Array: { String: "someAction" },
            Object: {
              "Array": "doSomeAction",
              "Null": function () {
              }
            },
            doSomeAction: function () {
            }
          };
          expectedAdjustedBb = {
            order: [
              "src",
              "dst"
            ],
            doSomeAction: longTypeNamesBb.doSomeAction,
            "[]": { "''": "someAction" },
            "{}": {
              "[]": "doSomeAction",
              "null": longTypeNamesBb["Object"].Null
            }
          };
          blender = new _B.Blender(longTypeNamesBb);
          return expect(_.isEqual(blender.blenderBehaviors[0], expectedAdjustedBb)).to.be["true"];
        });
        return it("works with bbOrder specs ['src', 'path', 'dst']", function () {
          var expectedAdjustededBb, longTypePathBb;
          longTypePathBb = {
            order: [
              "src",
              "path",
              "dst"
            ],
            Function: function () {
            },
            String: {
              "bundle:dependencies:depsVars:*": {
                basics: {
                  "|": {
                    Object: function () {
                      return "Iam a someObjectAction";
                    },
                    Array: "someArrayAction, found on a preceding blenderBehavior or blender",
                    String: function (prop, src, dst, blender) {
                      return B.Blender.SKIP;
                    }
                  }
                }
              },
              "bundle:dependencies:_knownDepsVars": {
                String: {
                  Array: {
                    Function: {
                      "|": {
                        Function: function () {
                          return _B.Blender.SKIP;
                        },
                        Array: "someArrayAction"
                      }
                    }
                  }
                }
              }
            },
            someAction: function () {
            }
          };
          expectedAdjustededBb = {
            order: [
              "src",
              "path",
              "dst"
            ],
            "->": longTypePathBb.Function,
            "''": {
              bundle: {
                dependencies: {
                  depsVars: {
                    "*": {
                      basics: {
                        "|": {
                          "{}": longTypePathBb["String"]["bundle:dependencies:depsVars:*"].basics["|"]["Object"],
                          "[]": longTypePathBb["String"]["bundle:dependencies:depsVars:*"].basics["|"]["Array"],
                          "''": longTypePathBb["String"]["bundle:dependencies:depsVars:*"].basics["|"]["String"]
                        }
                      }
                    }
                  },
                  _knownDepsVars: {
                    String: {
                      Array: {
                        Function: {
                          "|": {
                            "->": longTypePathBb["String"]["bundle:dependencies:_knownDepsVars"].String.Array.Function["|"]["Function"],
                            "[]": "someArrayAction"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            someAction: longTypePathBb.someAction
          };
          return expect(new _B.DeepCloneBlender(longTypePathBb).blenderBehaviors[0]).to.deep.equal(expectedAdjustededBb);
        });
      });
    });
    describe("Handles primitives:", function () {
      var blender;
      blender = new _B.Blender();
      it("overwrites undefined / null:", function () {
        expect(blender.blend(void 0, 6, 18)).to.equal(18);
        expect(blender.blend(void 0, "a string")).to.equal("a string");
        expect(blender.blend(null, 16.7)).to.equal(16.7);
        expect(blender.blend(null, "a string")).to.equal("a string");
        return expect(blender.blend(void 0, 18, { prop: "someValue" })).to.deep.equal({ prop: "someValue" });
      });
      return it("overwrites primitives", function () {
        expect(blender.blend(6, 18)).to.equal(18);
        expect(blender.blend("a string", 18, "another string")).to.equal("another string");
        return expect(blender.blend("a string", 18, { prop: "someValue" })).to.deep.equal({ prop: "someValue" });
      });
    });
    describe("Options passing:", function () {
      it("deepCloneBlender.anOption is someOptions.anOption", function () {
        var deepCloneBlender, someOptions;
        someOptions = {
          anOption: function () {
            return "I am a function";
          }
        };
        deepCloneBlender = new _B.DeepCloneBlender([], someOptions);
        return expect(deepCloneBlender.anOption).to.equal(someOptions.anOption);
      });
      it("real options: ", function () {
        var deepCloneBlender, myCopyProto, myInherited;
        deepCloneBlender = new _B.DeepCloneBlender();
        expect(deepCloneBlender.inherited).to.be["false"];
        expect(deepCloneBlender.copyProto).to.be["false"];
        myCopyProto = function () {
        };
        myInherited = function () {
        };
        deepCloneBlender = new _B.DeepCloneBlender([], {
          inherited: myInherited,
          copyProto: myCopyProto
        });
        expect(deepCloneBlender.inherited).to.equal(myInherited);
        return expect(deepCloneBlender.copyProto).to.equal(myCopyProto);
      });
      return describe("Options go up the inheritance:", function () {
        var SomeBlender, SomeOtherBlender;
        SomeBlender = function (superClass) {
          extend(SomeBlender, superClass);
          function SomeBlender() {
            return SomeBlender.__super__.constructor.apply(this, arguments);
          }
          SomeBlender.prototype.someOption = "someOptionValue";
          return SomeBlender;
        }(_B.Blender);
        SomeOtherBlender = function (superClass) {
          extend(SomeOtherBlender, superClass);
          function SomeOtherBlender() {
            return SomeOtherBlender.__super__.constructor.apply(this, arguments);
          }
          SomeOtherBlender.prototype.someOtherOption = "someOtherOptionValue";
          SomeOtherBlender.prototype.someOption = "someOptionValue of SomeOtherBlender";
          return SomeOtherBlender;
        }(_B.Blender);
        it("respecting subclassed options #1", function () {
          var someBlender;
          someBlender = new SomeBlender();
          expect(someBlender.someOption).to.equal("someOptionValue");
          someBlender = new SomeBlender([], { someOption: "someRedefinedOptionValue" });
          return expect(someBlender.someOption).to.equal("someRedefinedOptionValue");
        });
        return it("respecting subclassed options #2", function () {
          var someOtherBlender;
          someOtherBlender = new SomeOtherBlender();
          expect(someOtherBlender.someOption).to.equal("someOptionValue of SomeOtherBlender");
          someOtherBlender = new SomeOtherBlender([], { someOption: "someRedefinedOptionValue" });
          expect(someOtherBlender.someOption).to.equal("someRedefinedOptionValue");
          return expect(someOtherBlender.someOtherOption).to.equal === "someOtherOptionValue";
        });
      });
    });
    return describe("Blender behaviors:", function () {
      describe("Simple examples:", function () {
        var o1, o2;
        o1 = {
          p1: 5,
          p2: {
            p21: "A String",
            p22: [
              5,
              6,
              "String in array"
            ]
          },
          p3: "Some string"
        };
        o2 = {
          p1: 10,
          p2: {
            p21: "Another String",
            p22: [
              20,
              40
            ]
          }
        };
        it("Numbers dont just overwrite each other: the source is doubled and then added up to destination", function () {
          var deepCloneBlenderAddingNumbers;
          deepCloneBlenderAddingNumbers = new _B.DeepCloneBlender({
            "Number": {
              "Number": function (prop, src, dst) {
                return dst[prop] + src[prop] * 2;
              }
            }
          });
          return expect(deepCloneBlenderAddingNumbers.blend({}, o1, o2)).to.deep.equal({
            p1: 25,
            p2: {
              p21: "Another String",
              p22: [
                45,
                86,
                "String in array"
              ]
            },
            p3: "Some string"
          });
        });
        it("src Array items dont just overwrite the destination Array ones: they are doubled (if numbers) & then pushed to dst.", function () {
          var deepCloneBlenderAddingNumbers;
          deepCloneBlenderAddingNumbers = new _B.DeepCloneBlender({
            "Array": {
              "Array": function (prop, src, dst, bldr) {
                var i, item, len, ref;
                ref = src[prop];
                for (i = 0, len = ref.length; i < len; i++) {
                  item = ref[i];
                  item = bldr.blend({}, { hack: item }).hack;
                  dst[prop].push(_.isNumber(item) ? item * 2 : item);
                }
                return _B.Blender.SKIP;
              }
            }
          });
          return expect(deepCloneBlenderAddingNumbers.blend({}, o1, o2)).to.deep.equal({
            p1: 10,
            p2: {
              p21: "Another String",
              p22: [
                5,
                6,
                "String in array",
                40,
                80
              ]
            },
            p3: "Some string"
          });
        });
        return it("filters objects - Strings are banned:", function () {
          var deepCloneBlenderOmmitingStrings, result;
          deepCloneBlenderOmmitingStrings = new _B.DeepCloneBlender({
            order: ["src"],
            "String": function (prop, src, dst, bldr) {
              return _B.Blender.SKIP;
            }
          });
          return result = expect(deepCloneBlenderOmmitingStrings.blend({}, o1, o2)).to.deep.equal({
            p1: 10,
            p2: {
              p22: [
                20,
                40
              ]
            }
          });
        });
      });
      return describe("Advanced examples:", function () {
        var o1, o2;
        o1 = {
          p1: 5,
          p2: {
            p21: function (num) {
              return num * 4;
            },
            p22: [
              5,
              "String"
            ]
          },
          p3: "Some string"
        };
        o2 = {
          p1: 10,
          p2: {
            p21: 128,
            p22: [
              20,
              40
            ]
          }
        };
        return describe("Chained BlenderBehaviors & Subclassed Blenders (are the same stuff): ", function () {
          var FunctionOverWriterBlender, UselessBlender, WeirdBlender, addingNumbersAndConcatEmToStringBlender, bi, blender, funcOverwrite, i, len, ref, results, weirdBB, weirdBlender;
          addingNumbersAndConcatEmToStringBlender = new _B.DeepCloneBlender(funcOverwrite = { "Function": "overwrite" }, weirdBB = {
            "order": [
              "dst",
              "src"
            ],
            "Function": {
              "Number": function (prop, src, dst) {
                return dst[prop](src[prop]);
              }
            },
            "Number": {
              "Number": function (prop, src, dst) {
                return dst[prop] + src[prop] * 2;
              },
              "String": function (prop, src, dst) {
                return dst[prop] + "--got a String-->:" + src[prop];
              }
            },
            "String": {
              "Number": function (prop, src, dst) {
                return dst[prop] + "--got a Numba * 3-->:" + src[prop] * 3;
              }
            }
          });
          FunctionOverWriterBlender = function (superClass) {
            extend(FunctionOverWriterBlender, superClass);
            function FunctionOverWriterBlender() {
              return FunctionOverWriterBlender.__super__.constructor.apply(this, arguments);
            }
            FunctionOverWriterBlender.behavior = funcOverwrite;
            return FunctionOverWriterBlender;
          }(_B.DeepCloneBlender);
          UselessBlender = function (superClass) {
            extend(UselessBlender, superClass);
            function UselessBlender() {
              return UselessBlender.__super__.constructor.apply(this, arguments);
            }
            return UselessBlender;
          }(FunctionOverWriterBlender);
          WeirdBlender = function (superClass) {
            extend(WeirdBlender, superClass);
            function WeirdBlender() {
              return WeirdBlender.__super__.constructor.apply(this, arguments);
            }
            WeirdBlender.behavior = weirdBB;
            return WeirdBlender;
          }(UselessBlender);
          weirdBlender = new WeirdBlender();
          ref = [
            addingNumbersAndConcatEmToStringBlender,
            weirdBlender
          ];
          results = [];
          for (bi = i = 0, len = ref.length; i < len; bi = ++i) {
            blender = ref[bi];
            it("works {}<--o1<--o2 with blender #" + bi, function () {
              return expect(blender.blend({}, o1, o2)).to.deep.equal({
                p1: 25,
                p2: {
                  p21: 128 * 4,
                  p22: [
                    45,
                    "String--got a Numba * 3-->:120"
                  ]
                },
                p3: "Some string"
              });
            });
            results.push(it("works {}<--o2<--o1 with blender #" + bi, function () {
              var result;
              return result = expect(blender.blend({}, o2, o1)).to.deep.equal({
                p1: 20,
                p2: {
                  p21: o1.p2.p21,
                  p22: [
                    30,
                    "40--got a String-->:String"
                  ]
                },
                p3: "Some string"
              });
            }));
          }
          return results;
        });
      });
    });
  });


});
}).call(this);