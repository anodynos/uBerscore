// Generated by uRequire v0.7.0-beta.28 target: 'spec' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../../spec-data'), require('../../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../../spec-data', '../../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('blending/shared/lodashMerge-specs.js');

var arrInt, arrInt2, arrStr, bundle, global, obj, project, ref;
ref = _.clone(data, true), project = ref.project, global = ref.global, bundle = ref.bundle, obj = ref.obj, arrInt = ref.arrInt, arrInt2 = ref.arrInt2, arrStr = ref.arrStr;
module.exports = function (deepExtendMergeBlend) {
  return describe("lodash.merge specs", function () {
    it("should merge `source` into the destination object", function () {
      var ages, expected, heights, names;
      names = {
        stooges: [
          { name: "moe" },
          { name: "larry" }
        ]
      };
      ages = {
        stooges: [
          { age: 40 },
          { age: 50 }
        ]
      };
      heights = {
        stooges: [
          { height: "5'4\"" },
          { height: "5'5\"" }
        ]
      };
      expected = {
        stooges: [
          {
            name: "moe",
            age: 40,
            height: "5'4\""
          },
          {
            name: "larry",
            age: 50,
            height: "5'5\""
          }
        ]
      };
      return expect(deepExtendMergeBlend(names, ages, heights)).to.deep.equal(expected);
    });
    it("should merge sources containing circular references", function () {
      var actual, object, source;
      object = {
        foo: { a: 1 },
        bar: { a: 2 }
      };
      source = {
        foo: { b: { foo: { c: {} } } },
        bar: {}
      };
      source.foo.b.foo.c = source;
      source.bar.b = source.foo.b;
      actual = deepExtendMergeBlend(object, source);
      return expect(actual.bar.b === actual.foo.b && actual.foo.b.foo.c === actual.foo.b.foo.c.foo.b.foo.c).to.be["true"];
    });
    return it("should merge problem JScript properties (test in IE < 9)", function () {
      var blended, object, source;
      object = {
        constructor: 1,
        hasOwnProperty: 2,
        isPrototypeOf: 3
      };
      source = {
        propertyIsEnumerable: 4,
        toLocaleString: 5,
        toString: 6,
        valueOf: 7
      };
      blended = deepExtendMergeBlend(object, source);
      return expect(blended).to.deep.equal({
        constructor: 1,
        hasOwnProperty: 2,
        isPrototypeOf: 3,
        propertyIsEnumerable: 4,
        toLocaleString: 5,
        toString: 6,
        valueOf: 7
      });
    });
  });
};

return module.exports;

});
}).call(this);