// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/shared/deepExtendExamples-specs', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('agreement/isAgree'), nr.require('chai'), nr.require('uberscore'), nr.require('../../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', 'agreement/isAgree', 'chai', 'uberscore', '../../spec-data'], factory);
 }
})(this,function (require, exports, module, _, isAgree, chai, _B, data) {
  // uRequire: start body of original nodejs module
var arrInt, arrInt2, arrStr, assert, bundle, expect, global, obj, project, _ref;

assert = chai.assert;

expect = chai.expect;

_ref = _.clone(data, true), project = _ref.project, global = _ref.global, bundle = _ref.bundle, obj = _ref.obj, arrInt = _ref.arrInt, arrInt2 = _ref.arrInt2, arrStr = _ref.arrStr;

module.exports = function(deepExtendMergeBlend) {
    describe("deepExtend source code examples : ", function() {
        it("replaceRE allows you to concatenate strings.", function() {
            return expect(deepExtendMergeBlend({
                url: "www.example.com"
            }, {
                url: "http://${_}/path/to/file.html"
            })).to.deep.equal({
                url: "http://www.example.com/path/to/file.html"
            });
        });
        it("replaceRE also acts as a placeholder, which can be useful when you need to change one value in an array,\nwhile leaving the others untouched.", function() {
            return expect(deepExtendMergeBlend([ 100, {
                id: 1234
            }, true, "foo", [ 250, 500 ] ], [ "${_}", "${_}", false, "${_}", "${_}" ])).to.deep.equal([ 100, {
                id: 1234
            }, false, "foo", [ 250, 500 ] ]);
        });
        it("replaceRE also acts as a placeholder, #2 ", function() {
            return expect(deepExtendMergeBlend([ 100, {
                id: 1234
            }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false, "${_}", [] ])).to.deep.equal([ 100, {
                id: 1234
            }, false, "foo", [ 250, 500 ] ]);
        });
        it("replaceRE also acts as a placeholder, #3", function() {
            return expect(deepExtendMergeBlend([ 100, {
                id: 1234
            }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false ])).to.deep.equal([ 100, {
                id: 1234
            }, false, "foo", [ 250, 500 ] ]);
        });
        it("Array order is important.", function() {
            return expect(deepExtendMergeBlend([ 1, 2, 3, 4 ], [ 1, 4, 3, 2 ])).to.deep.equal([ 1, 4, 3, 2 ]);
        });
        return it("Remove Array element in destination object, by setting same index to null in a source object.", function() {
            return expect(deepExtendMergeBlend({
                arr: [ 1, 2, 3, 4 ]
            }, {
                arr: [ "${_}", null, void 0 ]
            })).to.deep.equal({
                arr: [ 1, 4 ]
            });
        });
    });
    return describe("more deepExtend examples: ", function() {
        return it("Remove Object key in destination object, by setting same key to undefined in a source object, similar to null in Array!", function() {
            return expect(deepExtendMergeBlend({
                foo: "foo",
                bar: {
                    name: "bar",
                    price: 20
                }
            }, {
                foo: void 0,
                bar: {
                    price: null
                }
            })).to.deep.equal({
                bar: {
                    name: "bar"
                }
            });
        });
    });
};
// uRequire: end body of original nodejs module


return module.exports;
})
})();