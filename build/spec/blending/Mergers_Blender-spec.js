// Generated by uRequire v0.3.0alpha22
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/Mergers_Blender-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../spec-data'], factory);
 }
})(this,function (require, exports, module, chai, _, _B, data) {
  // uRequire: start body of original nodejs module
var Class3, assert, c3, expect, expectedPropertyValues, objectWithProtoInheritedProps;

assert = chai.assert;

expect = chai.expect;

objectWithProtoInheritedProps = data.objectWithProtoInheritedProps, Class3 = data.Class3, c3 = data.c3, expectedPropertyValues = data.expectedPropertyValues;

describe("Default 'Blender.blend'", function() {
    describe("Default settings: with inherited:false, copyProto:false", function() {
        var defaultBlender;
        defaultBlender = new _B.Blender;
        describe("clones POJSO Object (no inheritance)", function() {
            return describe("(shallowClone = defaultBlender.blend {}, expectedPropertyValues)", function() {
                var shallowClone;
                shallowClone = defaultBlender.blend({}, expectedPropertyValues);
                return describe("is a shallow clone and compared to source: ", function() {
                    it("is not RefDisjoint - (there is at least one common reference))", function() {
                        return expect(_B.isRefDisjoint(shallowClone, expectedPropertyValues, {
                            deep: true,
                            inherited: true
                        }) === false);
                    });
                    it("has common references of all nested objects", function() {
                        var cRefs, sRefs;
                        sRefs = _B.getRefs(expectedPropertyValues, {
                            deep: true,
                            inherited: true
                        });
                        cRefs = _B.getRefs(shallowClone, {
                            deep: true,
                            inherited: true
                        });
                        return expect(_B.isEqualArraySet(sRefs, cRefs));
                    });
                    it("has a nested object copied by reference", function() {
                        expect(shallowClone.aProp1 === expectedPropertyValues.aProp1);
                        return expect(shallowClone.aProp1 !== void 0);
                    });
                    it("_.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_.isEqual(shallowClone, expectedPropertyValues));
                    });
                    it("_B.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_B.isEqual(shallowClone, expectedPropertyValues));
                    });
                    return it("_B.isExact true (strict references equality)", function() {
                        return expect(_B.isExact(shallowClone, expectedPropertyValues));
                    });
                });
            });
        });
        return describe("clones objectWithProtoInheritedProps (with inheritance)", function() {
            return describe("(shallowClone = defaultBlender.blend {}, objectWithProtoInheritedProps)", function() {
                var shallowIncompleteClone;
                shallowIncompleteClone = defaultBlender.blend({}, objectWithProtoInheritedProps);
                return describe("is an incomplete shallow clone, not copied inherited props: ", function() {
                    it("has NOT common references of all nested objects", function() {
                        var cRefs, sRefs;
                        sRefs = _B.getRefs(objectWithProtoInheritedProps, {
                            deep: true,
                            inherited: true
                        });
                        cRefs = _B.getRefs(shallowIncompleteClone, {
                            deep: true,
                            inherited: true
                        });
                        return expect(_B.isDisjoint(sRefs, cRefs));
                    });
                    it("has NOT copied inherited nested object", function() {
                        return expect(shallowIncompleteClone.aProp1 === void 0);
                    });
                    it("_.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_.isEqual(shallowIncompleteClone, objectWithProtoInheritedProps));
                    });
                    it("_B.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_B.isEqual(shallowIncompleteClone, objectWithProtoInheritedProps));
                    });
                    it("_B.isExact true (strict references equality, no inherited props)", function() {
                        return expect(_B.isExact(shallowIncompleteClone, objectWithProtoInheritedProps));
                    });
                    it("_B.isIqual false (inherited props, soft object equality)", function() {
                        return expect(_B.isIqual(shallowIncompleteClone, objectWithProtoInheritedProps) === false);
                    });
                    return it("_B.isIxact false (inherited props equality + strict references equality)", function() {
                        return expect(_B.isIxact(shallowIncompleteClone, objectWithProtoInheritedProps) === false);
                    });
                });
            });
        });
    });
    describe("Default 'Blender.blend' with inherited:true", function() {
        var defaultBlenderProtoCopier;
        defaultBlenderProtoCopier = new _B.Blender([], {
            inherited: true
        });
        return describe("clones objectWithProtoInheritedProps (with inheritance)", function() {
            return describe("(shallowClone = defaultBlenderProtoCopier.blend {}, objectWithProtoInheritedProps)", function() {
                var shallowCloneProtoCopied;
                shallowCloneProtoCopied = defaultBlenderProtoCopier.blend({}, objectWithProtoInheritedProps);
                return describe("is a complete shallow clone, having shallow copied all inherited props: ", function() {
                    it("has common references of all nested objects", function() {
                        var cRefs, sRefs;
                        sRefs = _B.getRefs(objectWithProtoInheritedProps, {
                            deep: true,
                            inherited: true
                        });
                        cRefs = _B.getRefs(shallowCloneProtoCopied, {
                            deep: true,
                            inherited: true
                        });
                        return expect(_B.isEqualArraySet(sRefs, cRefs));
                    });
                    it("has copied inherited nested object", function() {
                        expect(shallowCloneProtoCopied.aProp1 === objectWithProtoInheritedProps.aProp1);
                        return expect(shallowCloneProtoCopied.aProp1 !== void 0);
                    });
                    it("_.isEqual is false (soft equality, not looking at inherited props of source)", function() {
                        return expect(_.isEqual(shallowCloneProtoCopied, objectWithProtoInheritedProps) === false);
                    });
                    it("_B.isEqual is false (soft equality, not looking at inherited props of source)", function() {
                        return expect(_B.isEqual(shallowCloneProtoCopied, objectWithProtoInheritedProps) === false);
                    });
                    it("_B.isExact is false (strict references equality, no inherited props of source)", function() {
                        return expect(_B.isExact(shallowCloneProtoCopied, objectWithProtoInheritedProps) === false);
                    });
                    it("_B.isIqual is true (inherited props, soft object equality)", function() {
                        return expect(_B.isIqual(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                    return it("_B.isIxact true (inherited props, strict references equality)", function() {
                        return expect(_B.isIxact(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                });
            });
        });
    });
    return describe("Default 'Blender.blend' with copyProto:true", function() {
        var defaultBlenderProtoCopier;
        defaultBlenderProtoCopier = new _B.Blender([], {
            copyProto: true
        });
        return describe("clones objectWithProtoInheritedProps (with inheritance)", function() {
            return describe("(shallowClone = defaultBlenderProtoCopier.blend {}, objectWithProtoInheritedProps)", function() {
                var shallowCloneProtoCopied;
                shallowCloneProtoCopied = defaultBlenderProtoCopier.blend({}, objectWithProtoInheritedProps);
                return describe("is a complete shallow clone, having shallow copied only own props & __proto__: ", function() {
                    it("has ALL common references of all nested objects", function() {
                        var cRefs, sRefs;
                        sRefs = _B.getRefs(objectWithProtoInheritedProps, {
                            deep: true,
                            inherited: true
                        });
                        cRefs = _B.getRefs(shallowCloneProtoCopied, {
                            deep: true,
                            inherited: true
                        });
                        return expect(_B.isEqualArraySet(sRefs, cRefs));
                    });
                    it("has not copied inherited nested object, but can access it through __proto__ inheritance", function() {
                        expect(shallowCloneProtoCopied.aProp1 === objectWithProtoInheritedProps.aProp1);
                        expect(shallowCloneProtoCopied.aProp1 !== void 0);
                        expect(objectWithProtoInheritedProps.hasOwnProperty("aProp1") === false);
                        return expect(shallowCloneProtoCopied.hasOwnProperty("aProp1") === false);
                    });
                    it("_.isEqual is true (soft equality, not looking at inherited props of either)", function() {
                        return expect(_.isEqual(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                    it("_B.isEqual is true (soft equality, not looking at inherited props of either)", function() {
                        return expect(_B.isEqual(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                    it("_B.isExact is true (strict references equality, no inherited props of either)", function() {
                        return expect(_B.isExact(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                    it("_B.isIqual is true (inherited props, soft object equality)", function() {
                        return expect(_B.isIqual(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                    return it("_B.isIxact true (inherited props, strict references equality)", function() {
                        return expect(_B.isIxact(shallowCloneProtoCopied, objectWithProtoInheritedProps));
                    });
                });
            });
        });
    });
});

describe("DeepCloneBlender .blend:", function() {
    describe("Default settings: with inherited:false, copyProto:false", function() {
        var deepCloneBlender;
        deepCloneBlender = new _B.DeepCloneBlender;
        describe("clones POJSO Object (no inheritance)", function() {
            return describe("(deepClone = deepCloneBlender.blend {}, expectedPropertyValues)", function() {
                var deepClone;
                deepClone = deepCloneBlender.blend({}, expectedPropertyValues);
                return describe("is a deep clone", function() {
                    it("_B.isDisjoint true, NO common references in objects", function() {
                        return expect(_B.isRefDisjoint(deepClone, expectedPropertyValues, {
                            deep: true,
                            inherited: true
                        }));
                    });
                    it("nested object is a clone it self - NOT the same reference", function() {
                        return expect(deepClone.aProp1 !== expectedPropertyValues.aProp1);
                    });
                    it("_.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_.isEqual(deepClone, expectedPropertyValues));
                    });
                    it("_B.isEqual true (soft equality, same values/JSON)", function() {
                        return expect(_B.isEqual(deepClone, expectedPropertyValues));
                    });
                    return it("_B.isExact is false (strict references equality)", function() {
                        return expect(_B.isExact(deepClone, expectedPropertyValues) === false);
                    });
                });
            });
        });
        return describe("clones objectWithProtoInheritedProps (with inheritance)", function() {
            return describe("(deepIncompleteClone = deepCloneBlender.blend {}, objectWithProtoInheritedProps)", function() {
                var deepIncompleteClone;
                deepIncompleteClone = deepCloneBlender.blend({}, objectWithProtoInheritedProps);
                return describe("is an incomplete deep clone, not copied inherited props: ", function() {
                    it("_B.isDisjoint true, has NO common references of all nested objects", function() {
                        return expect(_B.isRefDisjoint(objectWithProtoInheritedProps, deepIncompleteClone, {
                            deep: true,
                            inherited: true
                        }));
                    });
                    it("has NOT copied inherited nested object", function() {
                        return expect(deepIncompleteClone.aProp1 === void 0);
                    });
                    describe("equality of deepIncompleteClone, objectWithProtoInheritedProps", function() {
                        it("_.isEqual true (soft equality, same values/JSON)", function() {
                            return expect(_.isEqual(deepIncompleteClone, objectWithProtoInheritedProps));
                        });
                        it("_B.isEqual true (soft equality, same values/JSON)", function() {
                            return expect(_B.isEqual(deepIncompleteClone, objectWithProtoInheritedProps));
                        });
                        it("_B.isIqual false (inherited props)", function() {
                            return expect(_B.isIqual(deepIncompleteClone, objectWithProtoInheritedProps) === false);
                        });
                        it("_B.isExact true (strict references equality)", function() {
                            return expect(_B.isExact(deepIncompleteClone, objectWithProtoInheritedProps));
                        });
                        return it("_B.isIxact false (inherited props, scrict references equality)", function() {
                            return expect(_B.isIxact(deepIncompleteClone, objectWithProtoInheritedProps) === false);
                        });
                    });
                    return describe("equality of deepInheritedClone, expectedPropertyValues", function() {
                        it("_.isEqual false (soft equality, same values/JSON)", function() {
                            return expect(_.isEqual(deepIncompleteClone, expectedPropertyValues) === false);
                        });
                        it("_B.isEqual false (soft equality, same values/JSON)", function() {
                            return expect(_B.isEqual(deepIncompleteClone, expectedPropertyValues) === false);
                        });
                        it("_B.isIqual false (inherited props)", function() {
                            return expect(_B.isIqual(deepIncompleteClone, expectedPropertyValues) === false);
                        });
                        it("_B.isExact false (strict references equality)", function() {
                            return expect(_B.isExact(deepIncompleteClone, expectedPropertyValues) === false);
                        });
                        return it("_B.isIxact false (inherited props, scrict references equality)", function() {
                            return expect(_B.isIxact(deepIncompleteClone, expectedPropertyValues) === false);
                        });
                    });
                });
            });
        });
    });
    return describe("with inherited:true", function() {
        var deepCloneInheritedBlender;
        deepCloneInheritedBlender = new _B.DeepCloneBlender([], {
            inherited: true
        });
        return describe("clones objectWithProtoInheritedProps (with inheritance)", function() {
            return describe("(deepInheritedClone = deepCloneInheritedBlender .blend {}, objectWithProtoInheritedProps)", function() {
                var deepInheritedClone;
                deepInheritedClone = deepCloneInheritedBlender.blend({}, objectWithProtoInheritedProps);
                return describe("is a complete deep clone, having deep cloned all inherited props as its own: ", function() {
                    it("_B.isDisjoint true, has NO common references of all nested objects", function() {
                        return expect(_B.isRefDisjoint(objectWithProtoInheritedProps, deepInheritedClone, {
                            deep: true,
                            inherited: true
                        }));
                    });
                    describe("equality of deepInheritedClone, objectWithProtoInheritedProps", function() {
                        it("_.isEqual false (soft equality, not looking at inherited props of either)", function() {
                            return expect(_.isEqual(deepInheritedClone, objectWithProtoInheritedProps) === false);
                        });
                        it("_B.isEqual false (soft equality, not looking at inherited props of either)", function() {
                            return expect(_B.isEqual(deepInheritedClone, objectWithProtoInheritedProps) === false);
                        });
                        it("_B.isIqual true (soft equality, inherited props)", function() {
                            return expect(_B.isIqual(deepInheritedClone, objectWithProtoInheritedProps));
                        });
                        it("_B.isExact false (strict references equality)", function() {
                            return expect(_B.isExact(deepInheritedClone, objectWithProtoInheritedProps) === false);
                        });
                        return it("_B.isIxact false (inherited props, scrict references equality)", function() {
                            return expect(_B.isIxact(deepInheritedClone, objectWithProtoInheritedProps) === false);
                        });
                    });
                    return describe("equality of deepInheritedClone, expectedPropertyValues", function() {
                        it("_.isEqual true (soft equality, all props are equal )", function() {
                            return expect(_.isEqual(deepInheritedClone, expectedPropertyValues));
                        });
                        it("_B.isEqual false (soft equality, all props are equal)", function() {
                            return expect(_B.isEqual(deepInheritedClone, expectedPropertyValues));
                        });
                        it("_B.isIqual true (soft equality, inherited props, all props are equal)", function() {
                            return expect(_B.isIqual(deepInheritedClone, expectedPropertyValues));
                        });
                        it("_B.isExact false (strict references equality)", function() {
                            return expect(_B.isExact(deepInheritedClone, expectedPropertyValues) === false);
                        });
                        return it("_B.isIxact false (inherited props, scrict references equality)", function() {
                            return expect(_B.isIxact(deepInheritedClone, expectedPropertyValues) === false);
                        });
                    });
                });
            });
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();