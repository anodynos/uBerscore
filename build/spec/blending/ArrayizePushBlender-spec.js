// Generated by uRequire v0.6.18 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('blending/ArrayizePushBlender-spec', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../specHelpers'), nr.require('../spec-data'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../specHelpers', '../spec-data'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, chai, _, _B, specHelpers, data) {
  

var expect = chai.expect; // injected @ `spec: bundle: commonCode`.

var deepEqual, equal, equalSet, exact, fals, iqual, ixact, like, likeBA, notDeepEqual, notEqual, notEqualSet, notExact, notIqual, notIxact, notLike, notLikeBA, notOk, ok, tru;
equal = specHelpers.equal, notEqual = specHelpers.notEqual, ok = specHelpers.ok, notOk = specHelpers.notOk, tru = specHelpers.tru, fals = specHelpers.fals, deepEqual = specHelpers.deepEqual, notDeepEqual = specHelpers.notDeepEqual, exact = specHelpers.exact, notExact = specHelpers.notExact, iqual = specHelpers.iqual, notIqual = specHelpers.notIqual, ixact = specHelpers.ixact, notIxact = specHelpers.notIxact, like = specHelpers.like, notLike = specHelpers.notLike, likeBA = specHelpers.likeBA, notLikeBA = specHelpers.notLikeBA, equalSet = specHelpers.equalSet, notEqualSet = specHelpers.notEqualSet;

var l = new _B.Logger('blending/ArrayizePushBlender-spec.js');

return describe("ArrayizePushBlender:", function () {
    describe("arrayizePusher:", function () {
      var arrayizePusher;
      arrayizePusher = new _B.ArrayizePushBlender();
      it("pushes ALL source array items into destination array", function () {
        return expect(arrayizePusher.blend([
          1,
          2,
          3
        ], [
          1,
          2,
          4,
          5,
          6,
          "7"
        ])).to.deep.equal([
          1,
          2,
          3,
          1,
          2,
          4,
          5,
          6,
          "7"
        ]);
      });
      describe("pushes source array items into non-array destination, arrayize'ing it first", function () {
        it("Number", function () {
          return expect(arrayizePusher.blend(123, [
            4,
            5,
            6
          ])).to.deep.equal([
            123,
            4,
            5,
            6
          ]);
        });
        it("String", function () {
          return expect(arrayizePusher.blend("123", [
            4,
            5,
            void 0,
            6
          ])).to.deep.equal([
            "123",
            4,
            5,
            void 0,
            6
          ]);
        });
        it("RegExp", function () {
          return expect(arrayizePusher.blend(/./, [
            4,
            5,
            null,
            6
          ])).to.deep.equal([
            /./,
            4,
            5,
            null,
            6
          ]);
        });
        it("`undefined` pushes nothing", function () {
          return expect(arrayizePusher.blend(void 0, [
            "1",
            "2",
            "3"
          ])).to.deep.equal([
            "1",
            "2",
            "3"
          ]);
        });
        return it("`null` pushes nothing", function () {
          return expect(arrayizePusher.blend(null, [
            "1",
            "2",
            "3"
          ])).to.deep.equal([
            "1",
            "2",
            "3"
          ]);
        });
      });
      describe("pushes source non-array item into array destination:", function () {
        it("String", function () {
          return expect(arrayizePusher.blend([
            "1",
            "2",
            "3"
          ], "456")).to.deep.equal([
            "1",
            "2",
            "3",
            "456"
          ]);
        });
        it("RegExp", function () {
          var regExp;
          regExp = /./;
          return expect(arrayizePusher.blend([
            "1",
            "2",
            "3"
          ], regExp)).to.deep.equal([
            "1",
            "2",
            "3",
            regExp
          ]);
        });
        return it("Source of `undefined` or `null` push nothing", function () {
          expect(arrayizePusher.blend([
            "1",
            "2",
            "3"
          ], void 0)).to.deep.equal([
            "1",
            "2",
            "3"
          ]);
          return expect(arrayizePusher.blend([
            "1",
            "2",
            "3"
          ], null)).to.deep.equal([
            "1",
            "2",
            "3"
          ]);
        });
      });
      describe("pushes non-array items onto each other", function () {
        it("String->String", function () {
          return expect(arrayizePusher.blend("123", "456")).to.deep.equal([
            "123",
            "456"
          ]);
        });
        it("String->RegExp", function () {
          var regExp;
          regExp = /./;
          return expect(arrayizePusher.blend("123", regExp)).to.deep.equal([
            "123",
            regExp
          ]);
        });
        return it("RegExp->String", function () {
          return expect(arrayizePusher.blend(/./, "123")).to.deep.equal([
            /./,
            "123"
          ]);
        });
      });
      describe("Reseting the destination array with signpost `[null]` as 1st src item", function () {
        var dstArray, result;
        dstArray = [
          "items",
          "to be",
          "removed"
        ];
        result = arrayizePusher.blend(dstArray, [
          [null],
          11,
          22,
          33
        ]);
        it("resets destination array to a new one ", function () {
          return expect(result).to.not.equal(dstArray);
        });
        return it("resets destination array & then pushes - ", function () {
          return expect(result).to.deep.equal([
            11,
            22,
            33
          ]);
        });
      });
      return describe("Arrays with reference values:", function () {
        var dstArray, result, srcArray;
        dstArray = [
          { a: 1 },
          { b: 2 },
          { c: 3 }
        ];
        srcArray = [
          { d: 4 },
          { e: 5 },
          { f: 6 }
        ];
        result = arrayizePusher.blend(dstArray, srcArray);
        it("All refs are pushed to destination & result is dstArray", function () {
          expect(result).to.equal(dstArray);
          return expect(result).to.deep.equal([
            dstArray[0],
            dstArray[1],
            dstArray[2],
            srcArray[0],
            srcArray[1],
            srcArray[2]
          ]);
        });
        it("leaves dst items untouched", function () {
          var i, _i, _results;
          _results = [];
          for (i = _i = 0; _i <= 2; i = ++_i) {
            _results.push(expect(result[i]).to.equal(dstArray[i]));
          }
          return _results;
        });
        return it("leaves source items untouched, pushed as exact refs to destination", function () {
          var i, _i, _results;
          _results = [];
          for (i = _i = 0; _i <= 2; i = ++_i) {
            _results.push(expect(result[i + 3]).to.equal(srcArray[i]));
          }
          return _results;
        });
      });
    });
    return describe("arrayizeUniquePusher:", function () {
      var arrayizeUniquePusher;
      arrayizeUniquePusher = new _B.ArrayizePushBlender([], { unique: true });
      it("has unique:true", function () {
        return expect(arrayizeUniquePusher.unique).to.be["true"];
      });
      return it("pushes only === unique items", function () {
        return expect(arrayizeUniquePusher.blend([
          1,
          4,
          2,
          3
        ], [
          1,
          2,
          4,
          5,
          6,
          "7"
        ])).to.deep.equal([
          1,
          4,
          2,
          3,
          5,
          6,
          "7"
        ]);
      });
    });
  });


})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))