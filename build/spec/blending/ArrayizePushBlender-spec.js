// Generated by uRequire v0.4.0
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/ArrayizePushBlender-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('agreement/isAgree'), nr.require('chai'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', 'agreement/isAgree', 'chai', 'uberscore', '../spec-data'], factory);
 }
})(this,function (require, exports, module, _, isAgree, chai, _B, data) {
  // uRequire: start body of original nodejs module
var assert, expect;

assert = chai.assert;

expect = chai.expect;

describe("ArrayizePushBlender:", function() {
    describe("arrayizePusher:", function() {
        var arrayizePusher;
        arrayizePusher = new _B.ArrayizePushBlender;
        it("pushes ALL source array items into destination array", function() {
            return expect(arrayizePusher.blend([ 1, 2, 3 ], [ 1, 2, 4, 5, 6, "7" ])).to.deep.equal([ 1, 2, 3, 1, 2, 4, 5, 6, "7" ]);
        });
        it("pushes source array items into non-array destination, arrayize'ing it first", function() {
            return expect(arrayizePusher.blend(123, [ 4, 5, 6 ])).to.deep.equal([ 123, 4, 5, 6 ]);
        });
        it("pushes source non-array (but a String) item into array destination", function() {
            return expect(arrayizePusher.blend([ "1", "2", "3" ], "456")).to.deep.equal([ "1", "2", "3", "456" ]);
        });
        it("pushes non-array (but Strings) items onto each other", function() {
            return expect(arrayizePusher.blend("123", "456")).to.deep.equal([ "123", "456" ]);
        });
        return it("resets destination array & then pushes - using signpost `[null]` as 1st src item", function() {
            return expect(arrayizePusher.blend([ "items", "to be", "removed" ], [ [ null ], 11, 22, 33 ])).to.deep.equal([ 11, 22, 33 ]);
        });
    });
    return describe("arrayizeUniquePusher:", function() {
        var arrayizeUniquePusher;
        arrayizeUniquePusher = new _B.ArrayizePushBlender([], {
            unique: true
        });
        it("has unique:true", function() {
            return expect(arrayizeUniquePusher.unique).to.be["true"];
        });
        return it("pushes only === unique items", function() {
            return expect(arrayizeUniquePusher.blend([ 1, 4, 2, 3 ], [ 1, 2, 4, 5, 6, "7" ])).to.deep.equal([ 1, 4, 2, 3, 5, 6, "7" ]);
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();