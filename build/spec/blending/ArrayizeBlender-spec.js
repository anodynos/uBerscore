// Generated by uRequire v0.7.0-beta.28 target: 'spec' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('blending/ArrayizeBlender-spec.js');

return describe("ArrayizeBlender:", function () {
    describe("arrayizeBlender:", function () {
      var arrayizeBlender;
      arrayizeBlender = new _B.ArrayizeBlender();
      it("pushes ALL source array items into destination array", function () {
        return deepEqual(arrayizeBlender.blend([
          1,
          2,
          3
        ], [
          1,
          2,
          4,
          5,
          6,
          "7"
        ]), [
          1,
          2,
          3,
          1,
          2,
          4,
          5,
          6,
          "7"
        ]);
      });
      describe("pushes source array items into non-array destination, arrayize'ing it first", function () {
        it("Number", function () {
          return deepEqual(arrayizeBlender.blend(123, [
            4,
            5,
            6
          ]), [
            123,
            4,
            5,
            6
          ]);
        });
        it("String", function () {
          return deepEqual(arrayizeBlender.blend("123", [
            4,
            5,
            void 0,
            6
          ]), [
            "123",
            4,
            5,
            void 0,
            6
          ]);
        });
        it("RegExp", function () {
          return deepEqual(arrayizeBlender.blend(/./, [
            4,
            5,
            null,
            6
          ]), [
            /./,
            4,
            5,
            null,
            6
          ]);
        });
        it("`undefined` pushes nothing", function () {
          return deepEqual(arrayizeBlender.blend(void 0, [
            "1",
            "2",
            "3"
          ]), [
            "1",
            "2",
            "3"
          ]);
        });
        return it("`null` pushes nothing", function () {
          return deepEqual(arrayizeBlender.blend(null, [
            "1",
            "2",
            "3"
          ]), [
            "1",
            "2",
            "3"
          ]);
        });
      });
      describe("pushes source non-array item into array destination:", function () {
        it("String", function () {
          return deepEqual(arrayizeBlender.blend([
            "1",
            "2",
            "3"
          ], "456"), [
            "1",
            "2",
            "3",
            "456"
          ]);
        });
        it("RegExp", function () {
          var regExp;
          regExp = /./;
          return deepEqual(arrayizeBlender.blend([
            "1",
            "2",
            "3"
          ], regExp), [
            "1",
            "2",
            "3",
            regExp
          ]);
        });
        return it("Source of `undefined` or `null` push nothing", function () {
          deepEqual(arrayizeBlender.blend([
            "1",
            "2",
            "3"
          ], void 0), [
            "1",
            "2",
            "3"
          ]);
          return deepEqual(arrayizeBlender.blend([
            "1",
            "2",
            "3"
          ], null), [
            "1",
            "2",
            "3"
          ]);
        });
      });
      describe("pushes non-array items onto each other", function () {
        it("String->String", function () {
          return deepEqual(arrayizeBlender.blend("123", "456"), [
            "123",
            "456"
          ]);
        });
        it("String->RegExp", function () {
          var regExp;
          regExp = /./;
          return deepEqual(arrayizeBlender.blend("123", regExp), [
            "123",
            regExp
          ]);
        });
        return it("RegExp->String", function () {
          return deepEqual(arrayizeBlender.blend(/./, "123"), [
            /./,
            "123"
          ]);
        });
      });
      describe("Reseting the destination array with signpost `[null]` as 1st src item", function () {
        var dstArray, result;
        dstArray = [
          "items",
          "to be",
          "removed"
        ];
        result = arrayizeBlender.blend(dstArray, [
          [null],
          11,
          22,
          33
        ]);
        it("resets destination array to a new one ", function () {
          return notEqual(result, dstArray);
        });
        return it("resets destination array & then pushes - ", function () {
          return deepEqual(result, [
            11,
            22,
            33
          ]);
        });
      });
      return describe("Arrays with reference values:", function () {
        var dstArray, result, srcArray;
        dstArray = [
          { a: 1 },
          { b: 2 },
          { c: 3 }
        ];
        srcArray = [
          { d: 4 },
          { e: 5 },
          { f: 6 }
        ];
        result = arrayizeBlender.blend(dstArray, srcArray);
        it("All refs are pushed to destination & result is dstArray", function () {
          deepEqual(result, dstArray);
          return deepEqual(result, [
            dstArray[0],
            dstArray[1],
            dstArray[2],
            srcArray[0],
            srcArray[1],
            srcArray[2]
          ]);
        });
        it("leaves dst items untouched", function () {
          var i, j, results;
          results = [];
          for (i = j = 0; j <= 2; i = ++j) {
            results.push(equal(result[i], dstArray[i]));
          }
          return results;
        });
        return it("leaves source items untouched, pushed as exact refs to destination", function () {
          var i, j, results;
          results = [];
          for (i = j = 0; j <= 2; i = ++j) {
            results.push(equal(result[i + 3], srcArray[i]));
          }
          return results;
        });
      });
    });
    describe("arrayizeUniqueBlender:", function () {
      var arrayizeUniqueBlender;
      arrayizeUniqueBlender = new _B.ArrayizeBlender([], { unique: true });
      it("has unique:true", function () {
        return tru(arrayizeUniqueBlender.unique);
      });
      return it("pushes only === unique items", function () {
        return deepEqual(arrayizeUniqueBlender.blend([
          1,
          4,
          2,
          3
        ], [
          1,
          2,
          4,
          5,
          6,
          "7"
        ]), [
          1,
          4,
          2,
          3,
          5,
          6,
          "7"
        ]);
      });
    });
    describe("arrayizeUnshiftingBlender:", function () {
      var arrayizeUnshiftingBlender;
      arrayizeUnshiftingBlender = new _B.ArrayizeBlender([], { addMethod: "unshift" });
      it("has addMethod:unshift", function () {
        return equal(arrayizeUnshiftingBlender.addMethod, "unshift");
      });
      return it("unshifts (instead of pushing) items", function () {
        return deepEqual(arrayizeUnshiftingBlender.blend([
          1,
          2,
          3,
          4
        ], [
          5,
          6,
          "7",
          8
        ], 9, [
          10,
          11
        ], 12), [
          12,
          11,
          10,
          9,
          8,
          "7",
          6,
          5,
          1,
          2,
          3,
          4
        ]);
      });
    });
    return describe("arrayizeUnshiftingReverseBlender:", function () {
      var arrayizeUnshiftingBlender;
      arrayizeUnshiftingBlender = new _B.ArrayizeBlender([], {
        addMethod: "unshift",
        reverse: true
      });
      it("has right flags", function () {
        equal(arrayizeUnshiftingBlender.addMethod, "unshift");
        return equal(arrayizeUnshiftingBlender.reverse, true);
      });
      return it("unshifts (instead of pushing) items, in reverse order (hence source arrays remain in right order)", function () {
        return deepEqual(arrayizeUnshiftingBlender.blend([
          1,
          2,
          3,
          4
        ], [
          5,
          6,
          "7",
          8
        ], 9, [
          10,
          11
        ], 12), [
          12,
          10,
          11,
          9,
          5,
          6,
          "7",
          8,
          1,
          2,
          3,
          4
        ]);
      });
    });
  });


});
}).call(this);