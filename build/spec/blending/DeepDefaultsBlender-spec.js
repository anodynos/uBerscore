// Generated by uRequire v0.7.0-beta.28 target: 'spec' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('blending/DeepDefaultsBlender-spec.js');

var Class3, bundle, bundle_project_team, c3, earth, earth_laboratory_experiment, expectedPropertyValues, experiment, experiment_laboratory_earth, laboratory, laboratory_experiment, objectWithProtoInheritedProps, project, team;
objectWithProtoInheritedProps = data.objectWithProtoInheritedProps, Class3 = data.Class3, c3 = data.c3, expectedPropertyValues = data.expectedPropertyValues, project = data.project, team = data.team, bundle = data.bundle, bundle_project_team = data.bundle_project_team, earth = data.earth, laboratory = data.laboratory, experiment = data.experiment, earth_laboratory_experiment = data.earth_laboratory_experiment, experiment_laboratory_earth = data.experiment_laboratory_earth, laboratory_experiment = data.laboratory_experiment;
describe("Defaults: The DeepDefaultsBlender, overwritting only null/undefined & merging all nested types", function () {
  describe("Default settings:", function () {
    var deepDefaultsBlender;
    deepDefaultsBlender = new _B.DeepDefaultsBlender();
    describe("bundle, project, team:", function () {
      var result;
      result = deepDefaultsBlender.blend({}, bundle, project, team);
      it("_.isEqual result, bundle_project_team", function () {
        return expect(result).to.be.deep.equal(bundle_project_team);
      });
      return it("_.isRefDisjoint result with each of bundle, project, team", function () {
        var i, len, o, ref, results;
        ref = [
          bundle,
          project,
          team
        ];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          results.push(expect(_B.isRefDisjoint(result, o)).to.be["true"]);
        }
        return results;
      });
    });
    describe("earth, laboratory, experiment", function () {
      var result;
      result = deepDefaultsBlender.blend({}, earth, laboratory, experiment);
      it("_.isEqual result, earth_laboratory_experiment", function () {
        return expect(result).to.be.deep.equal(earth_laboratory_experiment);
      });
      return it("_.isRefDisjoint result with each of earth, laboratory, experiment", function () {
        var i, len, o, ref, results;
        ref = [
          bundle,
          project,
          team
        ];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          results.push(expect(_B.isRefDisjoint(result, o)).to.be["true"]);
        }
        return results;
      });
    });
    describe("experiment, laboratory, earth", function () {
      var result;
      result = deepDefaultsBlender.blend({}, experiment, laboratory, earth);
      it("_.isEqual result, experiment_laboratory_earth", function () {
        return expect(result).to.be.deep.equal(experiment_laboratory_earth);
      });
      return it("_.isRefDisjoint result with each of experiment, laboratory, earth", function () {
        var i, len, o, ref, results;
        ref = [
          experiment,
          laboratory,
          earth
        ];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          results.push(expect(_B.isRefDisjoint(result, o)).to.be["true"]);
        }
        return results;
      });
    });
    return describe("laboratory, experiment", function () {
      var result;
      result = deepDefaultsBlender.blend({}, laboratory, experiment);
      it("_.isEqual result, laboratory_experiment", function () {
        return expect(result).to.be.deep.equal(laboratory_experiment);
      });
      return it("_.isRefDisjoint result with each of laboratory, experiment", function () {
        var i, len, o, ref, results;
        ref = [
          laboratory,
          experiment
        ];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          results.push(expect(_B.isRefDisjoint(result, o)).to.be["true"]);
        }
        return results;
      });
    });
  });
  return describe("Using path in BlenderBehavior.order: ", function () {
    var peopleUniqueBlender, result;
    peopleUniqueBlender = new _B.DeepDefaultsBlender({
      "order": [
        "src",
        "path"
      ],
      Array: {
        life: {
          people: {
            "|": function (prop, src, dst) {
              var foundPerson, i, len, person, ref;
              ref = src[prop];
              for (i = 0, len = ref.length; i < len; i++) {
                person = ref[i];
                if (!_.isArray(dst[prop])) {
                  dst[prop] = [];
                } else {
                  foundPerson = _.find(dst[prop], function (v) {
                    return v.name === person.name;
                  });
                }
                if (!foundPerson) {
                  dst[prop].push(person);
                } else {
                  _.extend(foundPerson, person);
                }
              }
              return dst[prop];
            }
          }
        }
      }
    });
    result = peopleUniqueBlender.blend(laboratory, experiment);
    return it("_.isEqual result, laboratory_experiment", function () {
      return expect(_.isEqual(result, {
        name: "laboratoryDefaults",
        environment: {
          temperature: 35,
          moisture: { max: 40 },
          gravity: 1.5
        },
        life: {
          races: [
            "Caucasian",
            "African",
            "Asian",
            "Mutant"
          ],
          people: [
            {
              name: "moe",
              age: 400
            },
            {
              name: "larry",
              age: 500
            },
            {
              name: "blanka",
              age: 20
            },
            {
              name: "ken",
              age: 25
            },
            {
              name: "ryu",
              age: 28
            }
          ]
        },
        results: { success: false }
      })).to.be["true"];
    });
  });
});

return module.exports;

});
}).call(this);