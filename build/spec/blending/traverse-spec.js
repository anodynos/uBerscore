// Generated by uRequire v0.6.0 - template: 'UMD'
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('blending/traverse-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../spec-data'], factory);
 }
}).call(this, this,function (require, exports, module, chai, _, _B, data) {
  
// uRequire v0.6.0: START body of original nodejs module
  var assert, expect;
  assert = chai.assert;
  expect = chai.expect;
  describe("traverse:", function () {
    var o;
    o = {
      a: {
        a1: { a1_1: { a1_1_1: 111 } },
        a2: {
          bingo: true,
          a2_1: { a2_1_1: 211 }
        }
      },
      b: 2
    };
    it("traverses nested objects", function () {
      var props;
      props = [];
      _B.traverse(o, function (prop, src, blender) {
        return props.push(prop);
      });
      return expect(props).to.be.deep.equal([
        "a",
        "a1",
        "a1_1",
        "a2",
        "a2_1"
      ]);
    });
    return it("quits branch if callback returns false", function () {
      var props;
      props = [];
      _B.traverse(o, function (prop, src, blender) {
        props.push(prop);
        if (src[prop].bingo === true) {
          return false;
        }
      });
      return expect(props).to.be.deep.equal([
        "a",
        "a1",
        "a1_1",
        "a2"
      ]);
    });
  });
// uRequire v0.6.0: END body of original nodejs module


return module.exports;
})
}).call(this);