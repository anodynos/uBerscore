// Generated by uRequire v0.6.18 - template: 'UMD' 
(function (window, global) {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    var nr = new (require('urequire').NodeRequirer) ('uberscore-spec', module, __dirname, '.');
    module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('./specHelpers'), nr.require('./spec-data'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './specHelpers', './spec-data'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, chai, _, _B, specHelpers, data) {
  

var expect = chai.expect; // injected @ `spec: bundle: commonCode`.

var deepEqual, equal, equalSet, exact, fals, iqual, ixact, like, likeBA, notDeepEqual, notEqual, notEqualSet, notExact, notIqual, notIxact, notLike, notLikeBA, notOk, ok, tru;
equal = specHelpers.equal, notEqual = specHelpers.notEqual, ok = specHelpers.ok, notOk = specHelpers.notOk, tru = specHelpers.tru, fals = specHelpers.fals, deepEqual = specHelpers.deepEqual, notDeepEqual = specHelpers.notDeepEqual, exact = specHelpers.exact, notExact = specHelpers.notExact, iqual = specHelpers.iqual, notIqual = specHelpers.notIqual, ixact = specHelpers.ixact, notIxact = specHelpers.notIxact, like = specHelpers.like, notLike = specHelpers.notLike, likeBA = specHelpers.likeBA, notLikeBA = specHelpers.notLikeBA, equalSet = specHelpers.equalSet, notEqualSet = specHelpers.notEqualSet;

var l = new _B.Logger('uberscore-spec.js');

return describe("uRequire's `rootExports` & `noConflict():`\n  (running on " + (__isNode ? "nodejs" : "Web") + " via " + (__isAMD ? "AMD" : "noAMD/script") + "):", function () {
    var _uB;
    _uB = require("uberscore");
    it("registers globals '_B' & 'uberscore'", function () {
      expect(window._B).to.equal(_uB);
      return expect(window.uberscore).to.equal(_uB);
    });
    return it("noConflict() returns module & sets old values to globals '_B' & 'uberscore'", function () {
      expect(window._B.noConflict()).to.equal(_uB);
      if (__isWeb) {
        expect(window._B).to.equal("Old global `_B`");
        return expect(window.uberscore).to.equal("Old global `uberscore`");
      }
    });
  });


})
}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))