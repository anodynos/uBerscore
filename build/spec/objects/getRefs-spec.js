// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('objects/getRefs-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('agreement/isAgree'), nr.require('chai'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', 'agreement/isAgree', 'chai', 'uberscore', '../spec-data'], factory);
 }
})(this,function (require, exports, module, _, isAgree, chai, _B, data) {
  // uRequire: start body of original nodejs module
var assert, expect;

assert = chai.assert;

expect = chai.expect;

describe("getRefs:", function() {
    it("from array, deep = false", function() {
        var oa, refs;
        oa = [ 0, 1, {
            p: [ {
                PP: 3
            } ]
        }, {
            a: {
                b: function() {}
            }
        }, 4 ];
        refs = _B.getRefs(oa);
        return expect(_B.isEqualArraySet(refs, [ oa[3], oa[2] ])).to.be["true"];
    });
    it("from array, deep = true:", function() {
        var oa, refs;
        oa = [ 0, 1, {
            p: [ {
                PP: 3
            } ]
        }, {
            a: {
                b: function() {}
            }
        }, 4 ];
        refs = _B.getRefs(oa, {
            deep: true
        });
        return expect(_B.isEqualArraySet(refs, [ oa[2], oa[2].p, oa[2].p[0], oa[3], oa[3].a, oa[3].a.b ])).to.be["true"];
    });
    return it("from object, deep = true:", function() {
        var oa, refs;
        oa = {
            p0: 0,
            p1: 1,
            p2: {
                p: [ {
                    PP: 3
                } ]
            },
            p3: {
                a: {
                    b: function() {}
                }
            },
            p4: 4
        };
        refs = _B.getRefs(oa, {
            deep: true
        });
        return expect(_B.isEqualArraySet(refs, [ oa.p2.p, oa.p2.p[0], oa.p2, oa.p3, oa.p3.a, oa.p3.a.b ])).to.be["true"];
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();