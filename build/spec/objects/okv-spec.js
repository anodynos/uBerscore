// Generated by uRequire v0.7.0-beta.25 target: 'specWatch' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('objects/okv-spec.js');

describe("okv :", function () {
  var weirdKeyName;
  weirdKeyName = " $#%!@&";
  it("builds a simple object, with weird keyName", function () {
    return expect(_B.okv({}, "foo_" + weirdKeyName, 8, "bar" + weirdKeyName, "some bar")).to.deep.equal({
      "foo_ $#%!@&": 8,
      "bar $#%!@&": "some bar"
    });
  });
  describe("build a more invloved object", function () {
    var bar, o, theO;
    o = theO = {};
    o = _B.okv(o, "foo_" + weirdKeyName, 8, bar = "bar" + weirdKeyName, "some bar");
    o[bar] = _B.okv({}, "nestedBar" + weirdKeyName, "This is a secret bar", "anotherBar" + weirdKeyName, "Many bars, no foo");
    it("the object passed, is the object returned", function () {
      return expect(o).to.equal(theO);
    });
    it("o is build, then part of it augmented", function () {
      return expect(o).to.deep.equal({
        "foo_ $#%!@&": 8,
        "bar $#%!@&": {
          "nestedBar $#%!@&": "This is a secret bar",
          "anotherBar $#%!@&": "Many bars, no foo"
        }
      });
    });
    return it("add nested weird keyd bars on existing key, with ignored reduntan key", function () {
      var i;
      _B.okv(o[bar], "newbar" + weirdKeyName, "a new bar!", "bar" + function () {
        var j, len, ref, results;
        ref = [
          1,
          2,
          3
        ];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          results.push("" + i);
        }
        return results;
      }().join("-"), "ther weirest bar!", "reduntantKey");
      return expect(o).to.deep.equal({
        "foo_ $#%!@&": 8,
        "bar $#%!@&": {
          "nestedBar $#%!@&": "This is a secret bar",
          "anotherBar $#%!@&": "Many bars, no foo",
          "newbar $#%!@&": "a new bar!",
          "bar1-2-3": "ther weirest bar!"
        }
      });
    });
  });
  return describe("passing a string instead of obj as 1st param & toString objects as keys", function () {
    it("creates a new object, when 1st param is a String, which becomes the 1st key", function () {
      var o;
      o = _B.okv("some" + "property", { a: "value" });
      return expect(o).to.deep.equal({ "someproperty": { a: "value" } });
    });
    return it("key is an object, converted toString", function () {
      var o, objectWithToString;
      objectWithToString = {
        prop: "a property of an object",
        toString: function () {
          return this.prop + " that becomes a String";
        }
      };
      o = _B.okv({}, objectWithToString, { a: "value" });
      return expect(o).to.deep.equal({ "a property of an object that becomes a String": { a: "value" } });
    });
  });
});

return module.exports;

});
}).call(this);