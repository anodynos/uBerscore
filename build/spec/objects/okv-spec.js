// Generated by uRequire v0.6.0 - template: 'UMD'
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('objects/okv-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('chai'), nr.require('lodash'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', '../spec-data'], factory);
 }
}).call(this, this,function (require, exports, module, chai, _, _B, data) {
  
// uRequire v0.6.0: START body of original nodejs module
  var assert, expect;
  assert = chai.assert;
  expect = chai.expect;
  describe("okv :", function () {
    var weirdKeyName;
    weirdKeyName = " $#%!@&";
    it("builds a simple object, with weird keyName", function () {
      return expect(_B.okv({}, "foo_" + weirdKeyName, 8, "bar" + weirdKeyName, "some bar")).to.deep.equal({
        "foo_ $#%!@&": 8,
        "bar $#%!@&": "some bar"
      });
    });
    describe("build a more invloved object", function () {
      var bar, o, theO;
      o = theO = {};
      o = _B.okv(o, "foo_" + weirdKeyName, 8, bar = "bar" + weirdKeyName, "some bar");
      o[bar] = _B.okv({}, "nestedBar" + weirdKeyName, "This is a secret bar", "anotherBar" + weirdKeyName, "Many bars, no foo");
      it("the object passed, is the object returned", function () {
        return expect(o).to.equal(theO);
      });
      it("o is build, then part of it augmented", function () {
        return expect(o).to.deep.equal({
          "foo_ $#%!@&": 8,
          "bar $#%!@&": {
            "nestedBar $#%!@&": "This is a secret bar",
            "anotherBar $#%!@&": "Many bars, no foo"
          }
        });
      });
      return it("add nested weird keyd bars on existing key, with ignored reduntan key", function () {
        var i;
        _B.okv(o[bar], "newbar" + weirdKeyName, "a new bar!", "bar" + function () {
          var _i, _len, _ref, _results;
          _ref = [
            1,
            2,
            3
          ];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push("" + i);
          }
          return _results;
        }().join("-"), "ther weirest bar!", "reduntantKey");
        return expect(o).to.deep.equal({
          "foo_ $#%!@&": 8,
          "bar $#%!@&": {
            "nestedBar $#%!@&": "This is a secret bar",
            "anotherBar $#%!@&": "Many bars, no foo",
            "newbar $#%!@&": "a new bar!",
            "bar1-2-3": "ther weirest bar!"
          }
        });
      });
    });
    return describe("passing a string instead of obj as 1st param & toString objects as keys", function () {
      it("creates a new object, when 1st param is a String, which becomes the 1st key", function () {
        var o;
        o = _B.okv("some" + "property", { a: "value" });
        return expect(o).to.deep.equal({ "someproperty": { a: "value" } });
      });
      return it("key is an object, converted toString", function () {
        var o, objectWithToString;
        objectWithToString = {
          prop: "a property of an object",
          toString: function () {
            return this.prop + " that becomes a String";
          }
        };
        o = _B.okv({}, objectWithToString, { a: "value" });
        return expect(o).to.deep.equal({ "a property of an object that becomes a String": { a: "value" } });
      });
    });
  });
// uRequire v0.6.0: END body of original nodejs module


return module.exports;
})
}).call(this);