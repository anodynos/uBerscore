// Generated by uRequire v0.7.0-beta.25 target: 'specWatch' template: 'UMDplain'
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory); } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('objects/setp-spec.js');

describe("objects/setp:", function () {
  var o;
  o = {
    "$": {
      bundle: {
        anArray: [
          "arrayItem1",
          2,
          { "arrayItem3": 3 }
        ],
        dependencies: { depsVars: "Bingo" }
      }
    }
  };
  describe("existent paths:", function () {
    it("primitive", function () {
      var isSet, oClone;
      oClone = _.clone(o, true);
      isSet = _B.setp(oClone, "$/bundle/dependencies/depsVars", "just_a_String");
      return expect(oClone).to.deep.equal({
        "$": {
          bundle: {
            anArray: [
              "arrayItem1",
              2,
              { "arrayItem3": 3 }
            ],
            dependencies: { depsVars: "just_a_String" }
          }
        }
      });
    });
    it("object, with sep at end & alt sep", function () {
      var isSet, oClone;
      oClone = _.clone(o, true);
      isSet = _B.setp(oClone, "$.bundle.dependencies.depsVars.", { property: "just_a_String" }, { separator: "." });
      expect(oClone).to.deep.equal({
        "$": {
          bundle: {
            anArray: [
              "arrayItem1",
              2,
              { "arrayItem3": 3 }
            ],
            dependencies: { depsVars: { property: "just_a_String" } }
          }
        }
      });
      return expect(isSet).to.be["true"];
    });
    it("object, overwriting object property", function () {
      var isSet, oClone;
      oClone = _.clone(o, true);
      isSet = _B.setp(oClone, "$.bundle.dependencies.", { property: "just_a_String" }, { separator: "." });
      expect(oClone).to.deep.equal({
        "$": {
          bundle: {
            anArray: [
              "arrayItem1",
              2,
              { "arrayItem3": 3 }
            ],
            dependencies: { property: "just_a_String" }
          }
        }
      });
      return expect(isSet).to.be["true"];
    });
    return it("array item, overwriting object property", function () {
      var isSet, oClone;
      oClone = _.clone(o, true);
      isSet = _B.setp(oClone, "$.bundle.anArray.2.arrayItem3", { "3_is_now": 33 }, { separator: "." });
      expect(oClone).to.deep.equal({
        "$": {
          bundle: {
            anArray: [
              "arrayItem1",
              2,
              { "arrayItem3": { "3_is_now": 33 } }
            ],
            dependencies: { depsVars: "Bingo" }
          }
        }
      });
      return expect(isSet).to.be["true"];
    });
  });
  return describe("inexistent key paths:", function () {
    it("not setting by default", function () {
      var isSet, oClone;
      oClone = _.clone(o, true);
      isSet = _B.setp(oClone, "$/bundle/dependencies/depsVars/hi", { joke: { joke2: "JOKER" } });
      expect(oClone).to.deep.equal(o);
      return expect(isSet).to.be["false"];
    });
    describe("options.create:", function () {
      it("create new objects for inexistent paths, adding object properties", function () {
        var isSet, oClone;
        oClone = _.clone(o, true);
        isSet = _B.setp(oClone, "$.bundle.dependencies.moreDeps.evenMoreDeps.", { property: "just_a_String" }, {
          create: true,
          separator: "."
        });
        expect(oClone).to.deep.equal({
          "$": {
            bundle: {
              anArray: [
                "arrayItem1",
                2,
                { "arrayItem3": 3 }
              ],
              dependencies: {
                depsVars: "Bingo",
                moreDeps: { evenMoreDeps: { property: "just_a_String" } }
              }
            }
          }
        });
        return expect(isSet).to.be["true"];
      });
      return it("NOT overwritting primitives:", function () {
        var isSet, oClone;
        oClone = _.clone(o, true);
        isSet = _B.setp(oClone, "$/bundle/dependencies/depsVars/newKey/", { property: "just_a_String" }, { create: true });
        expect(oClone).to.deep.equal({
          "$": {
            bundle: {
              anArray: [
                "arrayItem1",
                2,
                { "arrayItem3": 3 }
              ],
              dependencies: { depsVars: "Bingo" }
            }
          }
        });
        return expect(isSet).to.be["false"];
      });
    });
    return describe("options.overwrite:", function () {
      it("create new objects, overwritting primitives:", function () {
        var isSet, oClone;
        oClone = _.clone(o, true);
        isSet = _B.setp(oClone, "$/bundle/dependencies/depsVars/newKey", { joke: { joke2: "JOKER" } }, { overwrite: true });
        expect(oClone).to.deep.equal({
          "$": {
            bundle: {
              anArray: [
                "arrayItem1",
                2,
                { "arrayItem3": 3 }
              ],
              dependencies: { depsVars: { newKey: { joke: { joke2: "JOKER" } } } }
            }
          }
        });
        return expect(isSet).to.be["true"];
      });
      return it("create new objects, preserving `oldValue`", function () {
        var isSet, oClone;
        oClone = _.clone(o, true);
        isSet = _B.setp(oClone, "$/bundle/dependencies/depsVars/newKey/anotherNewKey", { joke: { joke2: "JOKER" } }, { overwrite: "_oldValue" });
        expect(oClone).to.deep.equal({
          "$": {
            bundle: {
              anArray: [
                "arrayItem1",
                2,
                { "arrayItem3": 3 }
              ],
              dependencies: {
                depsVars: {
                  _oldValue: "Bingo",
                  newKey: { anotherNewKey: { joke: { joke2: "JOKER" } } }
                }
              }
            }
          }
        });
        return expect(isSet).to.be["true"];
      });
    });
  });
});

return module.exports;

});
}).call(this);