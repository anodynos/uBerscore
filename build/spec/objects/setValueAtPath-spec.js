// Generated by uRequire v0.3.0beta1
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('objects/setValueAtPath-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('agreement/isAgree'), nr.require('chai'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', 'agreement/isAgree', 'chai', 'uberscore', '../spec-data'], factory);
 }
})(this,function (require, exports, module, _, isAgree, chai, _B, data) {
  // uRequire: start body of original nodejs module
var assert, expect;

assert = chai.assert;

expect = chai.expect;

describe("objects/setValueAtPath:", function() {
    var o;
    o = {
        $: {
            bundle: {
                anArray: [ "arrayItem1", 2, {
                    arrayItem3: 3
                } ],
                dependencies: {
                    variableNames: "Bingo"
                }
            }
        }
    };
    describe("existent paths", function() {
        it("primitive", function() {
            var isSet, oClone;
            oClone = _.clone(o, true);
            isSet = _B.setValueAtPath(oClone, "$/bundle/dependencies/variableNames", "just_a_String");
            expect(oClone).to.deep.equal({
                $: {
                    bundle: {
                        anArray: [ "arrayItem1", 2, {
                            arrayItem3: 3
                        } ],
                        dependencies: {
                            variableNames: "just_a_String"
                        }
                    }
                }
            });
            return expect(isSet).to.be["true"];
        });
        it("object, with sep at end & alt sep", function() {
            var isSet, oClone;
            oClone = _.clone(o, true);
            isSet = _B.setValueAtPath(oClone, "$.bundle.dependencies.variableNames.", {
                property: "just_a_String"
            }, void 0, ".");
            expect(oClone).to.deep.equal({
                $: {
                    bundle: {
                        anArray: [ "arrayItem1", 2, {
                            arrayItem3: 3
                        } ],
                        dependencies: {
                            variableNames: {
                                property: "just_a_String"
                            }
                        }
                    }
                }
            });
            return expect(isSet).to.be["true"];
        });
        it("object, overwriting object property", function() {
            var isSet, oClone;
            oClone = _.clone(o, true);
            isSet = _B.setValueAtPath(oClone, "$.bundle.dependencies.", {
                property: "just_a_String"
            }, void 0, ".");
            expect(oClone).to.deep.equal({
                $: {
                    bundle: {
                        anArray: [ "arrayItem1", 2, {
                            arrayItem3: 3
                        } ],
                        dependencies: {
                            property: "just_a_String"
                        }
                    }
                }
            });
            return expect(isSet).to.be["true"];
        });
        return it("array item, overwriting object property", function() {
            var isSet, oClone;
            oClone = _.clone(o, true);
            isSet = _B.setValueAtPath(oClone, "$.bundle.anArray.2.arrayItem3", {
                "3_is_now": 33
            }, void 0, ".");
            expect(oClone).to.deep.equal({
                $: {
                    bundle: {
                        anArray: [ "arrayItem1", 2, {
                            arrayItem3: {
                                "3_is_now": 33
                            }
                        } ],
                        dependencies: {
                            variableNames: "Bingo"
                        }
                    }
                }
            });
            return expect(isSet).to.be["true"];
        });
    });
    return describe("inexistent key paths:", function() {
        it("not setting by default", function() {
            var isSet, oClone;
            oClone = _.clone(o, true);
            isSet = _B.setValueAtPath(oClone, "$/bundle/dependencies/variableNames/hi", {
                joke: {
                    joke2: "JOKER"
                }
            });
            expect(oClone).to.deep.equal(o);
            return expect(isSet).to.be["false"];
        });
        return describe("forceCreate:", function() {
            it("create new objects for inexistent paths, adding object properties", function() {
                var isSet, oClone;
                oClone = _.clone(o, true);
                isSet = _B.setValueAtPath(oClone, "$.bundle.dependencies.moreDeps.evenMoreDeps.", {
                    property: "just_a_String"
                }, true, ".");
                expect(oClone).to.deep.equal({
                    $: {
                        bundle: {
                            anArray: [ "arrayItem1", 2, {
                                arrayItem3: 3
                            } ],
                            dependencies: {
                                variableNames: "Bingo",
                                moreDeps: {
                                    evenMoreDeps: {
                                        property: "just_a_String"
                                    }
                                }
                            }
                        }
                    }
                });
                return expect(isSet).to.be["true"];
            });
            it("create new objects, overwritting primitives", function() {
                var isSet, oClone;
                oClone = _.clone(o, true);
                isSet = _B.setValueAtPath(oClone, "$/bundle/dependencies/variableNames/newKey", {
                    joke: {
                        joke2: "JOKER"
                    }
                }, true);
                expect(oClone).to.deep.equal({
                    $: {
                        bundle: {
                            anArray: [ "arrayItem1", 2, {
                                arrayItem3: 3
                            } ],
                            dependencies: {
                                variableNames: {
                                    newKey: {
                                        joke: {
                                            joke2: "JOKER"
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                return expect(isSet).to.be["true"];
            });
            return it("create new objects, preserving `oldValue`", function() {
                var isSet, oClone;
                oClone = _.clone(o, true);
                isSet = _B.setValueAtPath(oClone, "$/bundle/dependencies/variableNames/newKey/anotherNewKey", {
                    joke: {
                        joke2: "JOKER"
                    }
                }, "_oldValue");
                expect(oClone).to.deep.equal({
                    $: {
                        bundle: {
                            anArray: [ "arrayItem1", 2, {
                                arrayItem3: 3
                            } ],
                            dependencies: {
                                variableNames: {
                                    _oldValue: "Bingo",
                                    newKey: {
                                        anotherNewKey: {
                                            joke: {
                                                joke2: "JOKER"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                return expect(isSet).to.be["true"];
            });
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();