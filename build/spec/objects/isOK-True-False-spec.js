// Generated by uRequire v0.7.0-beta8 - template: 'UMDplain' 
(function () {
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (factory) {
  if (typeof exports === 'object') {
    module.exports = factory(require, exports, module, require('lodash'), require('chai'), require('uberscore'), require('../spec-data'), require('../specHelpers'));
} else if (typeof define === 'function' && define.amd) { define(['require', 'exports', 'module', 'lodash', 'chai', 'uberscore', '../spec-data', '../specHelpers'], factory) } else throw new Error('uRequire: Loading UMD module as <script>, without `build.noLoaderUMD`');
}).call(this, function (require, exports, module, _, chai, _B, data, spH) {
  

var equal = spH["equal"],notEqual = spH["notEqual"],ok = spH["ok"],notOk = spH["notOk"],tru = spH["tru"],fals = spH["fals"],deepEqual = spH["deepEqual"],notDeepEqual = spH["notDeepEqual"],exact = spH["exact"],notExact = spH["notExact"],iqual = spH["iqual"],notIqual = spH["notIqual"],ixact = spH["ixact"],notIxact = spH["notIxact"],like = spH["like"],notLike = spH["notLike"],likeBA = spH["likeBA"],notLikeBA = spH["notLikeBA"],equalSet = spH["equalSet"],notEqualSet = spH["notEqualSet"];
var expect = chai["expect"];


var l = new _B.Logger('objects/isOK-True-False-spec.js');

var falsies, truthies;
truthies = [
  {},
  [],
  "aa",
  1,
  /./
];
falsies = [
  "",
  0,
  null,
  void 0
];
describe("_B.isOk:", function () {
  var v, _fn, _i, _j, _len, _len1, _ref, _ref1, _results;
  _ref = truthies.concat(new Boolean(false));
  _fn = function (v) {
    return it("with truthy type:'" + _B.type(v) + "', value:'" + v + "'", function () {
      return ok(_B.isOk(v));
    });
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    v = _ref[_i];
    _fn(v);
  }
  _ref1 = falsies.concat(false);
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    v = _ref1[_j];
    _results.push(function (v) {
      return it("with falsey type:'" + _B.type(v) + "', value:'" + v + "'", function () {
        return notOk(_B.isOk(v));
      });
    }(v));
  }
  return _results;
});
describe("_B.isTrue:", function () {
  describe("true only with boolean true:", function () {
    var v, _i, _len, _ref, _results;
    _ref = [
      true,
      new Boolean(true)
    ];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(function (v) {
        return it("type:'" + _B.type(v) + "', value:'" + v + "'", function () {
          return tru(_B.isTrue(v));
        });
      }(v));
    }
    return _results;
  });
  return describe("false with any truthy:", function () {
    var v, _i, _len, _ref, _results;
    _ref = truthies.concat(new Boolean(false));
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(function (v) {
        return it("type:'" + _B.type(v) + "', value:'" + v + "'", function () {
          return fals(_B.isTrue(v));
        });
      }(v));
    }
    return _results;
  });
});
describe("_B.isFalse:", function () {
  describe("false *only with boolean false:", function () {
    var v, _i, _len, _ref, _results;
    _ref = [
      false,
      new Boolean(false)
    ];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(function (v) {
        return it("type:'" + _B.type(v) + "', value:'" + v + "'", function () {
          return tru(_B.isFalse(v));
        });
      }(v));
    }
    return _results;
  });
  return describe("false with any falsies:", function () {
    var v, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = falsies.length; _i < _len; _i++) {
      v = falsies[_i];
      _results.push(function (v) {
        return it("type: '" + _B.type(v) + "', value:'" + v + "'", function () {
          return fals(_B.isFalse(v));
        });
      }(v));
    }
    return _results;
  });
});

return module.exports;

})
}).call(this)