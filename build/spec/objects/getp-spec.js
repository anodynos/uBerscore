// Generated by uRequire v0.4.2
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('objects/getp-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module, nr.require('lodash'), nr.require('agreement/isAgree'), nr.require('chai'), nr.require('uberscore'), nr.require('../spec-data'));
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'lodash', 'agreement/isAgree', 'chai', 'uberscore', '../spec-data'], factory);
 }
})(this,function (require, exports, module, _, isAgree, chai, _B, data) {
  // uRequire: start body of original nodejs module
var assert, expect;

assert = chai.assert;

expect = chai.expect;

describe("objects/getp ", function() {
    var o;
    o = {
        $: {
            bundle: {
                anArray: [ "arrayItem1", 2, {
                    arrayItem3: 3
                } ],
                "*": {
                    IamA: "defaultValue"
                },
                dependencies: {
                    depsVars: "Bingo"
                },
                someOtherKey: {
                    "*": {
                        notReached: "defaultValue"
                    },
                    "#": {
                        IamA: {
                            Stop: "Value"
                        }
                    }
                },
                leadingToTerminate: {
                    "|": {
                        terminated: "terminated value"
                    },
                    someKey: {
                        someOtherKey: "someValue"
                    }
                }
            }
        }
    };
    describe("basic tests - retrieving value: ", function() {
        it("primitive", function() {
            return expect(_B.getp(o, "$/bundle/dependencies/depsVars")).to.deep.equal("Bingo");
        });
        it("object", function() {
            return expect(_B.getp(o, "$/bundle/dependencies")).to.deep.equal({
                depsVars: "Bingo"
            });
        });
        it("object, with sep at end", function() {
            return expect(_B.getp(o, "$/bundle/dependencies/")).to.deep.equal({
                depsVars: "Bingo"
            });
        });
        it("array item (3rd)", function() {
            return expect(_B.getp(o, "$/bundle/anArray/2/")).to.deep.equal({
                arrayItem3: 3
            });
        });
        it("property of (3rd) array item ", function() {
            return expect(_B.getp(o, "$/bundle/anArray/2/arrayItem3")).to.deep.equal(3);
        });
        it("object, with alternative sep", function() {
            return expect(_B.getp(o, "$.bundle.dependencies.", {
                separator: "."
            })).to.deep.equal({
                depsVars: "Bingo"
            });
        });
        it("undefined, for non existent key", function() {
            return expect(_B.getp(o, "$/bundle/dependencies/depsVars/notfound")).to.deep.equal(void 0);
        });
        return it("undefined, for path of inexistent keys, with alt sep", function() {
            return expect(_B.getp(o, "$>bundle>dependencies>depsVars>notfound>stillNotFound>", {
                separator: ">"
            })).to.deep.equal(void 0);
        });
    });
    describe("retrieving value using *defaultKey*:", function() {
        it("non existent key, but a defaultKey in its place", function() {
            return expect(_B.getp(o, "$/bundle/someNonFoundKey/")).to.deep.equal({
                IamA: "defaultValue"
            });
        });
        it("non existent key, but a defaultKey in its place, goin on", function() {
            return expect(_B.getp(o, "$/bundle/someNonFoundKey/IamA")).to.deep.equal("defaultValue");
        });
        return it("non existent key, but a defaultKey in its palce, went too far", function() {
            return expect(_B.getp(o, "$/bundle/someNonFoundKey/tooFar")).to.deep.equal(void 0);
        });
    });
    describe("retrieving value using *stopKey*:", function() {
        it("non existent key, but a stopKey key in its place - defaultKey is ignored", function() {
            return expect(_B.getp(o, "$/bundle/someOtherKey/someNonFoundKey/")).to.deep.equal({
                IamA: {
                    Stop: "Value"
                }
            });
        });
        it("non existent key, a terminal in its place, going on dosn't matter", function() {
            return expect(_B.getp(o, "$/bundle/someOtherKey/someNonFoundKey/notReached")).to.deep.equal({
                IamA: {
                    Stop: "Value"
                }
            });
        });
        return it("non existent key, a stopKey key in its place, going too far dosn't matter", function() {
            return expect(_B.getp(o, "$/bundle/someOtherKey/someNonFoundKey/goingTooFar/IsIgnored/")).to.deep.equal({
                IamA: {
                    Stop: "Value"
                }
            });
        });
    });
    describe("retrieving value using *terminateKey*:", function() {
        it("non existent key, but a terminateKey in its place, returns {terminateKey:value}", function() {
            return expect(_B.getp(o, "$/bundle/leadingToTerminate/someNonFoundKey/", {
                terminateKey: "|"
            })).to.deep.equal({
                "|": {
                    terminated: "terminated value"
                }
            });
        });
        return it("existent key path, but found a terminateKey while walking, returns {terminateKey:value}", function() {
            return expect(_B.getp(o, "$/bundle/leadingToTerminate/someKey/someOtherKey", {
                terminateKey: "|"
            })).to.deep.equal({
                "|": {
                    terminated: "terminated value"
                }
            });
        });
    });
    return describe("retrieving value using *isReturnLast*, returns last value found:", function() {
        return it("non existent key, returns last value", function() {
            return expect(_B.getp(o, "$/bundle/dependencies/someNonFoundKey/", {
                isReturnLast: true
            })).to.deep.equal({
                depsVars: "Bingo"
            });
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();