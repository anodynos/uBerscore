// Generated by uRequire v0.3.0alpha18
(function () {
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;
(function (root,factory) {
  if (typeof exports === 'object') {
   var nr = new (require('urequire').NodeRequirer) ('deepExtend-spec', module, __dirname, '.');
   module.exports = factory(nr.require, exports, module);
 } else if (typeof define === 'function' && define.amd) {
     define(['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], factory);
 }
})(this,function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, bundleDefaults, chai, data, expect, globalDefaults, projectDefaults, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

projectDefaults = _.clone(data.projectDefaults, true);

globalDefaults = _.clone(data.globalDefaults, true);

bundleDefaults = _.clone(data.bundleDefaults, true);

describe("deepExtend :", function() {
    it("parentRE allows you to concatenate strings.", function() {
        return expect(_B.deepExtend({
            url: "www.example.com"
        }, {
            url: "http://${_}/path/to/file.html"
        })).to.deep.equal({
            url: "http://www.example.com/path/to/file.html"
        });
    });
    it("parentRE also acts as a placeholder, which can be useful when you need to change one value in an array, while leaving the others untouched", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", "${_}", false, "${_}", "${_}" ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("parentRE also acts as a placeholder, #2 ", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false, "${_}", [] ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("parentRE also acts as a placeholder, #3", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("Array order is important.", function() {
        return expect(_B.deepExtend([ 1, 2, 3, 4 ], [ 1, 4, 3, 2 ])).to.deep.equal([ 1, 4, 3, 2 ]);
    });
    return it("You can remove an array element set in a parent object by setting the same index value to null in a child object.", function() {
        return expect(_B.deepExtend({
            arr: [ 1, 2, 3, 4 ]
        }, {
            arr: [ "${_}", null ]
        })).to.deep.equal({
            arr: [ 1, 3, 4 ]
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
})
})();