/**
 * uberscore - version 0.0.17
 * Compiled on 2014-10-19 6:57:35
 * git://github.com/anodynos/uBerscore
 * Copyright(c) 2014 Agelos Pikoulas (agelos.pikoulas@gmail.com )
 * Licensed MIT http://www.opensource.org/licenses/mit-license.php
 */

// Generated by uRequire v0.7.0-beta5 - template: 'combined' 
// Combined template optimized with RequireJS/r.js v2.1.15 & almond.
(function (global, window){
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;

  var __nodeRequire = (__isNode ? require :
      function(dep){
        throw new Error("uRequire detected missing dependency: '" + dep + "' - in a non-nodejs runtime. All it's binding variables were 'undefined'.")
      });

  var __bind = function (fn, me) {
      return function () {
        return fn.apply(me, arguments);
      };
    }, __hasProp = {}.hasOwnProperty, __extends = function (child, parent) {
      for (var key in parent) {
        if (__hasProp.call(parent, key))
          child[key] = parent[key];
      }
      function ctor() {
        this.constructor = child;
      }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
      child.__super__ = parent.prototype;
      return child;
    }, __slice = [].slice, __indexOf = [].indexOf || function (item) {
      for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item)
          return i;
      }
      return -1;
    }, loggerPath;
  loggerPath = "./../";
var bundleFactory = function(_) {/**
 * @license almond 0.3.0 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('util',[],function () {
  if (__isNode) {
  return __nodeRequire('util');
} else {
  throw new Error("uRequire: trying to access unbound / excluded 'node-only' dependency 'util') on browser");
}
});
define('agreement/isAgree',['require'],function (require) {
  

return function (o, agreement) {
    if (_.isRegExp(agreement)) {
      return agreement.test(o + "");
    } else {
      if (_.isFunction(agreement)) {
        return agreement(o);
      } else {
        if (agreement === void 0) {
          return true;
        } else {
          if (_.isEqual(o, agreement)) {
            return true;
          } else {
            return o + "" === agreement + "";
          }
        }
      }
    }
  };


});
define('types/type',['require','exports','module'],function (require, exports, module) {
  

var type, __indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
type = function (o, isShort) {
  var long, shorts, _ref;
  if (isShort == null) {
    isShort = false;
  }
  _ref = type.TYPES;
  for (long in _ref) {
    shorts = _ref[long];
    if (_["is" + long](o)) {
      if (isShort) {
        return shorts[0];
      } else {
        return long;
      }
    }
  }
  return "UNKNOWN";
};
type.toShort = function (aType) {
  var longType, shorts, _ref;
  if (type.TYPES[aType]) {
    return type.TYPES[aType][0];
  } else {
    _ref = type.TYPES;
    for (longType in _ref) {
      shorts = _ref[longType];
      if (__indexOf.call(shorts, aType) >= 0) {
        return shorts[0];
      }
    }
  }
};
type.toLong = function (aType) {
  var longType, shorts, _ref;
  if (type.TYPES[aType]) {
    return aType;
  } else {
    _ref = type.TYPES;
    for (longType in _ref) {
      shorts = _ref[longType];
      if (__indexOf.call(shorts, aType) >= 0) {
        return longType;
      }
    }
  }
};
type.areEqual = function (aType, bType) {
  return type.toShort(aType) === type.toShort(bType);
};
type.isType = function (aType) {
  var _ref;
  return _ref = type.toLong(aType), __indexOf.call(_.keys(type.TYPES), _ref) >= 0;
};
type.TYPES = {
  "Arguments": [
    "args",
    "..."
  ],
  "Array": [
    "[]",
    "A"
  ],
  "Function": [
    "->",
    "F"
  ],
  "String": [
    "''",
    "S",
    "\"\""
  ],
  "Date": ["D"],
  "RegExp": [
    "//",
    "R"
  ],
  "Number": ["N"],
  "Boolean": ["B"],
  "Object": [
    "{}",
    "O"
  ],
  "Null": [
    "null",
    "-"
  ],
  "Undefined": [
    "U",
    "void",
    "?"
  ]
};
module.exports = type;

return module.exports;

});
define('objects/getp',['require','exports','module'],function (require, exports, module) {
  

var defaultOptions, getp;
defaultOptions = {
  separator: "/",
  stopKey: "#",
  terminateKey: void 0,
  defaultKey: "*",
  isReturnLast: false
};
getp = function (o, path, options) {
  var lastO, op, p, returnWithTerminator, _i, _len;
  if (options == null) {
    options = defaultOptions;
  }
  if (options !== defaultOptions) {
    _.defaults(options, defaultOptions);
  }
  if (!_.isArray(path)) {
    if (_.isString(path)) {
      path = path.split(options.separator);
    } else {
      if (_.isNumber(path)) {
        path = [path + ""];
      } else {
        if (path === void 0) {
          return o;
        } else {
          throw "_B.getp Error: invalid path: " + path;
        }
      }
    }
  }
  for (_i = 0, _len = path.length; _i < _len; _i++) {
    p = path[_i];
    if (!(p + "")) {
      continue;
    }
    if (o !== void 0) {
      lastO = o;
    }
    if (!_.isObject(o)) {
      o = void 0;
      break;
    }
    if (options.terminateKey) {
      if (o[options.terminateKey]) {
        returnWithTerminator = {};
        returnWithTerminator[options.terminateKey] = o[options.terminateKey];
        o = returnWithTerminator;
        break;
      }
    }
    if ((op = o[p]) !== void 0) {
      o = op;
    } else {
      if (options.stopKey && o[options.stopKey] !== void 0) {
        o = o[options.stopKey];
        break;
      } else {
        o = options.defaultKey && o[options.defaultKey] ? o[options.defaultKey] : void 0;
      }
    }
  }
  if (o === void 0) {
    if (options.isReturnLast) {
      return lastO;
    } else {
      return o;
    }
  } else {
    return o;
  }
};
module.exports = getp;

return module.exports;

});
define('types/isHash',['require', './type'], function (require, type) {
  

return function (o) {
    return type(o) === "Object";
  };


});
define('utils/CoffeeUtils',['require'],function (require) {
  

var CoffeeUtils;
  return CoffeeUtils = function () {
    function CoffeeUtils() {
    }
    CoffeeUtils.prototype.getClasses = function (instOrClass, _classes) {
      if (_classes == null) {
        _classes = [];
      }
      if (!instOrClass) {
        instOrClass = this;
      }
      if (typeof instOrClass !== "function") {
        instOrClass = instOrClass.constructor;
      }
      _classes.unshift(instOrClass);
      if (instOrClass.__super__) {
        return this.getClasses(instOrClass.__super__.constructor, _classes);
      } else {
        return _classes;
      }
    };
    CoffeeUtils.getClasses = CoffeeUtils.prototype.getClasses;
    return CoffeeUtils;
  }();


});
define('utils/subclass',['require','exports','module'],function (require, exports, module) {
  

var subclass;
subclass = module.exports = function (protoProps, staticProps) {
  var Surrogate, child, parent;
  parent = this;
  child = void 0;
  if (protoProps && _.has(protoProps, "constructor")) {
    child = protoProps.constructor;
  } else {
    child = function () {
      return parent.apply(this, arguments);
    };
  }
  _.extend(child, parent, staticProps);
  Surrogate = function () {
    this.constructor = child;
    return this;
  };
  Surrogate.prototype = parent.prototype;
  child.prototype = new Surrogate();
  if (protoProps) {
    _.extend(child.prototype, protoProps);
  }
  child.__super__ = parent.prototype;
  return child;
};

return module.exports;

});
define('collections/array/arrayize',['require', 'exports', 'module', '../../agreement/isAgree'], function (require, exports, module) {
  

var isAgree, arrayize;
isAgree = require("../../agreement/isAgree");
arrayize = function (item) {
  if (_.isArray(item)) {
    return item;
  } else {
    if (_.isUndefined(item) || _.isNull(item)) {
      return [];
    } else {
      return [item];
    }
  }
};
module.exports = arrayize;

return module.exports;

});
define('agreement/inAgreements',['require', 'exports', 'module', '../collections/array/arrayize'], function (require, exports, module) {
  

var arrayize;
arrayize = require("../collections/array/arrayize");
module.exports = function (o, agreements) {
  var agr, _i, _len;
  agreements = arrayize(agreements);
  if (_.isEmpty(agreements)) {
    return false;
  } else {
    for (_i = 0, _len = agreements.length; _i < _len; _i++) {
      agr = agreements[_i];
      if (isAgree(o, agr)) {
        return true;
      }
    }
  }
  return false;
};

return module.exports;

});
define('objects/setp',['require','exports','module'],function (require, exports, module) {
  

var defaultOptions, setp;
defaultOptions = {
  separator: "/",
  create: true,
  overwrite: false
};
setp = function (o, path, val, options) {
  var newObj, p, pi, _i, _len;
  if (options == null) {
    options = defaultOptions;
  }
  if (options !== defaultOptions) {
    _.defaults(options, defaultOptions);
  }
  if (!_.isArray(path)) {
    if (_.isString(path)) {
      path = path.split(options.separator);
      path = function () {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = path.length; _i < _len; _i++) {
          p = path[_i];
          if (p) {
            _results.push(p);
          }
        }
        return _results;
      }();
    } else {
      throw "_B.setp Error: invalid path: " + path + ".\nUse either an Array, eg ['path1', 'path2']\nor `separator`-ed String, eg 'path1.path2'";
    }
  }
  if (!_.isObject(o)) {
    throw "_B.setp Error: invalid object: " + o;
  }
  for (pi = _i = 0, _len = path.length; _i < _len; pi = ++_i) {
    p = path[pi];
    if (!_.isObject(o[p])) {
      if (options.create || options.overwrite) {
        newObj = null;
        if (_.isUndefined(o[p])) {
          newObj = {};
        } else {
          if (options.overwrite) {
            newObj = {};
            if (_.isString(options.overwrite)) {
              newObj[options.overwrite] = o[p];
            }
          }
        }
        if (newObj) {
          o[p] = newObj;
        }
      } else {
        if (_.isUndefined(o[p])) {
          return false;
        }
      }
    }
    if (pi < path.length - 1) {
      o = o[p];
    }
  }
  if (_.isObject(o)) {
    o[p] = val;
    return true;
  } else {
    return false;
  }
};
module.exports = setp;

return module.exports;

});
define('Logger',['require', 'exports', 'module', './agreement/inAgreements', './objects/setp', './objects/getp'], function (require, exports, module) {
  

var Logger, getp, inAgreements, setp, __slice = [].slice;
inAgreements = require("./agreement/inAgreements");
setp = require("./objects/setp");
getp = require("./objects/getp");
Logger = function () {
  var arrayizeDebugPath, countNewLines, getALog, key, val, _ref;
  function Logger(debugPath, debugLevel) {
    if (debugPath == null) {
      debugPath = [];
    }
    this.debugLevel = debugLevel;
    this.setDebugPath(debugPath);
    Logger.loggerCount = (Logger.loggerCount || 0) + 1;
  }
  getALog = function (baseMsg, color, cons) {
    return function () {
      var arg, args, err, i, newLines, retString, title, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_.isString(args[0])) {
        newLines = countNewLines(args[0]);
        args[0] = args[0].slice(newLines);
      }
      args = function () {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(Logger.prettify(arg));
        }
        return _results;
      }();
      title = "" + (_.isEmpty(typeof this !== "undefined" && this !== null ? this.debugPath : void 0) ? "Logger" + Logger.loggerCount + " " : "[" + this.debugPath.join("/") + "] ") + baseMsg;
      if (title) {
        title = title + ":";
      }
      args.unshift(title);
      if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
        args.unshift("" + color);
      }
      args.unshift(function () {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= newLines; i = _i += 1) {
          _results.push("\n");
        }
        return _results;
      }().join(""));
      if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
        args.push("[0m");
      }
      cons.apply(console, args);
      try {
        return args.join("");
      } catch (_error) {
        err = _error;
        retString = "";
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          retString += Object.prototype.toString(arg);
        }
        return retString;
      }
    };
  };
  countNewLines = function (str) {
    var newLines;
    newLines = 0;
    while (str[newLines] === "\n") {
      newLines++;
    }
    return newLines;
  };
  arrayizeDebugPath = function (debugPath) {
    var path, _i, _len, _ref, _results;
    if (_.isString(debugPath)) {
      _ref = debugPath.split("/");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        if (path) {
          _results.push(path);
        }
      }
      return _results;
    } else if (_.isUndefined(debugPath)) {
      return [];
    } else if (_.isArray(debugPath)) {
      return debugPath;
    } else {
      return [debugPath];
    }
  };
  Logger.prototype.setDebugPath = function (debugPath) {
    return this.debugPath = arrayizeDebugPath(debugPath);
  };
  Logger.addDebugPathLevel = function (debugPath, debugLevel) {
    if (!_.isNaN(debugLevel * 1)) {
      debugPath = _.clone(arrayizeDebugPath(debugPath));
      debugPath.unshift("debugPathsLevels");
      debugPath.push("_level");
      return setp(Logger, debugPath, debugLevel * 1, { create: true });
    } else {
      throw new Error("debugLevel '" + debugLevel + "' isNaN (Not a Number or not Number parsable)");
    }
  };
  Logger.prototype.getDebugPathLevel = function (levelPath) {
    var lastPath, levPaths, val;
    if (levelPath == null) {
      levelPath = this.debugPath;
    }
    levPaths = _.clone(levelPath);
    val = getp(Logger.debugPathsLevels, levPaths);
    lastPath = levPaths.pop();
    while (_.isUndefined(val != null ? val._level : void 0) && lastPath) {
      val = getp(Logger.debugPathsLevels, levPaths);
      lastPath = levPaths.pop();
    }
    return val != null ? val._level : void 0;
  };
  Logger.prototype.isDebug = function (level) {
    var pathLevel;
    if (_.isNumber(Logger.maxDebugLevel)) {
      if (level > Logger.maxDebugLevel) {
        return false;
      }
    }
    if (_.isNumber(this.debugLevel)) {
      if (level > this.debugLevel) {
        return false;
      }
    } else {
      if (_.isNumber(pathLevel = this.getDebugPathLevel())) {
        if (level > pathLevel) {
          return false;
        }
      } else {
        if (level > 1) {
          return false;
        }
      }
    }
    return true;
  };
  Logger.prototype.deb = function () {
    var debugLog;
    debugLog = getALog("DEBUG", "[35m", console.log);
    return function () {
      var i, level, msgs, newLines, _ref;
      level = arguments[0], msgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isEmpty(msgs) && _.isNumber(level)) {
        return this.isDebug(this.lastDebugLevelCheck = level);
      }
      if (!_.isNumber(level)) {
        msgs.unshift(level);
        level = (_ref = this.lastDebugLevelCheck) != null ? _ref : 1;
        msgs.unshift(this.lastDebugLevelCheck ? "(?" + this.lastDebugLevelCheck + ")" : "(!1)");
      } else {
        msgs.unshift("(" + level + ")");
      }
      if (_.isString(msgs[1])) {
        newLines = countNewLines(msgs[1]);
        msgs[1] = msgs[1].slice(newLines);
        msgs[0] = function () {
          var _i, _results;
          _results = [];
          for (i = _i = 1; _i <= newLines; i = _i += 1) {
            _results.push("\n");
          }
          return _results;
        }().join("") + msgs[0];
      }
      delete this.lastDebugLevelCheck;
      if (this.isDebug(level)) {
        return debugLog.apply(this, msgs);
      }
    };
  }();
  Logger.prototype.debug = Logger.prototype.deb;
  Logger.prettify = typeof __isNode !== "undefined" && __isNode !== null && __isNode ? function (inspect) {
    var nodeVerLE_092;
    nodeVerLE_092 = function () {
      var i, v, x, _i, _len, _ref;
      v = [];
      _ref = process.version.slice(1).split(".");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        x = _ref[i];
        v[i] = x * 1;
      }
      if (v[0] > 0 || v[1] > 9) {
        return false;
      } else {
        if (v[1] === 9) {
          if (v[2] <= 2) {
            return true;
          } else {
            return false;
          }
        } else {
          return true;
        }
      }
    }();
    return function (o) {
      var pretty;
      pretty = nodeVerLE_092 ? "[0m" + inspect(o, false, null, true) : "[0m" + inspect(o, {
        showHidden: false,
        depth: null,
        colors: true
      });
      if (_.isArray(o)) {
        pretty.replace(/\n/g, "");
      }
      if (inAgreements(o, [
          _.isObject,
          _.isRegExp
        ])) {
        return pretty;
      } else {
        return o;
      }
    };
  }(require("util").inspect) : function (o) {
    return o;
  };
  Logger.prototype.prettify = Logger.prettify;
  Logger.prototype.err = getALog("ERROR", "[31m", console.error);
  Logger.prototype.er = getALog("ERRor", "[31m", console.log);
  Logger.prototype.warn = getALog("WARNING", "[33m", console.log);
  Logger.prototype.verbose = getALog("", "[36m", console.log);
  Logger.prototype.ver = Logger.prototype.verbose;
  Logger.prototype.ok = getALog("", "[32m", console.log);
  Logger.prototype.log = getALog("", "[0m", console.log);
  Logger.logger = new Logger("DefaultLogger");
  _ref = Logger.prototype;
  for (key in _ref) {
    val = _ref[key];
    if (_.isFunction(val)) {
      Logger[key] = _.bind(val, Logger.logger);
    } else {
      Logger[key] = val;
    }
  }
  return Logger;
}();
module.exports = Logger;

return module.exports;

});
define('blending/Blender',['require', '../types/type', '../objects/getp', '../types/isHash', '../utils/CoffeeUtils', '../utils/subclass', '../Logger'], function (require, type, getp, isHash, CoffeeUtils) {
  

var ActionResult, Blender;
  isHash = require("../types/isHash");
  ActionResult = function () {
    function ActionResult(name) {
      this.name = name;
    }
    return ActionResult;
  }();
  return Blender = function (_super) {
    __extends(Blender, _super);
    Blender.subclass = require("../utils/subclass");
    Blender.prototype.inherited = false;
    Blender.prototype.copyProto = false;
    Blender.prototype.pathTerminator = "|";
    Blender.prototype.isExactPath = true;
    Blender.prototype.pathSeparator = ":";
    Blender.prototype.debugLevel = 0;
    Blender.prototype.defaultBBOrder = [
      "src",
      "dst"
    ];
    function Blender() {
      var aClass, bb, bbi, blenderBehaviors, dbb, lastDBB, typeName, _i, _j, _len, _ref, _ref1;
      blenderBehaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.blenderBehaviors = blenderBehaviors;
      this.write = __bind(this.write, this);
      this._blend = __bind(this._blend, this);
      this.blend = __bind(this.blend, this);
      this.getNextAction = __bind(this.getNextAction, this);
      this.getAction = __bind(this.getAction, this);
      this.l = new (require("../Logger"))("uberscore/Blender", this.debugLevel);
      if (_.isArray(this.blenderBehaviors[0])) {
        if (this.l.deb(20)) {
          this.l.debug("We might have options:", this.blenderBehaviors);
        }
        if (isHash(this.blenderBehaviors[1])) {
          _.extend(this, this.blenderBehaviors[1]);
        }
        this.blenderBehaviors = this.blenderBehaviors[0];
      }
      _ref = this.getClasses();
      for (_i = _ref.length - 1; _i >= 0; _i += -1) {
        aClass = _ref[_i];
        if (aClass.behavior) {
          this.blenderBehaviors.push(aClass.behavior);
        }
      }
      lastDBB = _.last(this.blenderBehaviors);
      for (typeName in lastDBB) {
        dbb = lastDBB[typeName];
        if (_.isUndefined(dbb["*"])) {
          dbb["*"] || (dbb["*"] = lastDBB["*"]["*"]);
        }
      }
      _ref1 = this.blenderBehaviors;
      for (bbi = _j = 0, _len = _ref1.length; _j < _len; bbi = ++_j) {
        bb = _ref1[bbi];
        this.blenderBehaviors[bbi] = this.adjustBlenderBehavior(bb);
      }
      this.path = [];
    }
    Blender.prototype.adjustBlenderBehavior = function (blenderBehavior) {
      blenderBehavior.order || (blenderBehavior.order = this.defaultBBOrder);
      return this._adjustBbSrcDstPathSpec(blenderBehavior, blenderBehavior.order);
    };
    Blender.prototype._adjustBbSrcDstPathSpec = function (bbSrcDstPathSpec, orderRemaining) {
      var bbOrder, i, key, newV, p, path, pathItems, short, val, _i, _len;
      if (orderRemaining.length > 0) {
        bbOrder = orderRemaining[0];
        if (bbOrder === "path") {
          for (key in bbSrcDstPathSpec) {
            val = bbSrcDstPathSpec[key];
            if (key === this.pathTerminator) {
              if (isHash(val)) {
                this._adjustBbSrcDstPathSpec(val, orderRemaining.slice(1));
              }
            } else {
              pathItems = this.pathSeparator ? function () {
                var _i, _len, _ref, _results;
                _ref = key.split(this.pathSeparator);
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  path = _ref[_i];
                  if (path) {
                    _results.push(path.trim());
                  }
                }
                return _results;
              }.call(this) : [];
              if (pathItems.length > 1) {
                newV = bbSrcDstPathSpec;
                for (i = _i = 0, _len = pathItems.length; _i < _len; i = ++_i) {
                  p = pathItems[i];
                  newV[p] || (newV[p] = {});
                  if (i < pathItems.length - 1) {
                    newV = newV[p];
                  } else {
                    newV[p] = val;
                  }
                }
                delete bbSrcDstPathSpec[key];
              } else {
                if (pathItems[0] && key !== pathItems[0]) {
                  bbSrcDstPathSpec[pathItems[0]] = val;
                  delete bbSrcDstPathSpec[key];
                }
              }
              if (isHash(val)) {
                this._adjustBbSrcDstPathSpec(val, orderRemaining);
              }
            }
          }
        } else {
          for (key in bbSrcDstPathSpec) {
            val = bbSrcDstPathSpec[key];
            if (type.isType(key)) {
              short = type.toShort(key);
              if (short && key !== short) {
                bbSrcDstPathSpec[short] = bbSrcDstPathSpec[key];
                delete bbSrcDstPathSpec[key];
              }
            }
            if (isHash(val)) {
              this._adjustBbSrcDstPathSpec(val, orderRemaining.slice(1));
            }
          }
        }
      }
      return bbSrcDstPathSpec;
    };
    Blender.prototype.getAction = function (actionName, belowBlenderBehaviorIndex) {
      var bb, bbi, _i, _len, _ref;
      if (belowBlenderBehaviorIndex == null) {
        belowBlenderBehaviorIndex = this.currentBlenderBehaviorIndex;
      }
      _ref = this.blenderBehaviors;
      for (bbi = _i = 0, _len = _ref.length; _i < _len; bbi = ++_i) {
        bb = _ref[bbi];
        if (bbi >= belowBlenderBehaviorIndex) {
          if (_.isFunction(bb[actionName])) {
            return _.bind(bb[actionName], this);
          }
        }
      }
      if (_.isFunction(this[actionName])) {
        return _.bind(this[actionName], this);
      } else {
        throw this.l.err("_B.Blender.blend: Error: Invalid BlenderBehavior `actionName` = ", actionName, " - no Function by that name is found in a preceding BlenderBehavior or Blender it self.", " belowBlenderBehaviorIndex=" + belowBlenderBehaviorIndex, " @currentBlenderBehaviorIndex=" + this.currentBlenderBehaviorIndex, " @blenderBehaviors=", this.blenderBehaviors);
      }
    };
    Blender.prototype.getNextAction = function (blenderBehavior, bbi, bbOrderValues) {
      var bbOrder, currentBBSrcDstSpec, nextBBSrcDstSpec, _i, _len, _ref;
      currentBBSrcDstSpec = blenderBehavior;
      _ref = blenderBehavior.order;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bbOrder = _ref[_i];
        if (currentBBSrcDstSpec === void 0 || _.isString(currentBBSrcDstSpec) || _.isFunction(currentBBSrcDstSpec) || currentBBSrcDstSpec instanceof ActionResult) {
          break;
        }
        if (this.l.deb(80)) {
          this.l.debug("At bbOrder='" + bbOrder + "'", bbOrder === "path" ? " @path=" + this.l.prettify(this.path) : " bbOrderValues[bbOrder]='" + bbOrderValues[bbOrder] + "'", " currentBBSrcDstSpec =\n", currentBBSrcDstSpec);
        }
        if (_.isUndefined(bbOrderValues[bbOrder])) {
          throw this.l.err("_.Blender.blend: Error: Invalid BlenderBehavior `order` '" + bbOrder + "',\nwhile reading BlenderBehavior #" + bbi + " :\n", this.blenderBehaviors[bbi], "\n\nDefault BlenderBehavior order is ", this.defaultBBOrder);
        } else {
          if (bbOrder === "path") {
            nextBBSrcDstSpec = getp(currentBBSrcDstSpec, this.path.slice(1), { terminateKey: this.isExactPath ? void 0 : this.pathTerminator });
            if (_.isObject(nextBBSrcDstSpec)) {
              nextBBSrcDstSpec = nextBBSrcDstSpec["|"];
            }
          } else {
            nextBBSrcDstSpec = currentBBSrcDstSpec[bbOrderValues[bbOrder]] || currentBBSrcDstSpec["*"];
          }
          if (this.l.deb(70)) {
            this.l.debug(function () {
              if (nextBBSrcDstSpec === void 0) {
                return "Found NO nextBBSrcDstSpec - NEXT BlenderBehavior";
              } else {
                if (bbOrder === "path") {
                  return "Got out of the path, having something!";
                } else if (nextBBSrcDstSpec === currentBBSrcDstSpec[bbOrderValues[bbOrder]]) {
                  return "Found ";
                } else if (nextBBSrcDstSpec === currentBBSrcDstSpec["*"]) {
                  return "Found NOT exact nextBBSrcDstSpec, but a '*'";
                } else if (_.isString(nextBBSrcDstSpec)) {
                  return "Found a String ";
                } else if (_.isFunction(nextBBSrcDstSpec)) {
                  return "Found a Function ";
                } else if (nextBBSrcDstSpec instanceof ActionResult) {
                  return "Found an ActionResult";
                } else {
                  throw "Unknown nextBBSrcDstSpec = " + this.l.prettify(nextBBSrcDstSpec);
                }
              }
            }.call(this), " \nbbOrder='" + bbOrder + "'", " \nbbOrderValues[bbOrder]='" + bbOrderValues[bbOrder] + "'", " \nnextBBSrcDstSpec=\n", nextBBSrcDstSpec);
          }
          currentBBSrcDstSpec = nextBBSrcDstSpec;
        }
      }
      return currentBBSrcDstSpec;
    };
    Blender.prototype.blend = function () {
      var dst, dstObject, sources, src, _i, _len;
      dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isEmpty(this.path)) {
        if (_.isUndefined(sources) || _.isEmpty(sources)) {
          sources = [dst];
          dst = this.createAs(dst);
        }
        dstObject = { "$": dst };
        this.dstRoot = dst;
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
          src = sources[_i];
          this.srcRoot = src;
          this._blend(dstObject, { "$": src });
        }
        return dstObject.$;
      } else {
        return this._blend.apply(this, arguments);
      }
    };
    Blender.prototype._blend = function () {
      var action, bb, bbi, dst, nextBBSrcDstSpec, prop, props, result, sources, src, visitNextBB, _i, _j, _k, _len, _len1, _len2, _ref;
      dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        src = sources[_i];
        props = this.properties(src);
        for (_j = 0, _len1 = props.length; _j < _len1; _j++) {
          prop = props[_j];
          this.path.push(prop);
          if (this.l.deb(50)) {
            this.l.debug("@path = /" + this.path.join("/") + "\n'" + type(this.read(dst, prop)) + "'    <--  '" + type(this.read(src, prop)) + "'\n", this.read(dst, prop), "    <--  ", this.read(src, prop));
          }
          visitNextBB = true;
          _ref = this.blenderBehaviors;
          for (bbi = _k = 0, _len2 = _ref.length; _k < _len2; bbi = ++_k) {
            bb = _ref[bbi];
            if (!visitNextBB) {
              continue;
            }
            if (this.l.deb(60)) {
              this.l.debug("Currently at @blenderBehaviors[" + bbi + "] =\n", bb);
            }
            this.currentBlenderBehaviorIndex = bbi;
            this.currentBlenderBehavior = this.blenderBehaviors[bbi];
            nextBBSrcDstSpec = this.getNextAction(bb, bbi, {
              dst: type(this.read(dst, prop), true),
              src: type(this.read(src, prop), true),
              path: this.path
            });
            if (nextBBSrcDstSpec === void 0) {
              continue;
            } else {
              action = nextBBSrcDstSpec;
              if (!_.isFunction(action)) {
                if (_.isString(action)) {
                  action = this.getAction(action, bbi);
                } else {
                  if (action instanceof ActionResult) {
                    result = action;
                  } else {
                    throw this.l.err("_B.Blender.blend: Invalid `action` (neither 'Function' nor 'String'): ", action);
                  }
                }
              }
            }
            if (!(action instanceof ActionResult)) {
              result = action.call(this, prop, src, dst, this);
            }
            visitNextBB = false;
            if (!(result instanceof ActionResult)) {
              if (_.isArray(result) && result[0] === this.NEXT) {
                result = result[1];
                visitNextBB = true;
              }
              if (this.l.deb(20)) {
                this.l.debug("Result handling: @path =", this.path.join("/"), "\n value =", this.l.prettify(result));
              }
              this.resultHandler(dst, prop, result);
            } else {
              if (this.l.deb(30)) {
                this.l.debug("ActionResult = ", result);
              }
              if (result === this.DELETE || result === this.DELETE_NEXT) {
                this["delete"](dst, prop);
              }
              if (result === this.NEXT || result === this.DELETE_NEXT) {
                visitNextBB = true;
              }
            }
          }
          this.path.pop();
        }
      }
      return dst;
    };
    Blender.prototype.createAs = function (obj) {
      if (_.isArray(obj)) {
        return [];
      } else {
        if (this.copyProto) {
          return Object.create(Object.getPrototypeOf(obj));
        } else {
          return {};
        }
      }
    };
    Blender.prototype.read = function (obj, prop) {
      if (_.isUndefined(prop)) {
        throw "Read without a prop";
      }
      return obj[prop];
    };
    Blender.prototype.write = function (obj, prop, val) {
      if (_.isUndefined(prop)) {
        throw "Write without a prop";
      }
      obj[prop] = val;
      return val;
    };
    Blender.prototype["delete"] = function (obj, prop) {
      if (_.isUndefined(prop)) {
        throw "Delete without a prop";
      }
      return delete obj[prop];
    };
    Blender.prototype.properties = function (obj) {
      var p, v, _i, _len, _results, _results1, _results2;
      if (_.isArray(obj)) {
        _results = [];
        for (p = _i = 0, _len = obj.length; _i < _len; p = ++_i) {
          v = obj[p];
          _results.push(p);
        }
        return _results;
      } else {
        if (this.inherited) {
          _results1 = [];
          for (p in obj) {
            _results1.push(p);
          }
          return _results1;
        } else {
          _results2 = [];
          for (p in obj) {
            if (!__hasProp.call(obj, p))
              continue;
            _results2.push(p);
          }
          return _results2;
        }
      }
    };
    Blender.prototype.copy = function (dst, src) {
      var prop, _i, _len, _ref;
      _ref = this.properties(src);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        this.write(dst, prop, this.read(src, prop));
      }
      return dst;
    };
    Blender.prototype.resultHandler = Blender.prototype.write;
    Blender.prototype.overwrite = function (prop, src) {
      return this.read(src, prop);
    };
    Blender.prototype.deepOverwrite = function (prop, src, dst) {
      var copiedObjWithProto;
      if (this.copyProto) {
        if ({}.__proto__ === Object.prototype) {
          this.read(dst, prop).__proto__ = this.read(src, prop).__proto__;
        } else {
          copiedObjWithProto = Object.create(Object.getPrototypeOf(this.read(src, prop)));
          this.copy(copiedObjWithProto, this.read(dst, prop));
          this.write(dst, prop, copiedObjWithProto);
        }
      }
      return this.blend(this.read(dst, prop), this.read(src, prop));
    };
    Blender.prototype.arrayAppend = function (prop, src, dst) {
      var dstArr, s, srcArr, _i, _len, _ref;
      _ref = [
        this.read(src, prop),
        this.read(dst, prop)
      ], srcArr = _ref[0], dstArr = _ref[1];
      for (_i = 0, _len = srcArr.length; _i < _len; _i++) {
        s = srcArr[_i];
        dstArr.push(s);
      }
      return dstArr;
    };
    Blender.behavior = {
      order: [
        "dst",
        "src"
      ],
      "*": { "*": "overwrite" },
      "[]": {
        "[]": "deepOverwrite",
        "{}": "deepOverwrite",
        "->": "deepOverwrite"
      },
      "{}": {
        "{}": "deepOverwrite",
        "[]": "deepOverwrite",
        "->": "deepOverwrite"
      },
      "->": {
        "{}": "deepOverwrite",
        "[]": "deepOverwrite",
        "->": "deepOverwrite"
      }
    };
    Blender.SKIP = new ActionResult("SKIP");
    Blender.prototype.SKIP = Blender.SKIP;
    Blender.NEXT = new ActionResult("NEXT");
    Blender.prototype.NEXT = Blender.NEXT;
    Blender.DELETE = new ActionResult("DELETE");
    Blender.prototype.DELETE = Blender.DELETE;
    Blender.DELETE_NEXT = new ActionResult("DELETE_NEXT");
    Blender.prototype.DELETE_NEXT = Blender.DELETE_NEXT;
    return Blender;
  }(CoffeeUtils);


});
define('blending/blenders/DeepCloneBlender',['require', '../../types/type', '../Blender'], function (require, type) {
  

var DeepCloneBlender;
  return DeepCloneBlender = require("../Blender").subclass({}, {
    behavior: {
      order: [
        "dst",
        "src"
      ],
      "*": {
        "[]": "deepCloneOverwrite",
        "{}": "deepCloneOverwrite",
        "->": function (prop, src) {
          return this.read(src, prop);
        },
        "Undefined": function () {
          return this.SKIP;
        }
      },
      deepCloneOverwrite: function (prop, src, dst) {
        var dstType, similarTypes, srcType;
        srcType = type(this.read(src, prop));
        dstType = type(this.read(dst, prop));
        if (dstType !== srcType) {
          similarTypes = [
            "Function",
            "Object"
          ];
          if (!(__indexOf.call(similarTypes, dstType) >= 0 && __indexOf.call(similarTypes, srcType) >= 0)) {
            this.write(dst, prop, srcType === "Array" ? [] : {});
          }
        }
        return this.deepOverwrite(prop, src, dst);
      }
    }
  });


});
define('blending/blenders/DeepExtendBlender',['require', '../Blender', '../../Logger'], function (require, Blender) {
  

var DeepExtendBlender, l;
  l = new (require("../../Logger"))("uberscore/DeepExtendBlender");
  return DeepExtendBlender = function (_super) {
    __extends(DeepExtendBlender, _super);
    function DeepExtendBlender() {
      return DeepExtendBlender.__super__.constructor.apply(this, arguments);
    }
    DeepExtendBlender.behavior = {
      order: [
        "src",
        "dst"
      ],
      String: { "*": "overwriteOrReplace" },
      "[]": {
        "[]": function (prop, src, dst) {
          return _.reject(this.deepOverwrite(prop, src, dst), function (v) {
            return v === null || v === void 0;
          });
        },
        "*": function (prop, src, dst) {
          throw "deepExtend: Error: Trying to combine an array with a non-array.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(dst[prop]) + "\nsource[prop]: " + l.prettify(src[prop]);
        }
      },
      "{}": {
        "{}": function (prop, src, dst) {
          var deepBlended, key, val, _ref;
          _ref = deepBlended = this.getAction("deepOverwrite")(prop, src, dst);
          for (key in _ref) {
            val = _ref[key];
            if (val === null || val === void 0) {
              delete deepBlended[key];
            }
          }
          return deepBlended;
        },
        "*": function (prop, src, dst) {
          throw "deepExtend: Error trying to combine a PlainObject with a non-PlainObject.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(dst[prop]) + "\nsource[prop]: " + l.prettify(src[prop]);
        }
      },
      overwriteOrReplace: function (prop, src, dst) {
        var replaceRE;
        replaceRE = /\${\s*?_\s*?}/;
        if (_.isString(src[prop]) && replaceRE.test(src[prop])) {
          if (_.isString(dst[prop])) {
            return src[prop].replace(replaceRE, dst[prop]);
          } else {
            return dst[prop];
          }
        } else {
          return src[prop];
        }
      }
    };
    return DeepExtendBlender;
  }(Blender);


});
define('blending/blenders/DeepDefaultsBlender',['require', '../../types/type', './DeepCloneBlender'], function (require, type, DeepCloneBlender) {
  

var DeepDefaultsBlender;
  return DeepDefaultsBlender = DeepCloneBlender.subclass({}, {
    behavior: {
      order: [
        "dst",
        "src"
      ],
      "Undefined": function () {
        return this.NEXT;
      },
      "Null": function () {
        return this.NEXT;
      },
      "{}": {
        "{}": function () {
          return this.NEXT;
        },
        "->": function () {
          return this.NEXT;
        },
        "*": function () {
          return this.SKIP;
        }
      },
      "->": {
        "{}": function () {
          return this.NEXT;
        },
        "->": function () {
          return this.NEXT;
        },
        "*": function () {
          return this.SKIP;
        }
      },
      "[]": {
        "[]": function () {
          return this.NEXT;
        },
        "*": function () {
          return this.SKIP;
        }
      },
      "*": function () {
        return this.SKIP;
      }
    }
  });


});
define('blending/blenders/ArrayizeBlender',['require', 'exports', 'module', '../../collections/array/arrayize', './DeepCloneBlender'], function (require, exports, module, arrayize) {
  

var ArrayizeBlender;
  return ArrayizeBlender = function (_super) {
    __extends(ArrayizeBlender, _super);
    function ArrayizeBlender() {
      return ArrayizeBlender.__super__.constructor.apply(this, arguments);
    }
    ArrayizeBlender.prototype.addMethod = "push";
    ArrayizeBlender.prototype.unique = false;
    ArrayizeBlender.prototype.reverse = false;
    ArrayizeBlender.behavior = {
      order: ["src"],
      "*": "addToArray",
      addToArray: function (prop, src, dst) {
        var dstArray, itemsToAdd, srcArray, v, _i, _len;
        dstArray = this.write(dst, prop, arrayize(this.read(dst, prop)));
        srcArray = arrayize(this.read(src, prop));
        if (_.isEqual(srcArray[0], [null])) {
          dstArray = this.write(dst, prop, []);
          srcArray = srcArray.slice(1);
        }
        itemsToAdd = this.unique ? function () {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = srcArray.length; _i < _len; _i++) {
            v = srcArray[_i];
            if (__indexOf.call(dstArray, v) < 0) {
              _results.push(v);
            }
          }
          return _results;
        }() : _.clone(srcArray);
        if (this.reverse) {
          itemsToAdd.reverse();
        }
        for (_i = 0, _len = itemsToAdd.length; _i < _len; _i++) {
          v = itemsToAdd[_i];
          dstArray[this.addMethod](v);
        }
        return dstArray;
      }
    };
    return ArrayizeBlender;
  }(require("./DeepCloneBlender"));


});
define('blending/blenders/index',['require', 'exports', 'module', './DeepCloneBlender', './DeepExtendBlender', './DeepDefaultsBlender', './ArrayizeBlender'], function (require, exports, module) {
  

module.exports = {
  DeepCloneBlender: require("./DeepCloneBlender"),
  DeepExtendBlender: require("./DeepExtendBlender"),
  DeepDefaultsBlender: require("./DeepDefaultsBlender"),
  ArrayizeBlender: require("./ArrayizeBlender")
};

return module.exports;

});
define('blending/traverse',['require', 'exports', 'module', './Blender'], function (require, exports, module) {
  

var Blender, traverse;
Blender = require("./Blender");
traverse = function (data, callback) {
  var dummy, recurse, traverseBlender;
  dummy = {};
  recurse = true;
  traverseBlender = new Blender([{
      order: ["src"],
      "[]": "traverse",
      "{}": "traverse",
      "->": "traverse",
      "*": Blender.SKIP,
      traverse: function (prop, src, dst, blender) {
        if (this.read(src, prop) !== data) {
          recurse = callback.call(this, prop, src, blender);
        }
        if (recurse !== false) {
          this.blend(dummy, this.read(src, prop));
        }
        return this.SKIP;
      }
    }], { debugLevel: 0 });
  return traverseBlender.blend(dummy, data);
};
module.exports = traverse;

return module.exports;

});
define('blending/clone',['require', 'exports', 'module', './blenders/DeepCloneBlender'], function (require, exports, module) {
  

var DeepCloneBlender, clone;
DeepCloneBlender = require("./blenders/DeepCloneBlender");
clone = function (obj, options) {
  if (!options) {
    return _.clone(obj, options);
  } else {
    if (!(options === true || options.deep)) {
      return new DeepCloneBlender([{ "*": { "*": "overwrite" } }], options).blend(obj);
    } else {
      return new DeepCloneBlender([], options).blend(obj);
    }
  }
};
module.exports = clone;

return module.exports;

});
define('lodash',[],function () {
  if (__isNode) {
  return __nodeRequire('lodash');
} else {
  return (typeof _ !== 'undefined') ? _ : __nodeRequire('lodash')
}
});
define('blending/deepExtend',['require', 'exports', 'module', loggerPath + "Logger", 'lodash', '../uberscore', '../types/isHash'], function (require, exports, module, Logger) {
  

var deepExtend, isHash, isHash2, isHash3, l, shadowed, uberscore, _lodash_;
  _lodash_ = require("lodash");
  uberscore = require("../uberscore");
  isHash = require("../types/isHash");
  isHash2 = require("../types/isHash");
  isHash3 = require("../types/isHash");
  l = new Logger("uberscore/Blender");
  shadowed = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
  return deepExtend = function () {
    var obj, parentRE, prop, source, sources, val, _i, _len;
    obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    parentRE = /\${\s*?_\s*?}/;
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (prop in source) {
        if (!__hasProp.call(source, prop))
          continue;
        if (_.isUndefined(obj[prop])) {
          obj[prop] = source[prop];
        } else {
          if (_.isString(source[prop]) && parentRE.test(source[prop])) {
            if (_.isString(obj[prop])) {
              obj[prop] = source[prop].replace(parentRE, obj[prop]);
            }
          } else {
            if (_.isArray(obj[prop]) || _.isArray(source[prop])) {
              if (!_.isArray(obj[prop]) || !_.isArray(source[prop])) {
                throw "deepExtend: Error: Trying to combine an array with a non-array.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(obj[prop]) + "\nsource[prop]: " + l.prettify(source[prop]);
              } else {
                obj[prop] = _.reject(deepExtend(obj[prop], source[prop]), function (item) {
                  return item === null || item === void 0;
                });
              }
            } else {
              if (isHash(obj[prop]) || isHash(source[prop])) {
                if (!isHash(obj[prop]) || !isHash(source[prop])) {
                  throw "deepExtend: Error trying to combine a PlainObject with a non-PlainObject.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(obj[prop]) + "\nsource[prop]: " + l.prettify(source[prop]);
                } else {
                  obj[prop] = deepExtend(obj[prop], source[prop]);
                }
              } else {
                val = source[prop];
                if ((val === null || val === void 0) && isHash(obj)) {
                  delete obj[prop];
                } else {
                  obj[prop] = val;
                }
              }
            }
          }
        }
      }
    }
    return obj;
  };


});
define('objects/okv',['require','exports','module'],function (require, exports, module) {
  

var okv, __slice = [].slice;
okv = function () {
  var idx, keyName, keyValPairs, obj, _i, _len;
  obj = arguments[0], keyValPairs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (_.isString(obj)) {
    keyValPairs.unshift(obj);
    obj = {};
  }
  if (_.isObject(obj)) {
    for (idx = _i = 0, _len = keyValPairs.length; _i < _len; idx = _i += 2) {
      keyName = keyValPairs[idx];
      if (idx + 1 < keyValPairs.length) {
        obj[keyName + ""] = keyValPairs[idx + 1];
      }
    }
    return obj;
  } else {
    return null;
  }
};
module.exports = okv;

return module.exports;

});
define('collections/go',['require','exports','module'],function (require, exports, module) {
  

var go, __indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  };
go = function (oa, actions, context) {
  var arrItem, fixForObj, fltr, grab, isObj, iter, keysOrder, newOA, resetResult, result, resultPush, sort, _i, _len;
  if (actions) {
    fltr = actions.fltr, iter = actions.iter, sort = actions.sort, grab = actions.grab;
  }
  isObj = !_.isArray(oa);
  newOA = function () {
    if (isObj) {
      return {};
    } else {
      return [];
    }
  };
  oa = _.clone(oa);
  result = null;
  resetResult = function () {
    return result = grab === void 0 ? newOA() : _.isFunction(grab) ? newOA() : _.isArray(grab) ? [] : _.isObject(grab) ? {} : _.isString(grab) ? grab === "[]" || grab === "array" || grab === "Array" || grab === "a" || grab === "A" ? [] : grab === "{}" || grab === "object" || grab === "Object" || grab === "o" || grab === "O" ? {} : newOA() : newOA();
  };
  resultPush = function (val, key) {
    if (!_.isArray(result)) {
      return result[key] = val;
    } else {
      return result.push(val);
    }
  };
  fixForObj = function (val, key) {
    if (isObj) {
      key = val;
      val = oa[key];
    }
    return [
      val,
      key
    ];
  };
  if (!(fltr === void 0)) {
    resetResult();
    _.each(oa, function (val, key) {
      var f;
      if (_.isFunction(fltr)) {
        if (fltr.call(context, val, key, oa)) {
          return resultPush(val, key);
        }
      } else {
        if (isObj) {
          if (_.isString(fltr)) {
            fltr = [fltr];
          }
          if (_.isArray(fltr)) {
            if (__indexOf.call(function () {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = fltr.length; _i < _len; _i++) {
                  f = fltr[_i];
                  _results.push(f.toString());
                }
                return _results;
              }(), key) >= 0) {
              return resultPush(val, key);
            }
          }
        }
      }
    });
    oa = result;
  }
  if (!(sort === void 0)) {
    resetResult();
    keysOrder = [];
    _(oa).map(function (val, key) {
      if (isObj) {
        return key;
      } else {
        return val;
      }
    }).sortBy(_.isFunction(sort) ? function (val, key) {
      return sort.apply(context, fixForObj(val, key));
    } : _.isString(sort) ? function (val) {
      return val;
    } : _.isBoolean(sort) ? sort ? function () {
      return true;
    } : function () {
      return false;
    } : sort).each(function (val, key) {
      return resultPush.apply(null, fixForObj(val, key));
    });
    oa = result;
  }
  if (_.isFunction(iter)) {
    if (sort === void 0) {
      _.each(oa, function (val, key) {
        return iter.call(context, val, key, oa);
      });
    } else {
      _.each(oa, function (val, key) {
        return iter.call(context, val, key, oa);
      });
    }
  }
  if (grab) {
    if (_.isFunction(grab)) {
      _.each(oa, function (val, key) {
        return grab.call(context, val, key, oa);
      });
    } else {
      if (_.isArray(grab)) {
        for (_i = 0, _len = oa.length; _i < _len; _i++) {
          arrItem = oa[_i];
          grab.push(arrItem);
        }
      } else {
        if (_.isObject(grab)) {
          _.extend(grab, oa);
        }
      }
    }
  }
  return oa;
};
module.exports = go;

return module.exports;

});
define('objects/mutate',['require', 'exports', 'module', '../collections/go'], function (require, exports, module) {
  

var go = require("../collections/go");
var mutate = function (oa, mutator, fltr) {
  if (_.isFunction(mutator)) {
    go(oa, {
      iter: function (v, k) {
        if (isAgree(v, fltr)) {
          return oa[k] = mutator(v);
        }
      }
    });
  }
  return oa;
};
module.exports = mutate;

return module.exports;

});
define('objects/isDisjoint',['require','exports','module'],function (require, exports, module) {
  

var isDisjoint;
isDisjoint = function (oa1, oa2, equality) {
  var found;
  if (equality == null) {
    equality = function (v1, v2) {
      return v1 === v2;
    };
  }
  found = false;
  _.each(oa1, function (v1) {
    if (_.any(oa2, function (v2) {
        return equality(v1, v2);
      })) {
      found = true;
      return false;
    }
  });
  return !found;
};
module.exports = isDisjoint;

return module.exports;

});
define('objects/getRefs',['require','exports','module'],function (require, exports, module) {
  

var getRefs, getRefsDefaults, __hasProp = {}.hasOwnProperty;
getRefsDefaults = {
  deep: false,
  inherited: false
};
getRefs = function (oa, options, refsArray) {
  var key, keys, v, _i, _len;
  if (options == null) {
    options = getRefsDefaults;
  }
  if (refsArray == null) {
    refsArray = [];
  }
  if (options !== getRefsDefaults) {
    _.defaults(options, getRefsDefaults);
  }
  keys = options.inherited ? function () {
    var _results;
    _results = [];
    for (key in oa) {
      _results.push(key);
    }
    return _results;
  }() : function () {
    var _results;
    _results = [];
    for (key in oa) {
      if (!__hasProp.call(oa, key))
        continue;
      _results.push(key);
    }
    return _results;
  }();
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    v = oa[key];
    if (_.isObject(v)) {
      refsArray.push(v);
      if (options.deep) {
        getRefs(v, options, refsArray);
      }
    }
  }
  return refsArray;
};
module.exports = getRefs;

return module.exports;

});
define('objects/isRefDisjoint',['require', 'exports', 'module', './getRefs', './isDisjoint'], function (require, exports, module) {
  

var getRefs, isDisjoint, isRefDisjoint, isRefDisjointDefaults;
getRefs = require("./getRefs");
isDisjoint = require("./isDisjoint");
isRefDisjointDefaults = {
  deep: false,
  inherited: false
};
isRefDisjoint = function (oa1, oa2, options) {
  var refs1, refs2;
  if (options == null) {
    options = isRefDisjointDefaults;
  }
  if (options !== isRefDisjointDefaults) {
    _.defaults(options, isRefDisjointDefaults);
  }
  if (oa1 === oa2) {
    return false;
  } else {
    refs1 = getRefs(oa1, options);
    refs1.unshift(oa1);
    refs2 = getRefs(oa2, options);
    refs2.unshift(oa2);
    return isDisjoint(refs1, refs2);
  }
};
module.exports = isRefDisjoint;

return module.exports;

});
define('objects/getInheritedPropertyNames',['require','exports','module'],function (require, exports, module) {
  

var getInheritedPropertyNames, _getInheritedPropertyNames;
getInheritedPropertyNames = function (obj) {
  return _getInheritedPropertyNames(Object.getPrototypeOf(obj));
};
_getInheritedPropertyNames = function (obj) {
  var props;
  props = [];
  while (true) {
    if (!obj || obj === void 0 || _.isEmpty(obj) && !Object.getPrototypeOf(obj)) {
      break;
    }
    Object.getOwnPropertyNames(obj).forEach(function (prop) {
      if (props.indexOf(prop) === -1 && prop !== "constructor") {
        return props.push(prop);
      }
    });
    obj = Object.getPrototypeOf(obj);
  }
  return props;
};
module.exports = getInheritedPropertyNames;

return module.exports;

});
define('types/isPlain',['require', 'exports', 'module', './type'], function (require, exports, module) {
  

var type, isPlain;
type = require("./type");
isPlain = function (o) {
  return in$(type(o), isPlain.PLAIN_TYPES);
};
isPlain.PLAIN_TYPES = [
  "String",
  "Date",
  "RegExp",
  "Number",
  "Boolean",
  "Null",
  "Undefined"
];
module.exports = isPlain;
function in$(x, xs) {
  var i = -1, l = xs.length >>> 0;
  while (++i < l)
    if (x === xs[i])
      return true;
  return false;
}

return module.exports;

});
define('collections/array/isEqualArraySet',['require','exports','module'],function (require, exports, module) {
  

var isEqualArraySet;
isEqualArraySet = function (a1, a2, equalsFn) {
  if (_.difference(a1, a2).length === 0) {
    return _.difference(a2, a1).length === 0;
  } else {
    return false;
  }
};
module.exports = isEqualArraySet;

return module.exports;

});
define('objects/isEqual',['require', 'exports', 'module', '../types/type', '../types/isPlain', '../types/isHash', '../collections/array/isEqualArraySet', '../Logger'], function (require, exports, module) {
  

var getProps, isEqual, isEqualArraySet, isHash, isPlain, l, type;
type = require("../types/type");
isPlain = require("../types/isPlain");
isHash = require("../types/isHash");
isEqualArraySet = require("../collections/array/isEqualArraySet");
l = new (require("../Logger"))("uberscore/isEqual");
isEqual = function (a, b, callback, ctx, options) {
  var aKeys, bKeys, cb, cbResult, isValueType, key, prop, _i, _len;
  if (options == null) {
    options = isEqual.defaults;
  }
  if (isHash(callback)) {
    options = _.defaults(callback, options);
  }
  if (options !== isEqual.defaults) {
    _.defaults(options || (options = {}), isEqual.defaults);
  }
  if (options.callback) {
    callback = options.callback;
  }
  if (options.ctx) {
    ctx = options.ctx;
  }
  if (_.isFunction(callback)) {
    if (!callback.optioned) {
      cb = callback;
      callback = function (a, b) {
        return cb.call(this, a, b, options);
      };
      callback.optioned = true;
      if (options.callback) {
        options.callback = callback;
      }
    }
    cbResult = callback.call(ctx, a, b);
    if (cbResult !== void 0) {
      return cbResult ? true : false;
    }
  } else {
    callback = void 0;
    options.callback = void 0;
  }
  if (l.deb(20)) {
    l.debug("options = ", options);
  }
  if (a === b) {
    if (l.deb(40)) {
      l.debug("return true - a is b");
    }
    return true;
  }
  if (_.isFunction(a != null ? a.isEqual : void 0)) {
    return a.isEqual(b);
  }
  if (_.isFunction(b != null ? b.isEqual : void 0)) {
    return b.isEqual(a);
  }
  if (_.isEqual(isEqual.defaults, _.pick(options, _.keys(isEqual.defaults)))) {
    if (l.deb(40)) {
      l.debug("return _.isEqual a, b - no _B.isEqual options");
    }
    return _.isEqual(a, b, callback, ctx);
  }
  if (!(options.onlyProps && _.isObject(b) && (_.isObject(a) || options.like))) {
    if (type(a) !== type(b)) {
      if (l.deb(40)) {
        l.debug("return false - type(a) isnt type(b) and not options.onlyProps");
      }
      return false;
    }
    isValueType = function (x) {
      return isPlain(x) || _.isFunction(x);
    };
    if (isValueType(a) || isValueType(b)) {
      if (!_.isEqual(a, b, callback, ctx)) {
        return false;
      } else {
        if (!options.allProps) {
          return true;
        }
      }
    }
  }
  aKeys = getProps(a, options);
  bKeys = getProps(b, options);
  if (!options.like) {
    if (aKeys.length !== bKeys.length || !isEqualArraySet(aKeys, bKeys)) {
      if (_.isArray(options.path)) {
        if (!(key = _.difference(aKeys, bKeys)[0])) {
          key = _.difference(bKeys, aKeys)[0];
        }
        options.path.push(key);
      }
      return false;
    }
  }
  for (_i = 0, _len = aKeys.length; _i < _len; _i++) {
    prop = aKeys[_i];
    if (_.isArray(options.path)) {
      options.path.push(prop);
    }
    if (options.exact) {
      if (a[prop] !== b[prop]) {
        if (l.deb(40)) {
          l.debug("return false - exact ref not same");
        }
        return false;
      }
    }
    if (!isEqual(a[prop], b[prop], callback, ctx, options)) {
      if (l.deb(40)) {
        l.debug("return false - not isEqual nested for prop =", prop, "values = ", a[prop], b[prop]);
      }
      return false;
    }
    if (_.isArray(options.path)) {
      options.path.pop();
    }
  }
  if (l.deb(40)) {
    l.debug("return true - all properties considered true");
  }
  return true;
};
isEqual.defaults = {
  inherited: false,
  exact: false,
  like: false,
  path: void 0,
  exclude: [],
  allProps: false,
  onlyProps: false
};
getProps = function (oa, options) {
  var i, isExcluded, pi, _i, _ref, _results, _results1;
  if (options == null) {
    options = {};
  }
  isExcluded = function (prop) {
    return _.any(options.exclude, function (p) {
      return p + "" === prop + "";
    });
  };
  if (_.isArray(oa) && !(options.allProps || options.onlyProps)) {
    _results = [];
    for (i = _i = 0, _ref = oa.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (!isExcluded(i)) {
        _results.push(i);
      }
    }
    return _results;
  } else {
    _results1 = [];
    for (pi in oa) {
      if (!isExcluded(pi) && (options.inherited || {}.hasOwnProperty.call(oa, pi))) {
        _results1.push(pi);
      }
    }
    return _results1;
  }
};
module.exports = isEqual;

return module.exports;

});
define('objects/isIqual',['require', 'exports', 'module', './isEqual'], function (require, exports, module) {
  

var isEqual, isIqual;
isEqual = require("./isEqual");
isIqual = function (a, b, callback, ctx, options) {
  if (options == null) {
    options = {};
  }
  options.inherited = true;
  (options.exclude || (options.exclude = [])).push("constructor");
  return isEqual(a, b, callback, ctx, options);
};
module.exports = isIqual;

return module.exports;

});
define('objects/isExact',['require', 'exports', 'module', './isEqual'], function (require, exports, module) {
  

var isEqual, isExact;
isEqual = require("./isEqual");
isExact = function (a, b, callback, ctx, options) {
  if (options == null) {
    options = {};
  }
  options.exact = true;
  return isEqual(a, b, callback, ctx, options);
};
module.exports = isExact;

return module.exports;

});
define('objects/isIxact',['require', 'exports', 'module', './isIqual'], function (require, exports, module) {
  

var isIqual, isIxact;
isIqual = require("./isIqual");
isIxact = function (a, b, callback, ctx, options) {
  if (options == null) {
    options = {};
  }
  options.exact = true;
  return isIqual(a, b, callback, ctx, options);
};
module.exports = isIxact;

return module.exports;

});
define('objects/isLike',['require', 'exports', 'module', './isEqual'], function (require, exports, module) {
  

var isEqual, isLike;
isEqual = require("./isEqual");
isLike = function (a, b, callback, ctx, options) {
  if (options == null) {
    options = {};
  }
  options.like = true;
  return isEqual(a, b, callback, ctx, options);
};
module.exports = isLike;

return module.exports;

});
define('types/isTrue',['require'],function (require) {
  

return function (val) {
    return _.isEqual(val, true);
  };


});
define('types/isFalse',['require'],function (require) {
  

return function (val) {
    return _.isEqual(val, false);
  };


});
define('certain',['require', 'exports', 'module', './types/isHash'], function (require, exports, module) {
  

var certain, isHash;
isHash = require("./types/isHash");
certain = function (o, defaultKey, defaultVal, isStrict) {
  if (isStrict == null) {
    isStrict = false;
  }
  if (!(isHash(o) || _.isFunction(o))) {
    throw "Error: _B.certain: o is neither an Object or Function.\no=" + JSON.stringify(o, null, "");
  }
  if (_.isUndefined(defaultKey)) {
    defaultKey = "*";
  }
  return function (key) {
    var val, _ref, _ref1;
    val = (_ref = (_ref1 = o[key]) != null ? _ref1 : o[defaultKey]) != null ? _ref : defaultVal;
    if (isStrict && _.isUndefined(val)) {
      throw "Error: _B.certain: defaultKey is undefined.\n  defaultVal is also undefined.\n  key='" + key + "' (o[" + key + "] is obviously undefined too)\n  defaultKey='" + defaultKey + "'\n  o=" + JSON.stringify(o, null, "");
    }
    return val;
  };
};
module.exports = certain;

return module.exports;

});
define('utils/CalcCachedProperties',['require', './CoffeeUtils', '../Logger'], function (require, CoffeeUtils) {
  

var CalcCachedProperties, l;
  l = new (require("../Logger"))("uberscore/utils/CalcCachedProperties");
  return CalcCachedProperties = function (_super) {
    var cUndefined, cacheKey, prefix;
    __extends(CalcCachedProperties, _super);
    prefix = function (prop) {
      return "__$$" + prop + "__$$";
    };
    cacheKey = prefix("cache");
    cUndefined = { "cUndefined": true };
    CalcCachedProperties.prototype.getAllCalcProperties = function (instOrClass) {
      var aClass, cFunct, cProp, calcProps, _i, _len, _ref, _ref1;
      if (instOrClass == null) {
        instOrClass = this;
      }
      calcProps = {};
      _ref = this.getClasses(instOrClass);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        aClass = _ref[_i];
        _ref1 = aClass.calcProperties;
        for (cProp in _ref1) {
          cFunct = _ref1[cProp];
          calcProps[cProp] = cFunct;
        }
      }
      return calcProps;
    };
    CalcCachedProperties.getAllCalcProperties = CalcCachedProperties.prototype.getAllCalcProperties;
    Object.defineProperties(CalcCachedProperties.prototype, {
      allCalcProperties: {
        get: function () {
          if (!this.constructor.prototype.hasOwnProperty("_allCalcProperties")) {
            Object.defineProperty(this.constructor.prototype, "_allCalcProperties", {
              value: this.getAllCalcProperties(),
              enumerable: false
            });
          }
          return this.constructor.prototype._allCalcProperties;
        }
      },
      classes: {
        get: function () {
          if (!this.constructor.prototype.hasOwnProperty("_classes")) {
            Object.defineProperty(this.constructor.prototype, "_classes", {
              value: this.getClasses(),
              enumerable: false
            });
          }
          return this.constructor.prototype._classes;
        }
      }
    });
    function CalcCachedProperties() {
      this.defineCalcProperties();
    }
    CalcCachedProperties.prototype.defineCalcProperties = function (isOverwrite) {
      var cPropFn, cPropName, _ref;
      Object.defineProperty(this, cacheKey, {
        value: {},
        enumerable: false,
        configurable: false,
        writeable: false
      });
      _ref = this.allCalcProperties;
      for (cPropName in _ref) {
        cPropFn = _ref[cPropName];
        this[cacheKey][cPropName] = cUndefined;
        if (!this.constructor.prototype.hasOwnProperty(cPropName) || isOverwrite) {
          (function (_this) {
            return function (cPropName, cPropFn) {
              if (l.deb(99)) {
                l.debug("...defining calculated property " + _this.constructor.name + "." + cPropName);
              }
              return Object.defineProperty(_this.constructor.prototype, cPropName, {
                enumerable: true,
                configurable: true,
                get: function () {
                  if (l.deb(99)) {
                    l.debug("...requesting calculated property " + this.constructor.name + "." + cPropName);
                  }
                  if (this[cacheKey][cPropName] === cUndefined) {
                    if (l.deb(95)) {
                      l.debug("...refreshing calculated property " + this.constructor.name + "." + cPropName);
                    }
                    this[cacheKey][cPropName] = cPropFn.call(this);
                  }
                  return this[cacheKey][cPropName];
                },
                set: function (v) {
                  return this[cacheKey][cPropName] = v;
                }
              });
            };
          }(this)(cPropName, cPropFn));
        }
      }
      return null;
    };
    CalcCachedProperties.prototype.cleanProps = function () {
      var ca, cleanArgs, cleaned, p, propKeys, _i, _j, _len, _len1;
      cleanArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_.isEmpty(cleanArgs)) {
        cleanArgs = _.keys(this.allCalcProperties);
      }
      cleaned = [];
      for (_i = 0, _len = cleanArgs.length; _i < _len; _i++) {
        ca = cleanArgs[_i];
        if (ca) {
          if (_.isFunction(ca)) {
            if (!propKeys) {
              propKeys = _.keys(this.allCalcProperties);
            }
            for (_j = 0, _len1 = propKeys.length; _j < _len1; _j++) {
              p = propKeys[_j];
              if (ca(p)) {
                if (this[cacheKey][p] !== cUndefined) {
                  if (l.deb(100)) {
                    l.debug("...delete (via fn) value of property " + this.constructor.name + "." + p);
                  }
                  this[cacheKey][p] = cUndefined;
                  cleaned.push(p);
                }
              }
            }
          } else {
            if (this[cacheKey][ca] !== cUndefined) {
              if (l.deb(100)) {
                l.debug("...delete value of property " + this.constructor.name + "." + ca);
              }
              this[cacheKey][ca] = cUndefined;
              cleaned.push(ca);
            }
          }
        }
      }
      return cleaned;
    };
    return CalcCachedProperties;
  }(CoffeeUtils);


});
define('uberscore',['require', 'exports', 'module', './blending/blenders/index', './blending/Blender', './blending/traverse', './blending/clone', './blending/deepExtend', './objects/okv', './objects/mutate', './objects/setp', './objects/getp', './objects/isDisjoint', './objects/isRefDisjoint', './objects/getRefs', './objects/getInheritedPropertyNames', './objects/isEqual', './objects/isIqual', './objects/isExact', './objects/isIxact', './objects/isLike', './types/isTrue', './types/isFalse', './collections/go', './collections/array/isEqualArraySet', './collections/array/arrayize', './agreement/isAgree', './agreement/inAgreements', './types/type', './types/isPlain', './types/isHash', './Logger', './certain', './utils/CoffeeUtils', './utils/CalcCachedProperties', './utils/subclass'], function (require, exports, module) {
  var __umodule__ = (function (require, exports, module) {
  

'use strict';

var VERSION = '0.0.17'; // injected by urequire-rc-inject-version

var Uberscore;
  Uberscore = function () {
    var key, val, _ref, _ref1;
    function Uberscore() {
    }
    Uberscore.prototype.VERSION = typeof VERSION === "undefined" || VERSION === null ? "{NO_VERSION}" : VERSION;
    Uberscore.prototype["_"] = _;
    Uberscore.prototype.isLodash = function (lodash) {
      if (lodash == null) {
        lodash = _;
      }
      return _.name === "lodash" || _.isFunction(lodash.isPlainObject) && _.isFunction(lodash.merge) && _.isFunction(lodash.omit);
    };
    _ref = {
      Blender: require("./blending/Blender"),
      traverse: require("./blending/traverse"),
      clone: require("./blending/clone"),
      deepExtend: require("./blending/deepExtend"),
      okv: require("./objects/okv"),
      mutate: require("./objects/mutate"),
      setp: require("./objects/setp"),
      getp: require("./objects/getp"),
      isDisjoint: require("./objects/isDisjoint"),
      isRefDisjoint: require("./objects/isRefDisjoint"),
      getRefs: require("./objects/getRefs"),
      getInheritedPropertyNames: require("./objects/getInheritedPropertyNames"),
      isEqual: require("./objects/isEqual"),
      isIqual: require("./objects/isIqual"),
      isExact: require("./objects/isExact"),
      isIxact: require("./objects/isIxact"),
      isLike: require("./objects/isLike"),
      isTrue: require("./types/isTrue"),
      isFalse: require("./types/isFalse"),
      isOk: function (val) {
        return !!val;
      },
      go: require("./collections/go"),
      isEqualArraySet: require("./collections/array/isEqualArraySet"),
      arrayize: require("./collections/array/arrayize"),
      isAgree: require("./agreement/isAgree"),
      inAgreements: require("./agreement/inAgreements"),
      type: require("./types/type"),
      isPlain: require("./types/isPlain"),
      isHash: require("./types/isHash"),
      Logger: require("./Logger"),
      certain: require("./certain"),
      CoffeeUtils: require("./utils/CoffeeUtils"),
      CalcCachedProperties: require("./utils/CalcCachedProperties"),
      subclass: require("./utils/subclass")
    };
    for (key in _ref) {
      val = _ref[key];
      Uberscore.prototype[key] = val;
    }
    _ref1 = require("./blending/blenders/index");
    for (key in _ref1) {
      val = _ref1[key];
      Uberscore.prototype[key] = val;
    }
    return Uberscore;
  }();
  return new Uberscore();


}).call(this, require, exports, module);
var __old___b0 = window['_B'],
    __old__uberscore1 = window['uberscore'];
if (!__isAMD) {window['_B'] = __umodule__;
window['uberscore'] = __umodule__;

__umodule__.noConflict = function () {
  window['_B'] = __old___b0;
window['uberscore'] = __old__uberscore1;
return __umodule__;
};
}return __umodule__;
});

    var isAgree = require('agreement/isAgree');
    return require('uberscore');
  };
if (__isAMD) {
  return define('uberscore', ['lodash'], bundleFactory);
} else {
    if (__isNode) {
        return module.exports = bundleFactory(require('lodash'));
    } else {
        return bundleFactory((typeof _ !== 'undefined') ? _ : void 0);
    }
}
}).call(this, (typeof exports === 'object' ? global : window),
              (typeof exports === 'object' ? global : window))