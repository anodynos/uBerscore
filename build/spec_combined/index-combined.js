// Combined file generated by uRequire v0.3.0alpha18, with help from r.js & almond
(function (){
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


  var __global = null,
      __nodeRequire = function(){};

  if (__isNode) {
      __nodeRequire = require;
      __global = global;
  } else {
      __global = window;
  };

  factory = function() {
/**
 * almond 0.2.3 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 15);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('chai',[],function () {
  if (typeof chai === "undefined") {
  return __nodeRequire('chai');
} else {
  return chai;
};
});
define('lodash',[],function () {
  if (typeof _ === "undefined") {
  return __nodeRequire('lodash');
} else {
  return _;
};
});
define('uberscore',[],function () {
  if (typeof _B === "undefined") {
  return __nodeRequire('uberscore');
} else {
  return _B;
};
});
(function (window) {
  define('spec-data',['require','exports','module'],
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var data;

data = {
    obj: {
        ciba: 4,
        aaa: 7,
        b: 2,
        c: -1
    },
    arrInt: [ 4, 7, 2, -1 ],
    arrInt2: [ 7, -1, 3, 5 ],
    arrStr: [ "Pikoulas", "Anodynos", "Babylon", "Agelos" ],
    globalDefaults: {
        enabled: true,
        bundleRoot: "/global",
        compilers: {
            "rjs-build": "global-rjs"
        }
    },
    projectDefaults: {
        bundleRoot: "/global/project",
        compilers: {
            "rjs-build": "project-rjs-build"
        }
    },
    bundleDefaults: {
        bundleRoot: "/global/project/bundle",
        compilers: {
            "coffee-script": {
                params: "w b"
            },
            urequire: {
                scanPrevent: true
            }
        }
    }
};

module.exports = data;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('arrayize-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, chai, data, expect, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

describe("arrayize :", function() {
    it("arrayize a String", function() {
        return expect(_B.arrayize("agelos")).to.deep.equal([ "agelos" ]);
    });
    it("arrayize a Number", function() {
        return expect(_B.arrayize(19)).to.deep.equal([ 19 ]);
    });
    it("arrayize an Object", function() {
        return expect(_B.arrayize({
            a: 1,
            b: 2
        })).to.deep.equal([ {
            a: 1,
            b: 2
        } ]);
    });
    it("arrayize an existing array", function() {
        var arr;
        arr = [ 1, "john" ];
        return expect(_B.arrayize(arr)).to.equal(arr);
    });
    return it("arrayize nothingness", function() {
        return expect(_B.arrayize(void 0)).to.deep.equal([]);
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('deepCloneDefaults-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, bundleDefaults, chai, data, expect, globalDefaults, projectDefaults, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

projectDefaults = _.clone(data.projectDefaults, true);

globalDefaults = _.clone(data.globalDefaults, true);

bundleDefaults = _.clone(data.bundleDefaults, true);

describe("deepCloneDefaults:", function() {
    it("more 'specific' options eg. project, merged (taking precedence) to more 'global' defaults", function() {
        var result;
        result = _B.deepCloneDefaults(projectDefaults, globalDefaults);
        return expect(result).to.deep.equal({
            enabled: true,
            bundleRoot: "/global/project",
            compilers: {
                "rjs-build": "project-rjs-build"
            }
        });
    });
    it("many defaults", function() {
        var result;
        result = _B.deepCloneDefaults(bundleDefaults, projectDefaults, globalDefaults);
        return expect(result).to.deep.equal({
            enabled: true,
            bundleRoot: "/global/project/bundle",
            compilers: {
                "coffee-script": {
                    params: "w b"
                },
                urequire: {
                    scanPrevent: true
                },
                "rjs-build": "project-rjs-build"
            }
        });
    });
    return it("Original objects not mutated", function() {
        expect(bundleDefaults).to.deep.equal(data.bundleDefaults);
        expect(projectDefaults).to.deep.equal(data.projectDefaults);
        return expect(globalDefaults).to.deep.equal(data.globalDefaults);
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('deepExtend-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, bundleDefaults, chai, data, expect, globalDefaults, projectDefaults, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

projectDefaults = _.clone(data.projectDefaults, true);

globalDefaults = _.clone(data.globalDefaults, true);

bundleDefaults = _.clone(data.bundleDefaults, true);

describe("deepExtend :", function() {
    it("parentRE allows you to concatenate strings.", function() {
        return expect(_B.deepExtend({
            url: "www.example.com"
        }, {
            url: "http://${_}/path/to/file.html"
        })).to.deep.equal({
            url: "http://www.example.com/path/to/file.html"
        });
    });
    it("parentRE also acts as a placeholder, which can be useful when you need to change one value in an array, while leaving the others untouched", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", "${_}", false, "${_}", "${_}" ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("parentRE also acts as a placeholder, #2 ", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false, "${_}", [] ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("parentRE also acts as a placeholder, #3", function() {
        return expect(_B.deepExtend([ 100, {
            id: 1234
        }, true, "foo", [ 250, 500 ] ], [ "${_}", {}, false ])).to.deep.equal([ 100, {
            id: 1234
        }, false, "foo", [ 250, 500 ] ]);
    });
    it("Array order is important.", function() {
        return expect(_B.deepExtend([ 1, 2, 3, 4 ], [ 1, 4, 3, 2 ])).to.deep.equal([ 1, 4, 3, 2 ]);
    });
    return it("You can remove an array element set in a parent object by setting the same index value to null in a child object.", function() {
        return expect(_B.deepExtend({
            arr: [ 1, 2, 3, 4 ]
        }, {
            arr: [ "${_}", null ]
        })).to.deep.equal({
            arr: [ 1, 3, 4 ]
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('go-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var arrInt, arrInt2, arrStr, assert, bundleDefaults, chai, data, expect, globalDefaults, obj, projectDefaults, _, _B, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

projectDefaults = _.clone(data.projectDefaults, true);

globalDefaults = _.clone(data.globalDefaults, true);

bundleDefaults = _.clone(data.bundleDefaults, true);

obj = _.clone(data.obj, true);

arrInt = _.clone(data.arrInt, true);

arrInt2 = _.clone(data.arrInt2, true);

arrStr = _.clone(data.arrStr, true);

describe("go: version 0.0.3", function() {
    describe("go: Object passed, no params, ", function() {
        var result;
        result = _B.go(obj);
        it("should be a same looking object", function() {
            return expect(result).to.deep.equal(obj);
        });
        return it("but should NOT be the *identical* object, but a clone of it", function() {
            expect(result).to.not.equal(obj);
            return expect(result !== obj).to.equal(true);
        });
    });
    describe("go: Array<int> passed, no params, ", function() {
        var result;
        result = _B.go(arrInt);
        it("equal's contents array returned", function() {
            return expect(result).to.deep.equal(arrInt);
        });
        return it("but should NOT be the *identical* array, but a clone of it", function() {
            return expect().to.not.equal(arrInt);
        });
    });
    describe("go: Array<String> passed, no params, ", function() {
        var result;
        result = _B.go(_B.go(arrStr));
        it("equal's contents array returned", function() {
            return expect(result).to.deep.equal(arrStr);
        });
        return it("but should NOT be the *identical* array, but a clone of it", function() {
            return expect(result).to.not.equal(arrStr);
        });
    });
    describe("go: Filter : Object ", function() {
        it("keys named b", function() {
            return expect(_B.go(obj, {
                fltr: function(val, key) {
                    return key !== "b";
                }
            })).to.deep.equal({
                ciba: 4,
                aaa: 7,
                c: -1
            });
        });
        return it("values < 5", function() {
            return expect(_B.go(obj, {
                fltr: function(val, key) {
                    return val < 5;
                }
            })).to.deep.equal({
                ciba: 4,
                b: 2,
                c: -1
            });
        });
    });
    describe("Object: filter values < 5 and sortBy key, ", function() {
        var result;
        result = _B.go(obj, {
            fltr: function(val, key) {
                return val < 5;
            },
            sort: function(val, key) {
                return key;
            }
        });
        it("deeply equals {b: 2, ciba: 4, c: -1}", function() {
            return expect(result).to.deep.equal({
                b: 2,
                ciba: 4,
                c: -1
            });
        });
        it("keys 'appear' sorted - WARNING: might not work with some runtimes!", function() {
            return expect(_.map(result, function(v, k) {
                return k;
            })).to.deep.equal([ "b", "c", "ciba" ]);
        });
        return it("iter respects sorted order", function() {
            return expect(_.map(_B.go(result), function(v, k) {
                return k;
            })).to.deep.equal([ "b", "c", "ciba" ]);
        });
    });
    describe("Object: filter large key-names & sortBy value descenting", function() {
        var result;
        result = _B.go(obj, {
            fltr: function(val, key) {
                return key.length < 4;
            },
            sort: function(val) {
                return -val;
            }
        });
        it("deeply equals {aaa: 7, b: 2, c: -1}", function() {
            return expect(result).to.deep.equal({
                aaa: 7,
                b: 2,
                c: -1
            });
        });
        it("keys 'appear' sorted - WARNING: might not work with some runtimes!", function() {
            return expect(_.map(result, function(v, k) {
                return k;
            })).to.deep.equal([ "aaa", "b", "c" ]);
        });
        return it("iter respects sorted order", function() {
            return expect(_.map(_B.go(result), function(v, k) {
                return k;
            })).to.deep.equal([ "aaa", "b", "c" ]);
        });
    });
    describe("Object: filter values < 5 and sortBy value", function() {
        var result;
        result = _B.go(arrInt, {
            fltr: function(val) {
                return val < 5;
            },
            sort: function(val) {
                return val;
            }
        });
        return it("deeply equals [-1, 2, 4] ", function() {
            return expect(result).to.deep.equal([ -1, 2, 4 ]);
        });
    });
    describe("Object: filter historical names and sortBy value", function() {
        var result;
        result = _B.go(arrStr, {
            fltr: function(val) {
                return val !== "Babylon" && val !== "Sparta";
            },
            sort: function(val) {
                return val;
            }
        });
        return it("deeply equals ['Agelos', 'Anodynos', 'Pikoulas' ] ", function() {
            return expect(result).to.deep.equal([ "Agelos", "Anodynos", "Pikoulas" ]);
        });
    });
    describe("Collecting types & objects", function() {
        describe("Object: collects to Array & Object!", function() {
            it("collect values as Array ", function() {
                return expect(_B.go(obj, {
                    sort: function(v, k) {
                        return k;
                    },
                    grab: "[]"
                })).to.deep.equal([ 7, 2, -1, 4 ]);
            });
            it("declaratively collect on another object, but also returns Obj!", function() {
                var newObj, result;
                newObj = {
                    oldKey: "oldValue"
                };
                result = _B.go(obj, {
                    sort: function(v, k) {
                        return k;
                    },
                    grab: newObj
                });
                expect(newObj).to.deep.equal({
                    oldKey: "oldValue",
                    aaa: 7,
                    b: 2,
                    c: -1,
                    ciba: 4
                });
                return expect(result).to.deep.equal({
                    aaa: 7,
                    b: 2,
                    c: -1,
                    ciba: 4
                });
            });
            return it("using grab:-> collects keys as Array (in reverse -unsihft!), but returns sorted proper sorted Obj!", function() {
                var newArr, result;
                newArr = [];
                result = _B.go(obj, {
                    sort: function(v, k) {
                        return k;
                    },
                    grab: function(v, k) {
                        return newArr.unshift(k);
                    }
                });
                expect(newArr).to.deep.equal([ "ciba", "c", "b", "aaa" ]);
                return expect(result).to.deep.equal({
                    aaa: 7,
                    b: 2,
                    c: -1,
                    ciba: 4
                });
            });
        });
        return describe("Array: collects to Object (& Array)!", function() {
            it("returns an Object when grab instructs it", function() {
                return expect(_B.go(arrInt, {
                    sort: function(v, k) {
                        return v;
                    },
                    fltr: function(v) {
                        return v < 7;
                    },
                    grab: "{}"
                })).to.deep.equal({
                    "0": -1,
                    "1": 2,
                    "2": 4
                });
            });
            it("'grab' declaratively collects array values as object values, with idx as key", function() {
                var newObj, result;
                newObj = {
                    oldKey: "oldValue"
                };
                result = _B.go(arrInt, {
                    sort: function(v) {
                        return v;
                    },
                    grab: newObj
                });
                expect(newObj).to.deep.equal({
                    "0": -1,
                    "1": 2,
                    "2": 4,
                    "3": 7,
                    oldKey: "oldValue"
                });
                return expect(result).to.deep.equal({
                    "0": -1,
                    "1": 2,
                    "2": 4,
                    "3": 7
                });
            });
            return it("using a function, it collects keys/values newObj, but returns sorted Array!", function() {
                var newObj, result;
                newObj = {
                    oldKey: "oldValue"
                };
                result = _B.go(arrInt, {
                    sort: function(v, k) {
                        return v;
                    },
                    grab: function(v, k) {
                        return newObj[k] = v;
                    }
                });
                expect(newObj).to.deep.equal({
                    "0": -1,
                    "1": 2,
                    "2": 4,
                    "3": 7,
                    oldKey: "oldValue"
                });
                return expect(result).to.deep.equal([ -1, 2, 4, 7 ]);
            });
        });
    });
    describe("Object: mimicking various _ functions!", function() {
        it("resembles _.pick with single string name", function() {
            return expect(_B.go(obj, {
                fltr: "ciba"
            })).to.deep.equal(_.pick(obj, "ciba"));
        });
        it("resembles _.pick with array of String (or string evaluated objects)", function() {
            var aaa;
            aaa = {};
            aaa.toString = function() {
                return "aaa";
            };
            return expect(_B.go(obj, {
                fltr: [ "ciba", aaa ]
            })).to.deep.equal(_.pick(obj, "ciba", aaa));
        });
        it("resembles _.omit ", function() {
            return expect(_B.go(obj, {
                fltr: function(v, k) {
                    return k !== "ciba" && k !== "aaa";
                }
            })).to.deep.equal(_.omit(obj, "ciba", "aaa"));
        });
        it("resembles _.difference", function() {
            return expect(_B.go(arrInt, {
                fltr: function(v) {
                    return __indexOf.call(arrInt2, v) < 0;
                }
            })).to.deep.equal(_.difference(arrInt, arrInt2));
        });
        it("resembles _.map", function() {
            var ar;
            ar = [];
            _B.go(obj, {
                grab: function(v) {
                    return ar.push(v);
                }
            });
            return expect(ar).to.deep.equal(_.map(obj, function(v) {
                return v;
            }));
        });
        it("resembles _.map, with a difference: not restricted to collect in array!", function() {
            var ob;
            ob = {};
            _B.go(obj, {
                grab: function(v, k) {
                    return ob[v] = k;
                }
            });
            return expect(ob).to.deep.equal({
                "4": "ciba",
                "7": "aaa",
                "2": "b",
                "-1": "c"
            });
        });
        it("resembles _.keys (with order guaranteed!)", function() {
            var keys, result;
            keys = [];
            result = _B.go(obj, {
                sort: function(v, k) {
                    return k;
                },
                grab: function(v, k) {
                    return keys.push(k);
                }
            });
            expect(keys).to.deep.equal(_.keys(obj).sort());
            return expect(result).to.deep.equal({
                aaa: 7,
                b: 2,
                c: -1,
                ciba: 4
            });
        });
        return it("resembles _.pluck", function() {
            var agedNames, names, stooges;
            stooges = [ {
                name: "moe",
                age: 40
            }, {
                name: "larry",
                age: 50
            }, {
                name: "curly",
                age: 60
            } ];
            names = [];
            _B.go(stooges, {
                grab: function(v) {
                    return names.push(v.name);
                }
            });
            expect(names).to.deep.equal(_.pluck(stooges, "name"));
            agedNames = [];
            _B.go(stooges, {
                grab: function(v) {
                    return agedNames.push(v.name + " (" + v.age + ")");
                }
            });
            return expect(agedNames).to.deep.equal([ "moe (40)", "larry (50)", "curly (60)" ]);
        });
    });
    return describe("Original objects not mutated", function() {
        expect(bundleDefaults).to.deep.equal(data.bundleDefaults);
        expect(projectDefaults).to.deep.equal(data.projectDefaults);
        expect(globalDefaults).to.deep.equal(data.globalDefaults);
        expect(obj).to.deep.equal(data.obj);
        expect(arrStr).to.deep.equal(data.arrStr);
        expect(arrInt).to.deep.equal(data.arrInt);
        return expect(arrInt2).to.deep.equal(data.arrInt2);
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('okv-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, bundleDefaults, chai, data, expect, globalDefaults, projectDefaults, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

projectDefaults = _.clone(data.projectDefaults, true);

globalDefaults = _.clone(data.globalDefaults, true);

bundleDefaults = _.clone(data.bundleDefaults, true);

describe("okv :", function() {
    var weirdKeyName;
    weirdKeyName = " $#%!@&";
    it("builds a simple object, with weird keyName", function() {
        return expect(_B.okv({}, "foo_" + weirdKeyName, 8, "bar" + weirdKeyName, "some bar")).to.deep.equal({
            "foo_ $#%!@&": 8,
            "bar $#%!@&": "some bar"
        });
    });
    return describe("build a more invloved object", function() {
        var bar, o;
        o = {};
        _B.okv(o, "foo_" + weirdKeyName, 8, bar = "bar" + weirdKeyName, "some bar");
        o[bar] = _B.okv({}, "nestedBar" + weirdKeyName, "This is a secret bar", "anotherBar" + weirdKeyName, "Many bars, no foo");
        it("o is build, then part of it augmented", function() {
            return expect(o).to.deep.equal({
                "foo_ $#%!@&": 8,
                "bar $#%!@&": {
                    "nestedBar $#%!@&": "This is a secret bar",
                    "anotherBar $#%!@&": "Many bars, no foo"
                }
            });
        });
        return it("add nested weird keyd bars on existing key", function() {
            var i;
            _B.okv(o[bar], "newbar" + weirdKeyName, "a new bar!", "bar" + function() {
                var _i, _len, _ref, _results;
                _ref = [ 1, 2, 3 ];
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    i = _ref[_i];
                    _results.push("" + i);
                }
                return _results;
            }().join("-"), "ther weirest bar!");
            return expect(o).to.deep.equal({
                "foo_ $#%!@&": 8,
                "bar $#%!@&": {
                    "nestedBar $#%!@&": "This is a secret bar",
                    "anotherBar $#%!@&": "Many bars, no foo",
                    "newbar $#%!@&": "a new bar!",
                    "bar1-2-3": "ther weirest bar!"
                }
            });
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('mutate-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore', './spec-data'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, chai, data, expect, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

data = require("./spec-data");

describe("mutate :", function() {
    var simpleCalc;
    simpleCalc = function(v) {
        if (v < 0) {
            return v + 10;
        } else {
            return v + 20;
        }
    };
    it("mutate Object values", function() {
        var o;
        o = {
            a: 1,
            b: 2,
            c: -1
        };
        return expect(_B.mutate(o, simpleCalc)).to.deep.equal({
            a: 21,
            b: 22,
            c: 9
        });
    });
    it("arrayize if string", function() {
        var o;
        o = {
            key1: "lalakis",
            key2: [ "ok", "yes" ]
        };
        return expect(_B.mutate(o, _B.arrayize, _.isString)).to.deep.equal({
            key1: [ "lalakis" ],
            key2: [ "ok", "yes" ]
        });
    });
    return describe("mutate arrays :", function() {
        var a;
        a = [ 1, 2, -1 ];
        it("mutate array with simplecalc ", function() {
            return expect(_B.mutate(a, simpleCalc)).to.deep.equal([ 21, 22, 9 ]);
        });
        return it("mutate array again with fltr", function() {
            return expect(_B.mutate(a, simpleCalc, function(v) {
                return v > 10;
            })).to.deep.equal([ 41, 42, 9 ]);
        });
    });
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('type-spec',['require', 'exports', 'module', 'chai', 'lodash', 'uberscore'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, chai, expect, oOs, _, _B;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_ = require("lodash");

_B = require("uberscore");

oOs = {
    Array: [ "this", "is", 1, "array" ],
    Function: function(x) {
        return x;
    },
    String: "I am a String!",
    Number: 667,
    Date: new Date,
    RegExp: /./g,
    Boolean: true,
    Null: null,
    Undefined: void 0,
    Object: {
        a: 1,
        b: 2,
        toString: function() {
            return "I am not a String, I am an Object...";
        }
    }
};

describe("type :", function() {
    var k, v, _results;
    _results = [];
    for (k in oOs) {
        v = oOs[k];
        _results.push(function(k, v) {
            return it(" recognises type '" + k + "'", function() {
                return expect(_B.type(v)).to.equal(k);
            });
        }(k, v));
    }
    return _results;
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('uberscore-spec',['require', 'exports', 'module', 'chai', 'uberscore'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
var assert, chai, expect, _uB;

chai = require("chai");

assert = chai.assert;

expect = chai.expect;

_uB = require("uberscore");

describe("uRequire's `rootExports` & `noConflict()`\n   (running on " + (__isNode ? "nodsjs" : "Web") + " via " + (__isAMD ? "AMD" : "noAMD/script") + ")", function() {
    if (__isWeb) {
        it("registers globals '_B' & 'uberscore'", function() {
            expect(_B).to.equal(_uB);
            return expect(uberscore).to.equal(_uB);
        });
        return it("noConflict() returns module & sets old values to globals '_B' & 'uberscore'", function() {
            expect(_B.noConflict()).to.equal(_uB);
            expect(_B).to.equal("Old global `_B`");
            return expect(uberscore).to.equal("Old global `uberscore`");
        });
    } else {
        it("NOT TESTING `rootExports`, I am on node/" + (__isAMD ? "AMD" : "plain") + "!", function() {});
        return it("NOT TESTING `noConflict()`, I am on node/" + (__isAMD ? "AMD" : "plain") + "!", function() {});
    }
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('index',['require', 'exports', 'module', './arrayize-spec', './deepCloneDefaults-spec', './deepExtend-spec', './go-spec', './okv-spec', './mutate-spec', './spec-data', './type-spec', './uberscore-spec'], 
  function (require, exports, module) {
  // uRequire: start body of original nodejs module
require("./arrayize-spec");

require("./deepCloneDefaults-spec");

require("./deepExtend-spec");

require("./go-spec");

require("./okv-spec");

require("./mutate-spec");

require("./spec-data");

require("./type-spec");

require("./uberscore-spec");
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);

      return require('index');
  };

  if (__isAMD) {
      define(['chai', 'lodash', 'uberscore'], factory);
  } else {
      if (__isNode) {
          module.exports = factory();
      } else {
          factory();
      }
  }
})();