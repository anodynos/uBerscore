/*!
* uberscore - version 0.0.5
* Compiled on 2013-01-23
* git://github.com/anodynos/uBerscore
* Copyright(c) 2013 Agelos Pikoulas (agelos.pikoulas@gmail.com )
* Licensed MIT http://www.opensource.org/licenses/mit-license.php
*/

// Combined file generated by uRequire v0.3.0alpha15, with help from r.js & almond

var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __global = null,
    __nodeRequire = function(){};
if (__isNode) {
    __nodeRequire = require;
    __global = global;
} else {
    __global = window;
};
factory = function() {
/**
 * almond 0.2.3 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 15);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('lodash',[],function() {
  if (typeof _ === "undefined") {
    return __nodeRequire('lodash');
  } else {
    return _;
  }
});
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('agreement/isAgree',['require', 'lodash', './isAgree'], 
  function (require, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original AMD module
return function(o, agreement) {
        if (_.isRegExp(agreement)) {
            return agreement.test(o + "");
        } else {
            if (_.isFunction(agreement)) {
                return agreement(o);
            } else {
                if (agreement === void 0) {
                    return true;
                } else {
                    if (_.isEqual(o, agreement)) {
                        return true;
                    } else {
                        return o + "" === agreement + "";
                    }
                }
            }
        }
    };
// uRequire: end body of original AMD module


});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('go',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var go, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

go = function(oa, actions, context) {
    var arrItem, fixForObj, fltr, grab, isObj, iter, keysOrder, newOA, resetResult, result, resultPush, sort, _i, _len;
    if (actions) {
        fltr = actions.fltr, iter = actions.iter, sort = actions.sort, grab = actions.grab;
    }
    isObj = !_.isArray(oa);
    newOA = function() {
        if (isObj) {
            return {};
        } else {
            return [];
        }
    };
    oa = _.clone(oa);
    result = null;
    resetResult = function() {
        return result = grab === void 0 ? newOA() : _.isFunction(grab) ? newOA() : _.isArray(grab) ? [] : _.isObject(grab) ? {} : _.isString(grab) ? grab === "[]" || grab === "array" || grab === "Array" || grab === "a" || grab === "A" ? [] : grab === "{}" || grab === "object" || grab === "Object" || grab === "o" || grab === "O" ? {} : newOA() : newOA();
    };
    resultPush = function(val, key) {
        if (!_.isArray(result)) {
            return result[key] = val;
        } else {
            return result.push(val);
        }
    };
    fixForObj = function(val, key) {
        if (isObj) {
            key = val;
            val = oa[key];
        }
        return [ val, key ];
    };
    if (!(fltr === void 0)) {
        resetResult();
        _.each(oa, function(val, key) {
            var f;
            if (_.isFunction(fltr)) {
                if (fltr.call(context, val, key, oa)) {
                    return resultPush(val, key);
                }
            } else {
                if (isObj) {
                    if (_.isString(fltr)) {
                        fltr = [ fltr ];
                    }
                    if (_.isArray(fltr)) {
                        if (__indexOf.call(function() {
                            var _i, _len, _results;
                            _results = [];
                            for (_i = 0, _len = fltr.length; _i < _len; _i++) {
                                f = fltr[_i];
                                _results.push(f.toString());
                            }
                            return _results;
                        }(), key) >= 0) {
                            return resultPush(val, key);
                        }
                    }
                }
            }
        });
        oa = result;
    }
    if (!(sort === void 0)) {
        resetResult();
        keysOrder = [];
        _(oa).chain().map(function(val, key) {
            if (isObj) {
                return key;
            } else {
                return val;
            }
        }).sortBy(_.isFunction(sort) ? function(val, key) {
            return sort.apply(context, fixForObj(val, key));
        } : _.isString(sort) ? function(val) {
            return val;
        } : _.isBoolean(sort) ? sort ? function() {
            return true;
        } : function() {
            return false;
        } : sort).each(function(val, key) {
            return resultPush.apply(null, fixForObj(val, key));
        });
        oa = result;
    }
    if (_.isFunction(iter)) {
        if (sort === void 0) {
            _.each(oa, function(val, key) {
                return iter.call(context, val, key, oa);
            });
        } else {
            _.each(oa, function(val, key) {
                return iter.call(context, val, key, oa);
            });
        }
    }
    if (grab) {
        if (_.isFunction(grab)) {
            _.each(oa, function(val, key) {
                return grab.call(context, val, key, oa);
            });
        } else {
            if (_.isArray(grab)) {
                for (_i = 0, _len = oa.length; _i < _len; _i++) {
                    arrItem = oa[_i];
                    grab.push(arrItem);
                }
            } else {
                if (_.isObject(grab)) {
                    _.extend(grab, oa);
                }
            }
        }
    }
    return oa;
};

module.exports = go;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('deepExtend',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var deepExtend, __slice = [].slice, __hasProp = {}.hasOwnProperty;

deepExtend = function() {
    var obj, parentRE, prop, source, sources, _i, _len;
    obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    parentRE = /#{\s*?_\s*?}/;
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        for (prop in source) {
            if (!__hasProp.call(source, prop)) continue;
            if (_.isUndefined(obj[prop])) {
                obj[prop] = source[prop];
            } else if (_.isString(source[prop]) && parentRE.test(source[prop])) {
                if (_.isString(obj[prop])) {
                    obj[prop] = source[prop].replace(parentRE, obj[prop]);
                }
            } else if (_.isArray(obj[prop]) || _.isArray(source[prop])) {
                if (!_.isArray(obj[prop]) || !_.isArray(source[prop])) {
                    throw "Error: Trying to combine an array with a non-array (" + prop + ")";
                } else {
                    obj[prop] = _.reject(deepExtend(obj[prop], source[prop]), function(item) {
                        return _.isNull(item);
                    });
                }
            } else if (_.isObject(obj[prop]) || _.isObject(source[prop])) {
                if (!_.isObject(obj[prop]) || !_.isObject(source[prop])) {
                    throw "Error: Trying to combine an object with a non-object (" + prop + ")";
                } else {
                    obj[prop] = deepExtend(obj[prop], source[prop]);
                }
            } else {
                obj[prop] = source[prop];
            }
        }
    }
    return obj;
};

module.exports = deepExtend;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('deepCloneDefaults',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './deepExtend'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var deepCloneDefaults, deepExtend, __slice = [].slice;

deepExtend = require("./deepExtend");

deepCloneDefaults = function() {
    var d, defaults, o, reversedClonedDefaults, _i, _len;
    o = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    reversedClonedDefaults = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        d = arguments[_i];
        reversedClonedDefaults.unshift(_.clone(d, true));
    }
    o = deepExtend.apply(null, reversedClonedDefaults);
    return o;
};

module.exports = deepCloneDefaults;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('okv',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var okv, __slice = [].slice;

okv = function() {
    var idx, keyName, keyValPairs, obj, _i, _len, _step;
    obj = arguments[0], keyValPairs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (_.isObject(obj)) {
        for (idx = _i = 0, _len = keyValPairs.length, _step = 2; _i < _len; idx = _i += _step) {
            keyName = keyValPairs[idx];
            if (idx + 1 < keyValPairs.length) {
                obj[keyName] = keyValPairs[idx + 1];
            }
        }
        return obj;
    } else {
        return null;
    }
};

module.exports = okv;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('arrayize',['require', './agreement/isAgree', 'lodash'], 
  function (require, isAgree, _) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original AMD module
return function(item, fltr) {
        if (isAgree(item, fltr)) {
            if (_.isArray(item)) {
                return item;
            } else {
                if (_.isUndefined(item) || _.isNull(item)) {
                    return [];
                } else {
                    return [ item ];
                }
            }
        } else {
            return item;
        }
    };
// uRequire: end body of original AMD module


});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('agreement/inAgreements',['require', 'exports', 'module', 'lodash', './isAgree', '../arrayize'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var arrayize, inAgreements;

arrayize = require("../arrayize");

inAgreements = function(o, agreements) {
    var agr, _i, _len;
    agreements = arrayize(agreements);
    if (_.isEmpty(agreements)) {
        false;
    } else {
        for (_i = 0, _len = agreements.length; _i < _len; _i++) {
            agr = agreements[_i];
            if (isAgree(o, agr)) {
                return true;
            }
        }
    }
    return false;
};

module.exports = inAgreements;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('certain',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var certain;

certain = function(o, defaultKey) {
    if (defaultKey == null) {
        defaultKey = "*";
    }
    return function(key) {
        var _ref;
        return (_ref = o[key]) != null ? _ref : o[defaultKey];
    };
};

module.exports = certain;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('mutate',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './go'], 
  function (require, exports, module, _, isAgree) {var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var go, mutate;

go = require("./go");

mutate = function(oa, mutator, fltr) {
    if (_.isFunction(mutator)) {
        go(oa, {
            iter: function(v, k) {
                if (isAgree(v, fltr)) {
                    return oa[k] = mutator(v);
                }
            }
        });
    }
    return oa;
};

module.exports = mutate;
// uRequire: end body of original nodejs module


return module.exports;
});
})(__global);
(function(window) {
  // Generated by uRequire v0.3.0alpha15
define('uBerscore',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './go', './deepExtend', './deepCloneDefaults', './okv', './arrayize', './agreement/inAgreements', './certain', './mutate'], 
  function (require, exports, module, _, isAgree) {
var m = (function (require, exports, module, _, isAgree) {
     var isWeb = (typeof define === 'function' && define.amd), isNode = !isWeb;

// uRequire: start body of original nodejs module
var ao, uBerscore;

({
    urequire: {
        rootExports: [ "_B", "uBerscore" ],
        noConflict: true
    }
});

uBerscore = function() {
    function uBerscore() {}
    uBerscore.prototype.go = require("./go");
    uBerscore.prototype.deepExtend = require("./deepExtend");
    uBerscore.prototype.deepCloneDefaults = require("./deepCloneDefaults");
    uBerscore.prototype.okv = require("./okv");
    uBerscore.prototype.arrayize = require("./arrayize");
    uBerscore.prototype.isAgree = require("./agreement/isAgree");
    uBerscore.prototype.inAgreements = require("./agreement/inAgreements");
    uBerscore.prototype.certain = require("./certain");
    uBerscore.prototype.mutate = require("./mutate");
    return uBerscore;
}();

module.exports = new uBerscore;

ao = {
    a: 1,
    b: 2,
    c: -1
};

ao = module.exports.go(ao, {
    fltr: "a"
});
// uRequire: end body of original nodejs module


return module.exports;
  }
)(require, exports, module, _, isAgree);
var old__B = window._B,
    old_uBerscore = window.uBerscore;

window._B = m;
window.uBerscore = m;


m.noConflict = function(){
  window._B = old__B;
  window.uBerscore = old_uBerscore;
  return m;
};
return m;
});
})(__global);

    return require('uBerscore');
};

if (__isAMD) {
    define(['lodash'], factory);
} else {
    if (__isNode) {
        module.exports = factory();
    } else {
        factory();
    }
}