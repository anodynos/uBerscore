// Combined file generated by uRequire v0.3.0alpha21, with help from r.js & almond
(function (){
  var __isAMD = (typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


  var __global = null,
      __nodeRequire = function(){};

  if (__isNode) {
      __nodeRequire = require;
      __global = global;
  } else {
      __global = window;
  };

  factory = function() {
/**
 * almond 0.2.4 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('util',[],function () {
  return __nodeRequire('util');
});
define('lodash',[],function () {
  if (typeof _ !== 'undefined'){return _;}return __nodeRequire('lodash');
});
(function (window) {
  define('agreement/isAgree',['require', 'exports', 'module', 'lodash', './isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var _;

_ = require("lodash");

module.exports = function(o, agreement) {
    if (_.isRegExp(agreement)) {
        return agreement.test(o + "");
    } else {
        if (_.isFunction(agreement)) {
            return agreement(o);
        } else {
            if (agreement === void 0) {
                return true;
            } else {
                if (_.isEqual(o, agreement)) {
                    return true;
                } else {
                    return o + "" === agreement + "";
                }
            }
        }
    }
};
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('go',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var go, _, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

_ = require("lodash");

go = function(oa, actions, context) {
    var arrItem, fixForObj, fltr, grab, isObj, iter, keysOrder, newOA, resetResult, result, resultPush, sort, _i, _len;
    if (actions) {
        fltr = actions.fltr, iter = actions.iter, sort = actions.sort, grab = actions.grab;
    }
    isObj = !_.isArray(oa);
    newOA = function() {
        if (isObj) {
            return {};
        } else {
            return [];
        }
    };
    oa = _.clone(oa);
    result = null;
    resetResult = function() {
        return result = grab === void 0 ? newOA() : _.isFunction(grab) ? newOA() : _.isArray(grab) ? [] : _.isObject(grab) ? {} : _.isString(grab) ? grab === "[]" || grab === "array" || grab === "Array" || grab === "a" || grab === "A" ? [] : grab === "{}" || grab === "object" || grab === "Object" || grab === "o" || grab === "O" ? {} : newOA() : newOA();
    };
    resultPush = function(val, key) {
        if (!_.isArray(result)) {
            return result[key] = val;
        } else {
            return result.push(val);
        }
    };
    fixForObj = function(val, key) {
        if (isObj) {
            key = val;
            val = oa[key];
        }
        return [ val, key ];
    };
    if (!(fltr === void 0)) {
        resetResult();
        _.each(oa, function(val, key) {
            var f;
            if (_.isFunction(fltr)) {
                if (fltr.call(context, val, key, oa)) {
                    return resultPush(val, key);
                }
            } else {
                if (isObj) {
                    if (_.isString(fltr)) {
                        fltr = [ fltr ];
                    }
                    if (_.isArray(fltr)) {
                        if (__indexOf.call(function() {
                            var _i, _len, _results;
                            _results = [];
                            for (_i = 0, _len = fltr.length; _i < _len; _i++) {
                                f = fltr[_i];
                                _results.push(f.toString());
                            }
                            return _results;
                        }(), key) >= 0) {
                            return resultPush(val, key);
                        }
                    }
                }
            }
        });
        oa = result;
    }
    if (!(sort === void 0)) {
        resetResult();
        keysOrder = [];
        _(oa).map(function(val, key) {
            if (isObj) {
                return key;
            } else {
                return val;
            }
        }).sortBy(_.isFunction(sort) ? function(val, key) {
            return sort.apply(context, fixForObj(val, key));
        } : _.isString(sort) ? function(val) {
            return val;
        } : _.isBoolean(sort) ? sort ? function() {
            return true;
        } : function() {
            return false;
        } : sort).each(function(val, key) {
            return resultPush.apply(null, fixForObj(val, key));
        });
        oa = result;
    }
    if (_.isFunction(iter)) {
        if (sort === void 0) {
            _.each(oa, function(val, key) {
                return iter.call(context, val, key, oa);
            });
        } else {
            _.each(oa, function(val, key) {
                return iter.call(context, val, key, oa);
            });
        }
    }
    if (grab) {
        if (_.isFunction(grab)) {
            _.each(oa, function(val, key) {
                return grab.call(context, val, key, oa);
            });
        } else {
            if (_.isArray(grab)) {
                for (_i = 0, _len = oa.length; _i < _len; _i++) {
                    arrItem = oa[_i];
                    grab.push(arrItem);
                }
            } else {
                if (_.isObject(grab)) {
                    _.extend(grab, oa);
                }
            }
        }
    }
    return oa;
};

module.exports = go;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('arrayize',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var isAgree, _;

_ = require("lodash");

isAgree = require("./agreement/isAgree");

module.exports = function(item) {
    if (_.isArray(item)) {
        return item;
    } else {
        if (_.isUndefined(item) || _.isNull(item)) {
            return [];
        } else {
            return [ item ];
        }
    }
};
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('agreement/inAgreements',['require', 'exports', 'module', 'lodash', './isAgree', '../arrayize'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var arrayize, inAgreements, isAgree, _;

_ = require("lodash");

isAgree = require("./isAgree");

arrayize = require("../arrayize");

inAgreements = function(o, agreements) {
    var agr, _i, _len;
    agreements = arrayize(agreements);
    if (_.isEmpty(agreements)) {
        false;
    } else {
        for (_i = 0, _len = agreements.length; _i < _len; _i++) {
            agr = agreements[_i];
            if (isAgree(o, agr)) {
                return true;
            }
        }
    }
    return false;
};

module.exports = inAgreements;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('Logger',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './agreement/inAgreements'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Logger, inAgreements, _, __slice = [].slice;

_ = require("lodash");

inAgreements = require("./agreement/inAgreements");

Logger = function() {
    var key, utilDependency, val, _ref;
    Logger.debugLevel = 0;
    Logger.prototype.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "{NO_VERSION}";
    function Logger() {
        this._constructor.apply(this, arguments);
    }
    Logger.prototype._constructor = function(title, debugLevel, newLine) {
        this.title = title;
        this.debugLevel = debugLevel != null ? debugLevel : 0;
        this.newLine = newLine != null ? newLine : true;
        return _.bindAll(this);
    };
    Logger.getALog = function(baseMsg, color, cons) {
        return function() {
            var arg, args, title;
            args = function() {
                var _i, _len, _ref, _results;
                _ref = Array.prototype.slice.call(arguments);
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    arg = _ref[_i];
                    _results.push(this.prettify(arg));
                }
                return _results;
            }.apply(this, arguments);
            title = "" + (this.title === void 0 ? "undefinedTitleogger" : this.title === "" ? "" : "[" + this.title + "] ") + baseMsg;
            if (title) {
                title = title + ":";
            }
            args.unshift(title);
            if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
                args.unshift("" + color);
            }
            if (this.newLine) {
                args.unshift("\n");
            }
            if (!(typeof __isWeb !== "undefined" && __isWeb !== null && __isWeb)) {
                args.push("[0m");
            }
            cons.apply(null, args);
            return args.join("");
        };
    };
    Logger.prototype.err = Logger.getALog("ERROR", "[31m", console.error);
    Logger.prototype.log = Logger.getALog("", "[0m", console.log);
    Logger.prototype.verbose = Logger.getALog("", "[32m", console.log);
    Logger.prototype.warn = Logger.getALog("WARNING", "[33m", console.log);
    Logger.prototype.debug = function() {
        var log;
        log = Logger.getALog("DEBUG", "[36m", console.log);
        return function() {
            var level, msgs;
            level = arguments[0], msgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            if (_.isString(level)) {
                msgs.unshift(level);
                msgs.unshift("(-)");
                level = 1;
            } else {
                msgs.unshift("(" + level + ")");
            }
            if (Logger.debugLevel >= 0 && level <= (this === Logger.logger || this.debugLevel === void 0 ? Logger.debugLevel : this.debugLevel) || Logger.debugLevel >= 999) {
                return log.apply(this, msgs);
            }
        };
    }();
    Logger.prototype.prettify = typeof __isNode !== "undefined" && __isNode !== null && __isNode || !(typeof __isNode !== "undefined" && __isNode !== null) ? (utilDependency = "util", function(inspect) {
        return function(o) {
            var pretty;
            pretty = "[0m" + inspect(o, false, null, true);
            if (_.isArray(o)) {
                pretty.replace(/\n/g, "");
            }
            if (inAgreements(o, [ _.isObject ])) {
                return pretty;
            } else {
                return o;
            }
        };
    }(require("util").inspect)) : function(o) {
        return o;
    };
    Logger.logger = new Logger("DefaultLogger");
    _ref = Logger.prototype;
    for (key in _ref) {
        val = _ref[key];
        if (_.isFunction(val)) {
            Logger[key] = _.bind(val, Logger.logger);
        } else {
            Logger[key] = val;
        }
    }
    return Logger;
}();

module.exports = Logger;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('blending/deepExtend',['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../Logger'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var deepExtend, l, shadowed, _, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

l = new (require("../Logger"))("Blender", typeof debugLevel !== "undefined" && debugLevel !== null ? debugLevel : 0);

shadowed = [ "constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf" ];

deepExtend = function() {
    var obj, parentRE, prop, source, sources, val, _i, _len;
    obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    parentRE = /\${\s*?_\s*?}/;
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        for (prop in source) {
            if (!__hasProp.call(source, prop)) continue;
            if (_.isUndefined(obj[prop])) {
                obj[prop] = source[prop];
            } else {
                if (_.isString(source[prop]) && parentRE.test(source[prop])) {
                    if (_.isString(obj[prop])) {
                        obj[prop] = source[prop].replace(parentRE, obj[prop]);
                    }
                } else {
                    if (_.isArray(obj[prop]) || _.isArray(source[prop])) {
                        if (!_.isArray(obj[prop]) || !_.isArray(source[prop])) {
                            throw "deepExtend: Error: Trying to combine an array with a non-array.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(obj[prop]) + "\nsource[prop]: " + l.prettify(source[prop]);
                        } else {
                            obj[prop] = _.reject(deepExtend(obj[prop], source[prop]), function(item) {
                                return item === null || item === void 0;
                            });
                        }
                    } else {
                        if (_.isPlainObject(obj[prop]) || _.isPlainObject(source[prop])) {
                            if (!_.isPlainObject(obj[prop]) || !_.isPlainObject(source[prop])) {
                                throw "deepExtend: Error trying to combine a PlainObject with a non-PlainObject.\n\nProperty: " + prop + "\ndestination[prop]: " + l.prettify(obj[prop]) + "\nsource[prop]: " + l.prettify(source[prop]);
                            } else {
                                obj[prop] = deepExtend(obj[prop], source[prop]);
                            }
                        } else {
                            val = source[prop];
                            if ((val === null || val === void 0) && _.isPlainObject(obj)) {
                                delete obj[prop];
                            } else {
                                obj[prop] = val;
                            }
                        }
                    }
                }
            }
        }
    }
    return obj;
};

module.exports = deepExtend;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('blending/deepCloneDefaults',['require', 'exports', 'module', 'lodash', '../agreement/isAgree', './deepExtend'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var deepCloneDefaults, deepExtend, __slice = [].slice;

deepExtend = require("./deepExtend");

deepCloneDefaults = function() {
    var d, defaults, o, reversedClonedDefaults, _i, _len;
    o = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    reversedClonedDefaults = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        d = arguments[_i];
        reversedClonedDefaults.unshift(_.clone(d, true));
    }
    o = deepExtend.apply(null, reversedClonedDefaults);
    return o;
};

module.exports = deepCloneDefaults;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('type',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var type, _, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

_ = require("lodash");

type = function(o, isShort) {
    var long, shorts, _ref;
    if (isShort == null) {
        isShort = false;
    }
    _ref = type.TYPES;
    for (long in _ref) {
        shorts = _ref[long];
        if (_["is" + long](o)) {
            if (isShort) {
                return shorts[0];
            } else {
                return long;
            }
        }
    }
    return "UNKNOWN";
};

type.toShort = function(aType) {
    var longType, shorts, _ref;
    if (type.TYPES[aType]) {
        return type.TYPES[aType][0];
    } else {
        _ref = type.TYPES;
        for (longType in _ref) {
            shorts = _ref[longType];
            if (__indexOf.call(shorts, aType) >= 0) {
                return shorts[0];
            }
        }
    }
};

type.toLong = function(aType) {
    var longType, shorts, _ref;
    if (type.TYPES[aType]) {
        return aType;
    } else {
        _ref = type.TYPES;
        for (longType in _ref) {
            shorts = _ref[longType];
            if (__indexOf.call(shorts, aType) >= 0) {
                return longType;
            }
        }
    }
};

type.areEqual = function(aType, bType) {
    return type.toShort(aType) === type.toShort(bType);
};

type.TYPES = {
    Arguments: [ "args", ".." ],
    Array: [ "[]", "A" ],
    Function: [ "->", "F" ],
    String: [ "''", "S", '""' ],
    Date: [ "D" ],
    RegExp: [ "//", "R" ],
    Object: [ "{}", "O" ],
    Number: [ "N" ],
    Boolean: [ "B" ],
    Null: [ "null", "-" ],
    Undefined: [ "U", "~" ]
};

module.exports = type;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('isPlain',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './type'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var isPlain, type, _, __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};

_ = require("lodash");

type = require("./type");

isPlain = function(o) {
    var _ref;
    return _ref = type(o), __indexOf.call(isPlain.PLAIN_TYPES, _ref) >= 0;
};

isPlain.PLAIN_TYPES = [ "String", "Date", "RegExp", "Number", "Boolean", "Null", "Undefined" ];

module.exports = isPlain;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('certain',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var certain, _;

_ = require("lodash");

certain = function(o, defaultKey, defaultVal, isStrict) {
    if (isStrict == null) {
        isStrict = false;
    }
    if (!(_.isPlainObject(o) || _.isFunction(o))) {
        throw "Error: _B.certain: o is neither an Object or Function.\no=" + JSON.stringify(o, null, "");
    }
    if (_.isUndefined(defaultKey)) {
        defaultKey = "*";
    }
    return function(key) {
        var val, _ref, _ref1;
        val = (_ref = (_ref1 = o[key]) != null ? _ref1 : o[defaultKey]) != null ? _ref : defaultVal;
        if (isStrict && _.isUndefined(val)) {
            throw "Error: _B.certain: defaultKey is undefined.\n  defaultVal is also undefined.\n  key='" + key + "' (o[" + key + "] is obviously undefined too)\n  defaultKey='" + defaultKey + "'\n  o=" + JSON.stringify(o, null, "");
        }
        return val;
    };
};

module.exports = certain;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('mutate',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './go'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var go, isAgree, mutate, _;

_ = require("lodash");

isAgree = require("./agreement/isAgree");

go = require("./go");

mutate = function(oa, mutator, fltr) {
    if (_.isFunction(mutator)) {
        go(oa, {
            iter: function(v, k) {
                if (isAgree(v, fltr)) {
                    return oa[k] = mutator(v);
                }
            }
        });
    }
    return oa;
};

module.exports = mutate;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('blending/bindAndCertain',['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../certain', '../Logger', '../type', '../mutate'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Logger, bindAndCertain, certain, l, mutate, toShortTypeFormat, type, _;

_ = require("lodash");

certain = require("../certain");

Logger = require("../Logger");

l = new Logger("Blending/bindAndCertain", 0);

type = require("../type");

mutate = require("../mutate");

bindAndCertain = function(o, bindTo, path, root) {
    var action, key, val;
    if (path == null) {
        path = [ "$" ];
    }
    if (_.isUndefined(root)) {
        root = o;
    }
    o = toShortTypeFormat(o);
    for (key in o) {
        val = o[key];
        if (!(key !== "order")) {
            continue;
        }
        path.push(key);
        if (_.isPlainObject(val)) {
            bindAndCertain(val, bindTo, path, root);
            o[key] = certain(val);
            o[key].isCertain = bindTo;
        } else {
            if (_.isFunction(val) || _.isString(val)) {
                if (_.isString(val)) {
                    if (_.isFunction(bindTo[val])) {
                        action = bindTo[val];
                    } else {
                        throw l.err("Error initializing blendBehaviour:\n", root, "at '" + path.join("/") + "'.\n\nNo action '" + l.prettify(val) + "' was found either on blender or your passed actions.");
                    }
                } else {
                    action = val;
                }
                o[key] = _.bind(action, bindTo);
                o[key].isAction = bindTo;
            } else {
                throw l.err("Error initializing blendBehaviour:\n", root, "at '" + path.join("/") + "'.\n\nFinal action '" + l.prettify(val) + "' is neither a Function, nor a String as functionName.");
            }
        }
        path.pop();
    }
    return certain(o);
};

toShortTypeFormat = function(o) {
    var key, short;
    for (key in o) {
        short = type.toShort(key);
        if (short && key !== short) {
            o[short] = o[key];
            delete o[key];
        }
    }
    return o;
};

module.exports = bindAndCertain;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('YouAreDaChef',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Combinator, YouAreDaChef, _, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

Combinator = function() {
    function Combinator() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.clazzes([]);
        this.methods([]);
        this["for"].apply(this, args);
        this;
    }
    Combinator.prototype.namespace = function(name) {
        if (name == null) {
            name = null;
        }
        if (name != null) {
            this._namespace = name;
            return this;
        } else {
            return this._namespace;
        }
    };
    Combinator.prototype.clazzes = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length > 0) {
            this._clazzes = args;
            return this;
        } else {
            return this._clazzes;
        }
    };
    Combinator.prototype.methods = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length > 0) {
            this._methods = args;
            return this;
        } else {
            return this._methods;
        }
    };
    Combinator.prototype["for"] = function() {
        var args, clazz_arg;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length > 0 && _.all(args, _.isFunction)) {
            this.clazzes.apply(this, args);
        } else if (args.length === 1) {
            if (_.isString(args[0])) {
                this.namespace(args[0]);
            } else {
                this.namespace(_.keys(args[0])[0]);
                clazz_arg = args[0][this.namespace()];
                if (_.isArray(clazz_arg)) {
                    this.clazzes.apply(this, clazz_arg);
                } else if (_.isFunction(clazz_arg)) {
                    this.clazzes(clazz_arg);
                } else {
                    throw "What do I do with { " + this.namespace() + ": " + clazz_arg + " }?";
                }
            }
        }
        return this;
    };
    Combinator.prototype.advise = function(verb, advice, namespace, clazzes, pointcut_exprs) {
        var _advice;
        if (verb === "unless") {
            verb = "guard";
            _advice = advice;
            advice = function() {
                var args;
                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return !_advice.apply(this, args);
            };
        }
        if (!clazzes.length) {
            throw "Need to define one or more classes";
        }
        return _.each(clazzes, function(clazz) {
            var daemonize, expr;
            daemonize = function(name, inject) {
                var daemonology, key, _base, _ref, _ref1;
                if (inject == null) {
                    inject = [];
                }
                daemonology = (_ref = (_base = (_ref1 = clazz.__YouAreDaChef) != null ? _ref1 : clazz.__YouAreDaChef = {})[name]) != null ? _ref : _base[name] = {};
                _.defaults(daemonology, {
                    before: [],
                    after: [],
                    around: [],
                    guard: [],
                    "default": []
                });
                if (!clazz.prototype.hasOwnProperty("before_" + name + "_daemon")) {
                    clazz.prototype["before_" + name + "_daemon"] = function() {
                        var args, daemon, daemon_args, _i, _len, _ref2, _ref3, _ref4;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        daemon_args = inject.concat(args);
                        _ref2 = daemonology.before.reverse();
                        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                            daemon = _ref2[_i];
                            daemon[1].apply(this, daemon_args);
                        }
                        return (_ref3 = clazz.__super__) != null ? (_ref4 = _ref3["before_" + name + "_daemon"]) != null ? _ref4.apply(this, args) : void 0 : void 0;
                    };
                    clazz.prototype["after_" + name + "_daemon"] = function() {
                        var args, daemon, daemon_args, _i, _len, _ref2, _ref3, _ref4, _results;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        daemon_args = inject.concat(args);
                        if ((_ref2 = clazz.__super__) != null) {
                            if ((_ref3 = _ref2["after_" + name + "_daemon"]) != null) {
                                _ref3.apply(this, args);
                            }
                        }
                        _ref4 = daemonology.after;
                        _results = [];
                        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                            daemon = _ref4[_i];
                            _results.push(daemon[1].apply(this, daemon_args));
                        }
                        return _results;
                    };
                    clazz.prototype["around_" + name + "_daemon"] = function() {
                        var args, daemon, daemon_args, default_fn, fn, fn_list, _i, _len, _ref2, _ref3, _ref4, _this = this;
                        default_fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                        daemon_args = inject.concat(args);
                        fn_list = [];
                        if (((_ref2 = clazz.__super__) != null ? _ref2["around_" + name + "_daemon"] : void 0) != null) {
                            fn_list.unshift((_ref3 = clazz.__super__) != null ? _ref3["around_" + name + "_daemon"] : void 0);
                        }
                        _ref4 = daemonology.around;
                        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                            daemon = _ref4[_i];
                            fn_list.unshift(daemon[1]);
                        }
                        fn = _.reduce(fn_list, function(acc, advice) {
                            return function() {
                                var args;
                                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                                return advice.call.apply(advice, [ this, acc ].concat(__slice.call(daemon_args)));
                            };
                        }, function() {
                            var args;
                            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                            return default_fn.apply(_this, args);
                        });
                        return fn.apply(this, args);
                    };
                    clazz.prototype["guard_" + name + "_daemon"] = function() {
                        var args, daemon, daemon_args, _i, _len, _ref2, _ref3, _ref4;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        daemon_args = inject.concat(args);
                        if (((_ref2 = clazz.__super__) != null ? _ref2["guard_" + name + "_daemon"] : void 0) != null) {
                            if (!((_ref3 = clazz.__super__) != null ? _ref3["guard_" + name + "_daemon"].apply(this, args) : void 0)) {
                                return false;
                            }
                        }
                        _ref4 = daemonology.guard;
                        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                            daemon = _ref4[_i];
                            if (!daemon[1].apply(this, daemon_args)) {
                                return false;
                            }
                        }
                        return true;
                    };
                }
                if (!(clazz.prototype.hasOwnProperty(name) && daemonology["default"].length > 0)) {
                    if (_.include(_.keys(clazz.prototype), name)) {
                        daemonology["default"].push([ "Combinator: 1", clazz.prototype[name] ]);
                    } else if (clazz.__super__ != null) {
                        daemonology["default"].push([ "Combinator: 1", function() {
                            var args;
                            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                            return clazz.__super__[name].apply(this, args);
                        } ]);
                    } else if (clazz.prototype.__proto__ != null) {
                        daemonology["default"].push([ "Combinator: 1", function() {
                            var args;
                            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                            return clazz.prototype.__proto__[name].apply(this, args);
                        } ]);
                    } else {
                        daemonology["default"].push([ "Combinator: 1", function() {
                            var args;
                            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                            throw "No method or superclass defined for " + name;
                        } ]);
                    }
                    clazz.prototype[name] = function() {
                        var args, _ref2, _this = this;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        if (clazz.prototype["guard_" + name + "_daemon"].apply(this, args)) {
                            clazz.prototype["before_" + name + "_daemon"].apply(this, args);
                            return _.tap((_ref2 = clazz.prototype["around_" + name + "_daemon"]).call.apply(_ref2, [ this, _.last(daemonology["default"])[1] ].concat(__slice.call(args))), function(retv) {
                                return clazz.prototype["after_" + name + "_daemon"].apply(_this, args);
                            });
                        }
                    };
                }
                if (namespace != null) {
                    if (_.isFunction(advice)) {
                        advice = [ "" + namespace + ": " + (daemonology[verb].length + 1), advice ];
                    } else if (_.isArray(advice)) {
                        advice = [ "" + namespace + ": " + advice[0], advice[1] ];
                    } else {
                        key = _.keys(advice)[0];
                        advice = [ "" + namespace + ": " + key, advice[key] ];
                    }
                } else {
                    if (_.isFunction(advice)) {
                        advice = [ "" + (daemonology[verb].length + 1), advice ];
                    } else if (_.isArray(advice)) {} else {
                        key = _.keys(advice)[0];
                        advice = [ key, advice[key] ];
                    }
                }
                return daemonology[verb].push(advice);
            };
            if (pointcut_exprs.length === 1 && (expr = pointcut_exprs[0]) instanceof RegExp) {
                _.each(_.functions(clazz.prototype), function(name) {
                    var match_data;
                    if (match_data = name.match(expr)) {
                        return daemonize(name, match_data);
                    }
                });
            } else {
                _.each(pointcut_exprs, function(name) {
                    if (_.isString(name)) {
                        if (verb === "default" && !clazz.prototype["before_" + name + "_daemon"] && _.isFunction(advice)) {
                            return clazz.prototype[name] = advice;
                        } else {
                            return daemonize(name);
                        }
                    } else {
                        throw "Specify a pointcut with a single regular expression or a list of strings";
                    }
                });
            }
            return clazz.__YouAreDaChef;
        });
    };
    return Combinator;
}();

_.each([ "default", "before", "around", "after", "guard", "unless" ], function(verb) {
    return Combinator.prototype[verb] = function() {
        var advice, args, expr, pointcut_exprs, _i, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length === 1) {
            if (_.isFunction(args[0])) {
                this.advise(verb, args[0], this.namespace(), this.clazzes(), this.methods());
            } else {
                _ref = args[0];
                for (expr in _ref) {
                    if (!__hasProp.call(_ref, expr)) continue;
                    advice = _ref[expr];
                    this.advise(verb, advice, this.namespace(), this.clazzes(), [ expr ]);
                }
            }
        } else if (args.length > 1 && _.isString(args[0]) || args[0] instanceof RegExp) {
            pointcut_exprs = 2 <= args.length ? __slice.call(args, 0, _i = args.length - 1) : (_i = 0, []), advice = args[_i++];
            this.advise(verb, advice, this.namespace(), this.clazzes(), pointcut_exprs);
        } else {
            throw "What do I do with " + args + " for " + verb + "?";
        }
        return this;
    };
});

Combinator.prototype.def = Combinator.prototype.define = Combinator.prototype["default"];

Combinator.prototype.when = Combinator.prototype.guard;

Combinator.prototype.except_when = Combinator.prototype.unless;

Combinator.prototype.tag = Combinator.prototype.namespace;

Combinator.prototype.method = Combinator.prototype.methods;

Combinator.prototype.clazz = Combinator.prototype.clazzes;

YouAreDaChef = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
    }(Combinator, args, function() {});
};

_.each([ "for", "namespace", "clazz", "method", "clazzes", "methods", "tag" ], function(definition_method_name) {
    return YouAreDaChef[definition_method_name] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _.tap(new Combinator, function(combinator) {
            return combinator[definition_method_name].apply(combinator, args);
        });
    };
});

_.extend(YouAreDaChef, {
    inspect: function(clazz) {
        return clazz.__YouAreDaChef;
    }
});

module.exports = YouAreDaChef;

_.defaults(module.exports, {
    YouAreDaChef: YouAreDaChef
});

this;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('blending/Blender',['require', 'exports', 'module', 'lodash', '../agreement/isAgree', '../Logger', '../type', '../isPlain', '../certain', '../mutate', './bindAndCertain', '../go', '../YouAreDaChef'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var Blender, YADC, bindAndCertain, certain, debugLevel, go, isPlain, l, mutate, simpleMutateCertain, type, _, __bind = function(fn, me) {
    return function() {
        return fn.apply(me, arguments);
    };
}, __slice = [].slice, __hasProp = {}.hasOwnProperty;

_ = require("lodash");

debugLevel = 0;

l = new (require("../Logger"))("Blender", debugLevel != null ? debugLevel : 0);

type = require("../type");

isPlain = require("../isPlain");

certain = require("../certain");

simpleMutateCertain = function(o) {
    return certain(o);
};

mutate = require("../mutate");

bindAndCertain = require("./bindAndCertain");

go = require("../go");

Blender = function() {
    var defaultBBOrder;
    defaultBBOrder = [ "src", "dst" ];
    function Blender() {
        this._blend = __bind(this._blend, this);
        this.blend = __bind(this.blend, this);
        this._constructor = __bind(this._constructor, this);
        this._constructor.apply(this, arguments);
    }
    Blender.prototype._constructor = function(blenderBehaviors, actions) {
        var bb, dbb, k, lastDBB, _i, _j, _len, _len1, _ref, _ref1;
        this.blenderBehaviors = blenderBehaviors;
        this.actions = actions;
        if (!_.isEmpty(arguments)) {
            if (!_.isArray(this.blenderBehaviors)) {
                this.actions = void 0;
                this.blenderBehaviors = [].slice.call(arguments, 0);
            }
        }
        this.blenderBehaviors || (this.blenderBehaviors = []);
        if (_.isObject(this.actions)) {
            _.extend(this, this.actions);
            _.bindAll(this);
        }
        this.defaultBlenderBehaviors || (this.defaultBlenderBehaviors = []);
        this.defaultBlenderBehaviors.push({
            order: [ "src", "dst" ],
            Array: {
                A: "deepOverwrite",
                "{}": "deepOverwrite"
            },
            Object: {
                O: "deepOverwrite",
                "[]": "deepOverwrite"
            },
            "*": {
                "*": "overwrite"
            }
        });
        lastDBB = _.last(this.defaultBlenderBehaviors);
        for (k in lastDBB) {
            dbb = lastDBB[k];
            if (!_.isArray(dbb) && _.isUndefined(dbb["*"])) {
                dbb["*"] = lastDBB["*"]["*"];
            }
        }
        _ref = this.defaultBlenderBehaviors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            bb = _ref[_i];
            this.blenderBehaviors.push(bb);
        }
        this.certainBlenderBehaviors = [];
        _ref1 = this.blenderBehaviors;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            bb = _ref1[_j];
            bb = _.clone(bb, true);
            this.certainBlenderBehaviors.push(bindAndCertain(bb, this));
        }
        return this.currentPath = [];
    };
    Blender.prototype.blend = function() {
        var dst, dstObject, sources, src, _i, _len;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (_.isEmpty(this.currentPath)) {
            dstObject = {
                $: dst
            };
            for (_i = 0, _len = sources.length; _i < _len; _i++) {
                src = sources[_i];
                this._blend(dstObject, {
                    $: src
                });
            }
            return dstObject.$;
        } else {
            return this._blend.apply(this, arguments);
        }
    };
    Blender.prototype._blend = function() {
        var action, bbOrder, bbi, cbb, dst, prop, result, sources, src, types, visitNextBB, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        dst = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = sources.length; _i < _len; _i++) {
            src = sources[_i];
            for (prop in src) {
                if (!__hasProp.call(src, prop)) continue;
                this.currentPath.push(prop);
                types = {
                    dst: type(dst[prop], true),
                    src: type(src[prop], true)
                };
                visitNextBB = true;
                _ref = this.certainBlenderBehaviors;
                for (bbi = _j = 0, _len1 = _ref.length; _j < _len1; bbi = ++_j) {
                    cbb = _ref[bbi];
                    if (!visitNextBB) {
                        continue;
                    }
                    _ref1 = this.blenderBehaviors[bbi].order || defaultBBOrder;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        bbOrder = _ref1[_k];
                        if (_.isUndefined(types[bbOrder])) {
                            throw l.err("_.Blender.blend: Error: Invalid BlenderBehaviour `order` '" + bbOrder + "',\nwhile reading BlenderBehaviour #" + bbi + " :\n", this.blenderBehaviors[bbi], "\n\nDefault BlenderBehaviour order is ", defaultBBOrder);
                        } else {
                            if (!(cbb === void 0 || cbb.isAction === this)) {
                                cbb = cbb(types[bbOrder]);
                            } else {
                                break;
                            }
                        }
                    }
                    if (cbb === void 0) {
                        continue;
                    } else {
                        action = cbb;
                    }
                    result = action(prop, src, dst);
                    visitNextBB = false;
                    if (!(result === this.SKIP || result === this.NEXT || result === this.DELETE || result === this.DELETE_NEXT)) {
                        if (_.isArray(result) && result[0] === this.NEXT) {
                            result = result[1];
                            visitNextBB = true;
                        }
                        dst[prop] = result;
                    } else {
                        if (result === this.DELETE || result === this.DELETE_NEXT) {
                            delete dst[prop];
                        }
                        if (result === this.NEXT || result === this.DELETE_NEXT) {
                            visitNextBB = true;
                        }
                    }
                }
                this.currentPath.pop();
            }
        }
        return dst;
    };
    Blender.prototype.SKIP = {
        ActionResult: "SKIP"
    };
    Blender.prototype.NEXT = {
        ActionResult: "NEXT"
    };
    Blender.prototype.DELETE = {
        ActionResult: "DELETE"
    };
    Blender.prototype.DELETE_NEXT = {
        ActionResult: "DELETE_NEXT"
    };
    Blender.prototype.overwrite = function(prop, src, dst) {
        return src[prop];
    };
    Blender.prototype.deepOverwrite = function(prop, src, dst) {
        return this.blend(dst[prop], src[prop]);
    };
    Blender.prototype.arrayAppend = function(prop, src, dst) {
        var s, _i, _len, _ref;
        _ref = src[prop];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            dst[prop].push(s);
        }
        return dst[prop];
    };
    return Blender;
}();

module.exports = Blender;

YADC = require("../YouAreDaChef").YouAreDaChef;

YADC(Blender).before(/overwriteOrReplace|deepOverwrite|overwrite|print/, function(match, prop, src, dst) {
    return l.debug("YADC:" + match + "\n'" + type(dst[prop]) + "'    <--  '" + type(src[prop]) + "'   /" + this.currentPath.join("/"), dst[prop], "    <--  ", src[prop]);
});
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('okv',['require', 'exports', 'module', 'lodash', './agreement/isAgree'], 
  function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var okv, __slice = [].slice;

okv = function() {
    var idx, keyName, keyValPairs, obj, _i, _len, _step;
    obj = arguments[0], keyValPairs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (_.isObject(obj)) {
        for (idx = _i = 0, _len = keyValPairs.length, _step = 2; _i < _len; idx = _i += _step) {
            keyName = keyValPairs[idx];
            if (idx + 1 < keyValPairs.length) {
                obj[keyName] = keyValPairs[idx + 1];
            }
        }
        return obj;
    } else {
        return null;
    }
};

module.exports = okv;
// uRequire: end body of original nodejs module


return module.exports;
}
);
})(__global);
(function (window) {
  define('uberscore',['require', 'exports', 'module', 'lodash', './agreement/isAgree', './go', './blending/deepExtend', './blending/deepCloneDefaults', './blending/Blender', './okv', './arrayize', './agreement/inAgreements', './certain', './mutate', './type', './isPlain', './Logger'], 
  function (require, exports, module, _, isAgree) {
  
var m = (function (require, exports, module, _, isAgree) {
  // uRequire: start body of original nodejs module
var uberscore;

({
    urequire: {
        rootExports: [ "_B", "uberscore" ],
        noConflict: true
    }
});

uberscore = function() {
    function uberscore() {}
    uberscore.prototype.go = require("./go");
    uberscore.prototype.deepExtend = require("./blending/deepExtend");
    uberscore.prototype.deepCloneDefaults = require("./blending/deepCloneDefaults");
    uberscore.prototype.Blender = require("./blending/Blender");
    uberscore.prototype.okv = require("./okv");
    uberscore.prototype.arrayize = require("./arrayize");
    uberscore.prototype.isAgree = require("./agreement/isAgree");
    uberscore.prototype.inAgreements = require("./agreement/inAgreements");
    uberscore.prototype.certain = require("./certain");
    uberscore.prototype.mutate = require("./mutate");
    uberscore.prototype.type = require("./type");
    uberscore.prototype.isPlain = require("./isPlain");
    uberscore.prototype.Logger = require("./Logger");
    return uberscore;
}();

module.exports = new uberscore;
// uRequire: end body of original nodejs module


return module.exports;
})(require, exports, module, _, isAgree);
var old__B = window._B,
    old_uberscore = window.uberscore;

window._B = m;
window.uberscore = m;
m.noConflict = function () {
    window._B = old__B;
  window.uberscore = old_uberscore;
return m;
}
return m;
}
);
})(__global);

      return require('uberscore');
  };

  if (__isAMD) {
      define(['lodash'], factory);
  } else {
      if (__isNode) {
          module.exports = factory();
      } else {
          factory();
      }
  }
})();